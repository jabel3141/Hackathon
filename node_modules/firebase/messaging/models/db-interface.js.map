{"version":3,"sources":["src/messaging/models/db-interface.ts","messaging/models/db-interface.js"],"names":["DBInterface","dbName","dbVersion","errorFactory_","map","dbName_","dbVersion_","openDbPromise_","TRANSACTION_READ_WRITE","prototype","openDatabase","_this","Promise","resolve","reject","request","indexedDB","open","onerror","event","target","error","onsuccess","result","onupgradeneeded","db","onDBUpgrade","closeDatabase","then","close","create","codes","SHOULD_BE_INHERITED"],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA;;;;;;AAEA;;AAEA;;;;;;AAEA,IAAAA,cAAA,YAAA;AAOE;;;;AAIA,aAAAA,WAAA,CAAYC,MAAZ,EAAoBC,SAApB,EAA6B;AAC3B,aAAKC,aAAL,GAAqB,yBAAiB,WAAjB,EAA8B,WAA9B,EAA2C,iBAAOC,GAAlD,CAArB;AACA,aAAKC,OAAL,GAAeJ,MAAf;AACA,aAAKK,UAAL,GAAkBJ,SAAlB;AACA,aAAKK,cAAL,GAAsB,IAAtB;AACA,aAAKC,sBAAL,GAA8B,WAA9B;AACD;AAED;;;;;AAKAR,gBAAAS,SAAA,CAAAC,YAAA,GAAA,YAAA;AAAA,YAAAC,QAAA,IAAA;AACE,YAAI,KAAKJ,cAAT,EAAyB;AACvB,mBAAO,KAAKA,cAAZ;AACD;AAED,aAAKA,cAAL,GAAsB,IAAIK,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;AAChD,gBAAMC,UAAUC,UAAUC,IAAV,CAAeN,MAAKN,OAApB,EAA6BM,MAAKL,UAAlC,CAAhB;AACAS,oBAAQG,OAAR,GAAkB,UAAAC,KAAA,EAAK;AACrBL,uBAAoBK,MAAMC,MAAN,CAAcC,KAAlC;AACD,aAFD;AAGAN,oBAAQO,SAAR,GAAoB,UAAAH,KAAA,EAAK;AACvBN,wBAAqBM,MAAMC,MAAN,CAAcG,MAAnC;AACD,aAFD;AAGAR,oBAAQS,eAAR,GAA0B,UAAAL,KAAA,EAAK;AAC7B,oBAAIM,KAAkBN,MAAMC,MAAN,CAAcG,MAApC;AACAZ,sBAAKe,WAAL,CAAiBD,EAAjB;AACD,aAHD;AAID,SAZqB,CAAtB;AAcA,eAAO,KAAKlB,cAAZ;AACD,KApBD;AAsBA;;;;AAIAP,gBAAAS,SAAA,CAAAkB,aAAA,GAAA,YAAA;AAAA,YAAAhB,QAAA,IAAA;AACE,eAAOC,QAAQC,OAAR,GAAkBe,IAAlB,CAAuB,YAAA;AAC5B,gBAAIjB,MAAKJ,cAAT,EAAyB;AACvB,uBAAOI,MAAKJ,cAAL,CAAoBqB,IAApB,CAAyB,UAAAH,EAAA,EAAE;AAChCA,uBAAGI,KAAH;AACAlB,0BAAKJ,cAAL,GAAsB,IAAtB;AACD,iBAHM,CAAP;AAID;AACF,SAPM,CAAP;AAQD,KATD;AAWA;;;;AAIAP,gBAAAS,SAAA,CAAAiB,WAAA,GAAA,UAAYD,EAAZ,EAAc;AACZ,cAAM,KAAKtB,aAAL,CAAmB2B,MAAnB,CAA0B,iBAAOC,KAAP,CAAaC,mBAAvC,CAAN;AACD,KAFD;AAGF,WAAAhC,WAAA;AApEA,CAAA,EAAA;kBC0DeA,W","file":"db-interface.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\n\nimport { ErrorFactory } from '../../app/errors';\n\nimport Errors from './errors';\n\nexport default class DBInterface {\n  private dbName_: string;\n  private dbVersion_: number;\n  private openDbPromise_: Promise<IDBDatabase>;\n  protected errorFactory_: ErrorFactory<string>;\n  protected TRANSACTION_READ_WRITE: IDBTransactionMode;\n\n  /**\n   * @param {string} dbName\n   * @param {number} dbVersion\n   */\n  constructor(dbName, dbVersion) {\n    this.errorFactory_ = new ErrorFactory('messaging', 'Messaging', Errors.map);\n    this.dbName_ = dbName;\n    this.dbVersion_ = dbVersion;\n    this.openDbPromise_ = null;\n    this.TRANSACTION_READ_WRITE = 'readwrite';\n  }\n\n  /**\n   * Get the indexedDB as a promsie.\n   * @protected\n   * @return {!Promise<!IDBDatabase>} The IndexedDB database\n   */\n  openDatabase() {\n    if (this.openDbPromise_) {\n      return this.openDbPromise_;\n    }\n\n    this.openDbPromise_ = new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName_, this.dbVersion_);\n      request.onerror = event => {\n        reject((<IDBRequest>event.target).error);\n      };\n      request.onsuccess = event => {\n        resolve((<IDBRequest>event.target).result);\n      };\n      request.onupgradeneeded = event => {\n        var db = (<IDBRequest>event.target).result;\n        this.onDBUpgrade(db);\n      };\n    });\n\n    return this.openDbPromise_;\n  }\n\n  /**\n   * Close the currently open database.\n   * @return {!Promise} Returns the result of the promise chain.\n   */\n  closeDatabase() {\n    return Promise.resolve().then(() => {\n      if (this.openDbPromise_) {\n        return this.openDbPromise_.then(db => {\n          db.close();\n          this.openDbPromise_ = null;\n        });\n      }\n    });\n  }\n\n  /**\n   * @protected\n   * @param {!IDBDatabase} db\n   */\n  onDBUpgrade(db) {\n    throw this.errorFactory_.create(Errors.codes.SHOULD_BE_INHERITED);\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\nimport { ErrorFactory } from '../../app/errors';\nimport Errors from './errors';\nvar DBInterface = (function () {\n    /**\n     * @param {string} dbName\n     * @param {number} dbVersion\n     */\n    function DBInterface(dbName, dbVersion) {\n        this.errorFactory_ = new ErrorFactory('messaging', 'Messaging', Errors.map);\n        this.dbName_ = dbName;\n        this.dbVersion_ = dbVersion;\n        this.openDbPromise_ = null;\n        this.TRANSACTION_READ_WRITE = 'readwrite';\n    }\n    /**\n     * Get the indexedDB as a promsie.\n     * @protected\n     * @return {!Promise<!IDBDatabase>} The IndexedDB database\n     */\n    DBInterface.prototype.openDatabase = function () {\n        var _this = this;\n        if (this.openDbPromise_) {\n            return this.openDbPromise_;\n        }\n        this.openDbPromise_ = new Promise(function (resolve, reject) {\n            var request = indexedDB.open(_this.dbName_, _this.dbVersion_);\n            request.onerror = function (event) {\n                reject(event.target.error);\n            };\n            request.onsuccess = function (event) {\n                resolve(event.target.result);\n            };\n            request.onupgradeneeded = function (event) {\n                var db = event.target.result;\n                _this.onDBUpgrade(db);\n            };\n        });\n        return this.openDbPromise_;\n    };\n    /**\n     * Close the currently open database.\n     * @return {!Promise} Returns the result of the promise chain.\n     */\n    DBInterface.prototype.closeDatabase = function () {\n        var _this = this;\n        return Promise.resolve().then(function () {\n            if (_this.openDbPromise_) {\n                return _this.openDbPromise_.then(function (db) {\n                    db.close();\n                    _this.openDbPromise_ = null;\n                });\n            }\n        });\n    };\n    /**\n     * @protected\n     * @param {!IDBDatabase} db\n     */\n    DBInterface.prototype.onDBUpgrade = function (db) {\n        throw this.errorFactory_.create(Errors.codes.SHOULD_BE_INHERITED);\n    };\n    return DBInterface;\n}());\nexport default DBInterface;\n\n\n"]}