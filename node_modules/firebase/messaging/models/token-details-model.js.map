{"version":3,"sources":["src/messaging/models/token-details-model.ts","messaging/models/token-details-model.js"],"names":["__extends","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","FCM_TOKEN_OBJ_STORE","DB_VERSION","ValidateInput","fcmToken","swScope","vapidKey","subscription","fcmSenderId","fcmPushSet","TokenDetailsModel","_super","call","dbName","defineProperty","get","enumerable","configurable","onDBUpgrade","db","objectStore","createObjectStore","keyPath","createIndex","unique","validateInputs_","input","length","Promise","reject","errorFactory_","codes","BAD_TOKEN","BAD_SCOPE","BAD_VAPID_KEY","PushSubscription","BAD_SUBSCRIPTION","BAD_SENDER_ID","BAD_PUSH_SET","resolve","getTokenDetailsFromToken","_this","then","openDatabase","transaction","index","request","onerror","event","target","error","onsuccess","result","getTokenDetailsFromSWScope","scopeRequest","saveTokenDetails","_a","details","endpoint","auth","p256dh","TRANSACTION_READ_WRITE","put","deleteToken","token","INVALID_DELETE_TOKEN","DELETE_TOKEN_NOT_FOUND","delete","FAILED_TO_DELETE_TOKEN"],"mappings":"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","file":"token-details-model.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\n\nimport DBInterface from './db-interface';\nimport Errors from './errors';\nimport arrayBufferToBase64 from '../helpers/array-buffer-to-base64';\n\nconst FCM_TOKEN_OBJ_STORE = 'fcm_token_object_Store';\nconst DB_VERSION = 1;\n\n/** @record */\nfunction ValidateInput() {}\n/** @type {string|undefined} */\nValidateInput.prototype.fcmToken;\n/** @type {string|undefined} */\nValidateInput.prototype.swScope;\n/** @type {string|undefined} */\nValidateInput.prototype.vapidKey;\n/** @type {PushSubscription|undefined} */\nValidateInput.prototype.subscription;\n/** @type {string|undefined} */\nValidateInput.prototype.fcmSenderId;\n/** @type {string|undefined} */\nValidateInput.prototype.fcmPushSet;\n\nexport default class TokenDetailsModel extends DBInterface {\n  constructor() {\n    super(TokenDetailsModel.dbName, DB_VERSION);\n  }\n\n  static get dbName() {\n    return 'fcm_token_details_db';\n  }\n\n  /**\n   * @override\n   */\n  onDBUpgrade(db) {\n    var objectStore = db.createObjectStore(FCM_TOKEN_OBJ_STORE, {\n      keyPath: 'swScope'\n    });\n\n    // Make sure the sender ID can be searched\n    objectStore.createIndex('fcmSenderId', 'fcmSenderId', {\n      unique: false\n    });\n\n    objectStore.createIndex('fcmToken', 'fcmToken', {\n      unique: true\n    });\n  }\n\n  /**\n   * This method takes an object and will check for known arguments and\n   * validate the input.\n   * @private\n   * @param {!ValidateInput} input\n   * @return {!Promise} Returns promise that resolves if input is valid,\n   * rejects otherwise.\n   */\n  validateInputs_(input) {\n    if (input.fcmToken) {\n      if (typeof input.fcmToken !== 'string' || input.fcmToken.length === 0) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_TOKEN)\n        );\n      }\n    }\n\n    if (input.swScope) {\n      if (typeof input.swScope !== 'string' || input.swScope.length === 0) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_SCOPE)\n        );\n      }\n    }\n\n    if (input.vapidKey) {\n      if (typeof input.vapidKey !== 'string' || input.vapidKey.length === 0) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_VAPID_KEY)\n        );\n      }\n    }\n\n    if (input.subscription) {\n      if (!(input.subscription instanceof PushSubscription)) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_SUBSCRIPTION)\n        );\n      }\n    }\n\n    if (input.fcmSenderId) {\n      if (\n        typeof input.fcmSenderId !== 'string' ||\n        input.fcmSenderId.length === 0\n      ) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_SENDER_ID)\n        );\n      }\n    }\n\n    if (input.fcmPushSet) {\n      if (\n        typeof input.fcmPushSet !== 'string' ||\n        input.fcmPushSet.length === 0\n      ) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_PUSH_SET)\n        );\n      }\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Given a token, this method will look up the details in indexedDB.\n   * @param {string} fcmToken\n   * @return {Promise<Object>} The details associated with that token.\n   */\n  getTokenDetailsFromToken(fcmToken) {\n    if (!fcmToken) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_TOKEN));\n    }\n\n    return this.validateInputs_({ fcmToken })\n      .then(() => {\n        return this.openDatabase();\n      })\n      .then(db => {\n        return new Promise((resolve, reject) => {\n          const transaction = db.transaction([FCM_TOKEN_OBJ_STORE]);\n          const objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n          const index = objectStore.index('fcmToken');\n          const request = index.get(fcmToken);\n          request.onerror = function(event) {\n            reject((<IDBRequest>event.target).error);\n          };\n          request.onsuccess = function(event) {\n            const result = (<IDBRequest>event.target).result\n              ? (<IDBRequest>event.target).result\n              : null;\n            resolve(result);\n          };\n        });\n      });\n  }\n\n  /**\n   * Given a service worker scope, this method will look up the details in\n   * indexedDB.\n   * @public\n   * @param {string} swScope\n   * @return {Promise<Object>} The details associated with that token.\n   */\n  getTokenDetailsFromSWScope(swScope) {\n    if (!swScope) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n    }\n\n    return this.validateInputs_({ swScope })\n      .then(() => {\n        return this.openDatabase();\n      })\n      .then(db => {\n        return new Promise((resolve, reject) => {\n          const transaction = db.transaction([FCM_TOKEN_OBJ_STORE]);\n          const objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n          const scopeRequest = objectStore.get(swScope);\n          scopeRequest.onerror = event => {\n            reject((<IDBRequest>event.target).error);\n          };\n\n          scopeRequest.onsuccess = event => {\n            const result = (<IDBRequest>event.target).result\n              ? (<IDBRequest>event.target).result\n              : null;\n            resolve(result);\n          };\n        });\n      });\n  }\n\n  /**\n   * Save the details for the fcm token for re-use at a later date.\n   * @param {{swScope: !string, vapidKey: !string,\n   * subscription: !PushSubscription, fcmSenderId: !string, fcmToken: !string,\n   * fcmPushSet: !string}} input A plain js object containing args to save.\n   * @return {Promise<void>}\n   */\n  saveTokenDetails({\n    swScope,\n    vapidKey,\n    subscription,\n    fcmSenderId,\n    fcmToken,\n    fcmPushSet\n  }) {\n    if (!swScope) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n    }\n\n    if (!vapidKey) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.BAD_VAPID_KEY)\n      );\n    }\n\n    if (!subscription) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.BAD_SUBSCRIPTION)\n      );\n    }\n\n    if (!fcmSenderId) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.BAD_SENDER_ID)\n      );\n    }\n\n    if (!fcmToken) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_TOKEN));\n    }\n\n    if (!fcmPushSet) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.BAD_PUSH_SET)\n      );\n    }\n\n    return this.validateInputs_({\n      swScope,\n      vapidKey,\n      subscription,\n      fcmSenderId,\n      fcmToken,\n      fcmPushSet\n    })\n      .then(() => {\n        return this.openDatabase();\n      })\n      .then(db => {\n        /**\n       * @dict\n       */\n        const details = {\n          swScope: swScope,\n          vapidKey: vapidKey,\n          endpoint: subscription.endpoint,\n          auth: arrayBufferToBase64(subscription['getKey']('auth')),\n          p256dh: arrayBufferToBase64(subscription['getKey']('p256dh')),\n          fcmSenderId: fcmSenderId,\n          fcmToken: fcmToken,\n          fcmPushSet: fcmPushSet\n        };\n\n        return new Promise((resolve, reject) => {\n          const transaction = db.transaction(\n            [FCM_TOKEN_OBJ_STORE],\n            this.TRANSACTION_READ_WRITE\n          );\n          const objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n          const request = objectStore.put(details);\n          request.onerror = event => {\n            reject((<IDBRequest>event.target).error);\n          };\n          request.onsuccess = event => {\n            resolve();\n          };\n        });\n      });\n  }\n\n  /**\n   * This method deletes details of the current FCM token.\n   * It's returning a promise in case we need to move to an async\n   * method for deleting at a later date.\n   * @param {string} token Token to be deleted\n   * @return {Promise<Object>} Resolves once the FCM token details have been\n   * deleted and returns the deleted details.\n   */\n  deleteToken(token) {\n    if (typeof token !== 'string' || token.length === 0) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.INVALID_DELETE_TOKEN)\n      );\n    }\n\n    return this.getTokenDetailsFromToken(token).then(details => {\n      if (!details) {\n        throw this.errorFactory_.create(Errors.codes.DELETE_TOKEN_NOT_FOUND);\n      }\n\n      return this.openDatabase().then(db => {\n        return new Promise((resolve, reject) => {\n          const transaction = db.transaction(\n            [FCM_TOKEN_OBJ_STORE],\n            this.TRANSACTION_READ_WRITE\n          );\n          const objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n          const request = objectStore.delete(details['swScope']);\n          request.onerror = event => {\n            reject((<IDBRequest>event.target).error);\n          };\n          request.onsuccess = event => {\n            if ((<IDBRequest>event.target).result === 0) {\n              reject(\n                this.errorFactory_.create(Errors.codes.FAILED_TO_DELETE_TOKEN)\n              );\n              return;\n            }\n\n            resolve(details);\n          };\n        });\n      });\n    });\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport DBInterface from './db-interface';\nimport Errors from './errors';\nimport arrayBufferToBase64 from '../helpers/array-buffer-to-base64';\nvar FCM_TOKEN_OBJ_STORE = 'fcm_token_object_Store';\nvar DB_VERSION = 1;\n/** @record */\nfunction ValidateInput() { }\n/** @type {string|undefined} */\nValidateInput.prototype.fcmToken;\n/** @type {string|undefined} */\nValidateInput.prototype.swScope;\n/** @type {string|undefined} */\nValidateInput.prototype.vapidKey;\n/** @type {PushSubscription|undefined} */\nValidateInput.prototype.subscription;\n/** @type {string|undefined} */\nValidateInput.prototype.fcmSenderId;\n/** @type {string|undefined} */\nValidateInput.prototype.fcmPushSet;\nvar TokenDetailsModel = (function (_super) {\n    __extends(TokenDetailsModel, _super);\n    function TokenDetailsModel() {\n        return _super.call(this, TokenDetailsModel.dbName, DB_VERSION) || this;\n    }\n    Object.defineProperty(TokenDetailsModel, \"dbName\", {\n        get: function () {\n            return 'fcm_token_details_db';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @override\n     */\n    TokenDetailsModel.prototype.onDBUpgrade = function (db) {\n        var objectStore = db.createObjectStore(FCM_TOKEN_OBJ_STORE, {\n            keyPath: 'swScope'\n        });\n        // Make sure the sender ID can be searched\n        objectStore.createIndex('fcmSenderId', 'fcmSenderId', {\n            unique: false\n        });\n        objectStore.createIndex('fcmToken', 'fcmToken', {\n            unique: true\n        });\n    };\n    /**\n     * This method takes an object and will check for known arguments and\n     * validate the input.\n     * @private\n     * @param {!ValidateInput} input\n     * @return {!Promise} Returns promise that resolves if input is valid,\n     * rejects otherwise.\n     */\n    TokenDetailsModel.prototype.validateInputs_ = function (input) {\n        if (input.fcmToken) {\n            if (typeof input.fcmToken !== 'string' || input.fcmToken.length === 0) {\n                return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_TOKEN));\n            }\n        }\n        if (input.swScope) {\n            if (typeof input.swScope !== 'string' || input.swScope.length === 0) {\n                return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n            }\n        }\n        if (input.vapidKey) {\n            if (typeof input.vapidKey !== 'string' || input.vapidKey.length === 0) {\n                return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_VAPID_KEY));\n            }\n        }\n        if (input.subscription) {\n            if (!(input.subscription instanceof PushSubscription)) {\n                return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SUBSCRIPTION));\n            }\n        }\n        if (input.fcmSenderId) {\n            if (typeof input.fcmSenderId !== 'string' ||\n                input.fcmSenderId.length === 0) {\n                return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SENDER_ID));\n            }\n        }\n        if (input.fcmPushSet) {\n            if (typeof input.fcmPushSet !== 'string' ||\n                input.fcmPushSet.length === 0) {\n                return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_PUSH_SET));\n            }\n        }\n        return Promise.resolve();\n    };\n    /**\n     * Given a token, this method will look up the details in indexedDB.\n     * @param {string} fcmToken\n     * @return {Promise<Object>} The details associated with that token.\n     */\n    TokenDetailsModel.prototype.getTokenDetailsFromToken = function (fcmToken) {\n        var _this = this;\n        if (!fcmToken) {\n            return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_TOKEN));\n        }\n        return this.validateInputs_({ fcmToken: fcmToken })\n            .then(function () {\n            return _this.openDatabase();\n        })\n            .then(function (db) {\n            return new Promise(function (resolve, reject) {\n                var transaction = db.transaction([FCM_TOKEN_OBJ_STORE]);\n                var objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n                var index = objectStore.index('fcmToken');\n                var request = index.get(fcmToken);\n                request.onerror = function (event) {\n                    reject(event.target.error);\n                };\n                request.onsuccess = function (event) {\n                    var result = event.target.result\n                        ? event.target.result\n                        : null;\n                    resolve(result);\n                };\n            });\n        });\n    };\n    /**\n     * Given a service worker scope, this method will look up the details in\n     * indexedDB.\n     * @public\n     * @param {string} swScope\n     * @return {Promise<Object>} The details associated with that token.\n     */\n    TokenDetailsModel.prototype.getTokenDetailsFromSWScope = function (swScope) {\n        var _this = this;\n        if (!swScope) {\n            return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n        }\n        return this.validateInputs_({ swScope: swScope })\n            .then(function () {\n            return _this.openDatabase();\n        })\n            .then(function (db) {\n            return new Promise(function (resolve, reject) {\n                var transaction = db.transaction([FCM_TOKEN_OBJ_STORE]);\n                var objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n                var scopeRequest = objectStore.get(swScope);\n                scopeRequest.onerror = function (event) {\n                    reject(event.target.error);\n                };\n                scopeRequest.onsuccess = function (event) {\n                    var result = event.target.result\n                        ? event.target.result\n                        : null;\n                    resolve(result);\n                };\n            });\n        });\n    };\n    /**\n     * Save the details for the fcm token for re-use at a later date.\n     * @param {{swScope: !string, vapidKey: !string,\n     * subscription: !PushSubscription, fcmSenderId: !string, fcmToken: !string,\n     * fcmPushSet: !string}} input A plain js object containing args to save.\n     * @return {Promise<void>}\n     */\n    TokenDetailsModel.prototype.saveTokenDetails = function (_a) {\n        var _this = this;\n        var swScope = _a.swScope, vapidKey = _a.vapidKey, subscription = _a.subscription, fcmSenderId = _a.fcmSenderId, fcmToken = _a.fcmToken, fcmPushSet = _a.fcmPushSet;\n        if (!swScope) {\n            return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n        }\n        if (!vapidKey) {\n            return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_VAPID_KEY));\n        }\n        if (!subscription) {\n            return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SUBSCRIPTION));\n        }\n        if (!fcmSenderId) {\n            return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SENDER_ID));\n        }\n        if (!fcmToken) {\n            return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_TOKEN));\n        }\n        if (!fcmPushSet) {\n            return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_PUSH_SET));\n        }\n        return this.validateInputs_({\n            swScope: swScope,\n            vapidKey: vapidKey,\n            subscription: subscription,\n            fcmSenderId: fcmSenderId,\n            fcmToken: fcmToken,\n            fcmPushSet: fcmPushSet\n        })\n            .then(function () {\n            return _this.openDatabase();\n        })\n            .then(function (db) {\n            /**\n           * @dict\n           */\n            var details = {\n                swScope: swScope,\n                vapidKey: vapidKey,\n                endpoint: subscription.endpoint,\n                auth: arrayBufferToBase64(subscription['getKey']('auth')),\n                p256dh: arrayBufferToBase64(subscription['getKey']('p256dh')),\n                fcmSenderId: fcmSenderId,\n                fcmToken: fcmToken,\n                fcmPushSet: fcmPushSet\n            };\n            return new Promise(function (resolve, reject) {\n                var transaction = db.transaction([FCM_TOKEN_OBJ_STORE], _this.TRANSACTION_READ_WRITE);\n                var objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n                var request = objectStore.put(details);\n                request.onerror = function (event) {\n                    reject(event.target.error);\n                };\n                request.onsuccess = function (event) {\n                    resolve();\n                };\n            });\n        });\n    };\n    /**\n     * This method deletes details of the current FCM token.\n     * It's returning a promise in case we need to move to an async\n     * method for deleting at a later date.\n     * @param {string} token Token to be deleted\n     * @return {Promise<Object>} Resolves once the FCM token details have been\n     * deleted and returns the deleted details.\n     */\n    TokenDetailsModel.prototype.deleteToken = function (token) {\n        var _this = this;\n        if (typeof token !== 'string' || token.length === 0) {\n            return Promise.reject(this.errorFactory_.create(Errors.codes.INVALID_DELETE_TOKEN));\n        }\n        return this.getTokenDetailsFromToken(token).then(function (details) {\n            if (!details) {\n                throw _this.errorFactory_.create(Errors.codes.DELETE_TOKEN_NOT_FOUND);\n            }\n            return _this.openDatabase().then(function (db) {\n                return new Promise(function (resolve, reject) {\n                    var transaction = db.transaction([FCM_TOKEN_OBJ_STORE], _this.TRANSACTION_READ_WRITE);\n                    var objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n                    var request = objectStore.delete(details['swScope']);\n                    request.onerror = function (event) {\n                        reject(event.target.error);\n                    };\n                    request.onsuccess = function (event) {\n                        if (event.target.result === 0) {\n                            reject(_this.errorFactory_.create(Errors.codes.FAILED_TO_DELETE_TOKEN));\n                            return;\n                        }\n                        resolve(details);\n                    };\n                });\n            });\n        });\n    };\n    return TokenDetailsModel;\n}(DBInterface));\nexport default TokenDetailsModel;\n\n\n"]}