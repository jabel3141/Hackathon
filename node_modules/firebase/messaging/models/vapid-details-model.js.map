{"version":3,"sources":["src/messaging/models/vapid-details-model.ts","messaging/models/vapid-details-model.js"],"names":["__extends","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","FCM_VAPID_OBJ_STORE","DB_VERSION","VapidDetailsModel","_super","call","dbName","defineProperty","get","enumerable","configurable","onDBUpgrade","db","createObjectStore","keyPath","getVapidFromSWScope","swScope","length","Promise","reject","errorFactory_","codes","BAD_SCOPE","openDatabase","then","resolve","transaction","objectStore","scopeRequest","onerror","event","target","error","onsuccess","result","vapidKey","saveVapidDetails","_this","BAD_VAPID_KEY","details","TRANSACTION_READ_WRITE","request","put","deleteVapidDetails","DELETE_SCOPE_NOT_FOUND","delete","FAILED_DELETE_VAPID_KEY"],"mappings":"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","file":"vapid-details-model.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\n\nimport DBInterface from './db-interface';\nimport Errors from './errors';\n\nconst FCM_VAPID_OBJ_STORE = 'fcm_vapid_object_Store';\nconst DB_VERSION = 1;\n\nexport default class VapidDetailsModel extends DBInterface {\n  constructor() {\n    super(VapidDetailsModel.dbName, DB_VERSION);\n  }\n\n  static get dbName() {\n    return 'fcm_vapid_details_db';\n  }\n\n  /**\n   * @override\n   * @param {IDBDatabase} db\n   */\n  onDBUpgrade(db) {\n    db.createObjectStore(FCM_VAPID_OBJ_STORE, {\n      keyPath: 'swScope'\n    });\n  }\n\n  /**\n   * Given a service worker scope, this method will look up the vapid key\n   * in indexedDB.\n   * @param {string} swScope\n   * @return {Promise<string>} The vapid key associated with that scope.\n   */\n  getVapidFromSWScope(swScope) {\n    if (typeof swScope !== 'string' || swScope.length === 0) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n    }\n\n    return this.openDatabase().then(db => {\n      return new Promise((resolve, reject) => {\n        const transaction = db.transaction([FCM_VAPID_OBJ_STORE]);\n        const objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);\n        const scopeRequest = objectStore.get(swScope);\n        scopeRequest.onerror = event => {\n          reject((<IDBRequest>event.target).error);\n        };\n\n        scopeRequest.onsuccess = event => {\n          let result = (<IDBRequest>event.target).result;\n          let vapidKey = null;\n          if (result) {\n            vapidKey = result.vapidKey;\n          }\n          resolve(vapidKey);\n        };\n      });\n    });\n  }\n\n  /**\n   * Save a vapid key against a swScope for later date.\n   * @param  {string} swScope The service worker scope to be associated with\n   * this push subscription.\n   * @param {string} vapidKey The public vapid key to be associated with\n   * the swScope.\n   * @return {Promise<void>}\n   */\n  saveVapidDetails(swScope, vapidKey) {\n    if (typeof swScope !== 'string' || swScope.length === 0) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.BAD_VAPID_KEY)\n      );\n    }\n\n    const details = {\n      swScope: swScope,\n      vapidKey: vapidKey\n    };\n\n    return this.openDatabase().then(db => {\n      return new Promise((resolve, reject) => {\n        const transaction = db.transaction(\n          [FCM_VAPID_OBJ_STORE],\n          this.TRANSACTION_READ_WRITE\n        );\n        const objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);\n        const request = objectStore.put(details);\n        request.onerror = event => {\n          reject((<IDBRequest>event.target).error);\n        };\n        request.onsuccess = event => {\n          resolve();\n        };\n      });\n    });\n  }\n\n  /**\n   * This method deletes details of the current FCM VAPID key for a SW scope.\n   * @param {string} swScope Scope to be deleted\n   * @return {Promise<string>} Resolves once the scope / vapid details have been\n   * deleted and returns the deleted vapid key.\n   */\n  deleteVapidDetails(swScope) {\n    return this.getVapidFromSWScope(swScope).then(vapidKey => {\n      if (!vapidKey) {\n        throw this.errorFactory_.create(Errors.codes.DELETE_SCOPE_NOT_FOUND);\n      }\n\n      return this.openDatabase().then(db => {\n        return new Promise((resolve, reject) => {\n          const transaction = db.transaction(\n            [FCM_VAPID_OBJ_STORE],\n            this.TRANSACTION_READ_WRITE\n          );\n          const objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);\n          const request = objectStore.delete(swScope);\n          request.onerror = event => {\n            reject((<IDBRequest>event.target).error);\n          };\n          request.onsuccess = event => {\n            if ((<IDBRequest>event.target).result === 0) {\n              reject(\n                this.errorFactory_.create(Errors.codes.FAILED_DELETE_VAPID_KEY)\n              );\n              return;\n            }\n\n            resolve(vapidKey);\n          };\n        });\n      });\n    });\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport DBInterface from './db-interface';\nimport Errors from './errors';\nvar FCM_VAPID_OBJ_STORE = 'fcm_vapid_object_Store';\nvar DB_VERSION = 1;\nvar VapidDetailsModel = (function (_super) {\n    __extends(VapidDetailsModel, _super);\n    function VapidDetailsModel() {\n        return _super.call(this, VapidDetailsModel.dbName, DB_VERSION) || this;\n    }\n    Object.defineProperty(VapidDetailsModel, \"dbName\", {\n        get: function () {\n            return 'fcm_vapid_details_db';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @override\n     * @param {IDBDatabase} db\n     */\n    VapidDetailsModel.prototype.onDBUpgrade = function (db) {\n        db.createObjectStore(FCM_VAPID_OBJ_STORE, {\n            keyPath: 'swScope'\n        });\n    };\n    /**\n     * Given a service worker scope, this method will look up the vapid key\n     * in indexedDB.\n     * @param {string} swScope\n     * @return {Promise<string>} The vapid key associated with that scope.\n     */\n    VapidDetailsModel.prototype.getVapidFromSWScope = function (swScope) {\n        if (typeof swScope !== 'string' || swScope.length === 0) {\n            return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n        }\n        return this.openDatabase().then(function (db) {\n            return new Promise(function (resolve, reject) {\n                var transaction = db.transaction([FCM_VAPID_OBJ_STORE]);\n                var objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);\n                var scopeRequest = objectStore.get(swScope);\n                scopeRequest.onerror = function (event) {\n                    reject(event.target.error);\n                };\n                scopeRequest.onsuccess = function (event) {\n                    var result = event.target.result;\n                    var vapidKey = null;\n                    if (result) {\n                        vapidKey = result.vapidKey;\n                    }\n                    resolve(vapidKey);\n                };\n            });\n        });\n    };\n    /**\n     * Save a vapid key against a swScope for later date.\n     * @param  {string} swScope The service worker scope to be associated with\n     * this push subscription.\n     * @param {string} vapidKey The public vapid key to be associated with\n     * the swScope.\n     * @return {Promise<void>}\n     */\n    VapidDetailsModel.prototype.saveVapidDetails = function (swScope, vapidKey) {\n        var _this = this;\n        if (typeof swScope !== 'string' || swScope.length === 0) {\n            return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n        }\n        if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n            return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_VAPID_KEY));\n        }\n        var details = {\n            swScope: swScope,\n            vapidKey: vapidKey\n        };\n        return this.openDatabase().then(function (db) {\n            return new Promise(function (resolve, reject) {\n                var transaction = db.transaction([FCM_VAPID_OBJ_STORE], _this.TRANSACTION_READ_WRITE);\n                var objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);\n                var request = objectStore.put(details);\n                request.onerror = function (event) {\n                    reject(event.target.error);\n                };\n                request.onsuccess = function (event) {\n                    resolve();\n                };\n            });\n        });\n    };\n    /**\n     * This method deletes details of the current FCM VAPID key for a SW scope.\n     * @param {string} swScope Scope to be deleted\n     * @return {Promise<string>} Resolves once the scope / vapid details have been\n     * deleted and returns the deleted vapid key.\n     */\n    VapidDetailsModel.prototype.deleteVapidDetails = function (swScope) {\n        var _this = this;\n        return this.getVapidFromSWScope(swScope).then(function (vapidKey) {\n            if (!vapidKey) {\n                throw _this.errorFactory_.create(Errors.codes.DELETE_SCOPE_NOT_FOUND);\n            }\n            return _this.openDatabase().then(function (db) {\n                return new Promise(function (resolve, reject) {\n                    var transaction = db.transaction([FCM_VAPID_OBJ_STORE], _this.TRANSACTION_READ_WRITE);\n                    var objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);\n                    var request = objectStore.delete(swScope);\n                    request.onerror = function (event) {\n                        reject(event.target.error);\n                    };\n                    request.onsuccess = function (event) {\n                        if (event.target.result === 0) {\n                            reject(_this.errorFactory_.create(Errors.codes.FAILED_DELETE_VAPID_KEY));\n                            return;\n                        }\n                        resolve(vapidKey);\n                    };\n                });\n            });\n        });\n    };\n    return VapidDetailsModel;\n}(DBInterface));\nexport default VapidDetailsModel;\n\n\n"]}