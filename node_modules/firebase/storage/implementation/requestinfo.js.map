{"version":3,"sources":["src/storage/implementation/requestinfo.ts","storage/implementation/requestinfo.js"],"names":["RequestInfo","url","method","handler","timeout","urlParams","headers","body","errorHandler","progressCallback","successCodes","additionalRetryCodes"],"mappings":";;;;;AAoBA,IAAAA,cAAA,YAAA;AAiBE,aAAAA,WAAA,CACSC,GADT,EAESC,MAFT;AAGE;;;;;;;AAOOC,WAVT,EAWSC,OAXT,EAWwB;AAVf,aAAAH,GAAA,GAAAA,GAAA;AACA,aAAAC,MAAA,GAAAA,MAAA;AAQA,aAAAC,OAAA,GAAAA,OAAA;AACA,aAAAC,OAAA,GAAAA,OAAA;AA3BT,aAAAC,SAAA,GAAuB,EAAvB;AACA,aAAAC,OAAA,GAAmB,EAAnB;AACA,aAAAC,IAAA,GAA0C,IAA1C;AAEA,aAAAC,YAAA,GAEW,IAFX;AAIA;;;;AAIA,aAAAC,gBAAA,GAA8D,IAA9D;AACA,aAAAC,YAAA,GAAyB,CAAC,GAAD,CAAzB;AACA,aAAAC,oBAAA,GAAiC,EAAjC;AAcI;AACN,WAAAX,WAAA;AA9BA,CAAA,EAAA;QCQSA,W,GAAAA,W","file":"requestinfo.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { FirebaseStorageError } from './error';\nimport { Headers, XhrIo } from './xhrio';\n\nexport type UrlParams = { [name: string]: string };\n\nexport class RequestInfo<T> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n\n  errorHandler:\n    | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n       * Returns the value with which to resolve the request's promise. Only called\n       * if the request is successful. Throw from this function to reject the\n       * returned Request's promise with the thrown error.\n       * Note: The XhrIo passed to this function may be reused after this callback\n       * returns. Do not keep a reference to it in any way.\n       */\n    public handler: (p1: XhrIo, p2: string) => T,\n    public timeout: number\n  ) {}\n}\n","var RequestInfo = (function () {\n    function RequestInfo(url, method, \n        /**\n           * Returns the value with which to resolve the request's promise. Only called\n           * if the request is successful. Throw from this function to reject the\n           * returned Request's promise with the thrown error.\n           * Note: The XhrIo passed to this function may be reused after this callback\n           * returns. Do not keep a reference to it in any way.\n           */\n        handler, timeout) {\n        this.url = url;\n        this.method = method;\n        this.handler = handler;\n        this.timeout = timeout;\n        this.urlParams = {};\n        this.headers = {};\n        this.body = null;\n        this.errorHandler = null;\n        /**\n         * Called with the current number of bytes uploaded and total size (-1 if not\n         * computable) of the request body (i.e. used to report upload progress).\n         */\n        this.progressCallback = null;\n        this.successCodes = [200];\n        this.additionalRetryCodes = [];\n    }\n    return RequestInfo;\n}());\nexport { RequestInfo };\n\n\n"]}