{"version":3,"sources":["src/storage/implementation/location.ts","storage/implementation/location.js"],"names":["errorsExports","Location","bucket","path","path_","Object","defineProperty","prototype","get","enumerable","configurable","fullServerUrl","encode","encodeURIComponent","bucketOnlyServerUrl","makeFromBucketSpec","bucketString","bucketLocation","makeFromUrl","e","invalidDefaultBucket","url","location","bucketDomain","gsModify","loc","charAt","length","slice","gsPath","gsRegex","RegExp","gsIndices","httpModify","decodeURIComponent","version","httpRegex","httpIndices","groups","regex","indices","postModify","i","group","captures","exec","bucketValue","pathValue","invalidUrl"],"mappings":"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","file":"location.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\nimport * as errorsExports from './error';\nimport { errors } from './error';\n\n/**\n * @struct\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  fullServerUrl(): string {\n    let encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    let encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw errorsExports.invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string): Location {\n    let location = null;\n    let bucketDomain = '([A-Za-z0-9.\\\\-]+)';\n\n    function gsModify(loc: Location) {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    let gsPath = '(/(.*))?$';\n    let path = '(/([^?#]*).*)?$';\n    let gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    let gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location) {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    let version = 'v[A-Za-z0-9_]+';\n    let httpRegex = new RegExp(\n      '^https?://firebasestorage\\\\.googleapis\\\\.com/' +\n        version +\n        '/b/' +\n        bucketDomain +\n        '/o' +\n        path,\n      'i'\n    );\n    let httpIndices = { bucket: 1, path: 3 };\n    let groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      { regex: httpRegex, indices: httpIndices, postModify: httpModify }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      let group = groups[i];\n      let captures = group.regex.exec(url);\n      if (captures) {\n        let bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw errorsExports.invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\nimport * as errorsExports from './error';\n/**\n * @struct\n */\nvar Location = (function () {\n    function Location(bucket, path) {\n        this.bucket = bucket;\n        this.path_ = path;\n    }\n    Object.defineProperty(Location.prototype, \"path\", {\n        get: function () {\n            return this.path_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Location.prototype.fullServerUrl = function () {\n        var encode = encodeURIComponent;\n        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n    };\n    Location.prototype.bucketOnlyServerUrl = function () {\n        var encode = encodeURIComponent;\n        return '/b/' + encode(this.bucket) + '/o';\n    };\n    Location.makeFromBucketSpec = function (bucketString) {\n        var bucketLocation;\n        try {\n            bucketLocation = Location.makeFromUrl(bucketString);\n        }\n        catch (e) {\n            // Not valid URL, use as-is. This lets you put bare bucket names in\n            // config.\n            return new Location(bucketString, '');\n        }\n        if (bucketLocation.path === '') {\n            return bucketLocation;\n        }\n        else {\n            throw errorsExports.invalidDefaultBucket(bucketString);\n        }\n    };\n    Location.makeFromUrl = function (url) {\n        var location = null;\n        var bucketDomain = '([A-Za-z0-9.\\\\-]+)';\n        function gsModify(loc) {\n            if (loc.path.charAt(loc.path.length - 1) === '/') {\n                loc.path_ = loc.path_.slice(0, -1);\n            }\n        }\n        var gsPath = '(/(.*))?$';\n        var path = '(/([^?#]*).*)?$';\n        var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n        var gsIndices = { bucket: 1, path: 3 };\n        function httpModify(loc) {\n            loc.path_ = decodeURIComponent(loc.path);\n        }\n        var version = 'v[A-Za-z0-9_]+';\n        var httpRegex = new RegExp('^https?://firebasestorage\\\\.googleapis\\\\.com/' +\n            version +\n            '/b/' +\n            bucketDomain +\n            '/o' +\n            path, 'i');\n        var httpIndices = { bucket: 1, path: 3 };\n        var groups = [\n            { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n            { regex: httpRegex, indices: httpIndices, postModify: httpModify }\n        ];\n        for (var i = 0; i < groups.length; i++) {\n            var group = groups[i];\n            var captures = group.regex.exec(url);\n            if (captures) {\n                var bucketValue = captures[group.indices.bucket];\n                var pathValue = captures[group.indices.path];\n                if (!pathValue) {\n                    pathValue = '';\n                }\n                location = new Location(bucketValue, pathValue);\n                group.postModify(location);\n                break;\n            }\n        }\n        if (location == null) {\n            throw errorsExports.invalidUrl(url);\n        }\n        return location;\n    };\n    return Location;\n}());\nexport { Location };\n\n\n"]}