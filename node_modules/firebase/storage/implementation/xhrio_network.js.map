{"version":3,"sources":["src/storage/implementation/xhrio_network.ts","storage/implementation/xhrio_network.js"],"names":["errorsExports","object","promiseimpl","type","XhrIoExports","NetworkXhrIo","_this","sent_","xhr_","XMLHttpRequest","errorCode_","ErrorCode","NO_ERROR","sendPromise_","make","resolve","reject","addEventListener","event","ABORT","NETWORK_ERROR","prototype","send","url","method","opt_body","opt_headers","internalError","open","isDef","headers","forEach","key","val","setRequestHeader","toString","getErrorCode","getStatus","status","e","getResponseText","responseText","abort","getResponseHeader","header","addUploadProgressListener","listener","upload","removeUploadProgressListener","removeEventListener"],"mappings":"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","file":"xhrio_network.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport * as errorsExports from './error';\nimport * as object from './object';\nimport * as promiseimpl from './promise_external';\nimport * as type from './type';\nimport * as XhrIoExports from './xhrio';\nimport { Headers, XhrIo } from './xhrio';\n\n/**\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\n * doesn't work in React Native on Android.\n */\nexport class NetworkXhrIo implements XhrIo {\n  private xhr_: XMLHttpRequest;\n  private errorCode_: XhrIoExports.ErrorCode;\n  private sendPromise_: Promise<XhrIo>;\n  private sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = XhrIoExports.ErrorCode.NO_ERROR;\n    this.sendPromise_ = promiseimpl.make((resolve, reject) => {\n      this.xhr_.addEventListener('abort', event => {\n        this.errorCode_ = XhrIoExports.ErrorCode.ABORT;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('error', event => {\n        this.errorCode_ = XhrIoExports.ErrorCode.NETWORK_ERROR;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('load', event => {\n        resolve(this);\n      });\n    });\n  }\n\n  /**\n   * @override\n   */\n  send(\n    url: string,\n    method: string,\n    opt_body?: ArrayBufferView | Blob | string | null,\n    opt_headers?: Headers\n  ): Promise<XhrIo> {\n    if (this.sent_) {\n      throw errorsExports.internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (type.isDef(opt_headers)) {\n      const headers = opt_headers as Headers;\n      object.forEach(headers, (key, val) => {\n        this.xhr_.setRequestHeader(key, val.toString());\n      });\n    }\n    if (type.isDef(opt_body)) {\n      this.xhr_.send(opt_body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  /**\n   * @override\n   */\n  getErrorCode(): XhrIoExports.ErrorCode {\n    if (!this.sent_) {\n      throw errorsExports.internalError(\n        'cannot .getErrorCode() before sending'\n      );\n    }\n    return this.errorCode_;\n  }\n\n  /**\n   * @override\n   */\n  getStatus(): number {\n    if (!this.sent_) {\n      throw errorsExports.internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  getResponseText(): string {\n    if (!this.sent_) {\n      throw errorsExports.internalError(\n        'cannot .getResponseText() before sending'\n      );\n    }\n    return this.xhr_.responseText;\n  }\n\n  /**\n   * Aborts the request.\n   * @override\n   */\n  abort() {\n    this.xhr_.abort();\n  }\n\n  /**\n   * @override\n   */\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  /**\n   * @override\n   */\n  addUploadProgressListener(listener: (p1: Event) => void) {\n    if (type.isDef(this.xhr_.upload)) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  /**\n   * @override\n   */\n  removeUploadProgressListener(listener: (p1: Event) => void) {\n    if (type.isDef(this.xhr_.upload)) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport * as errorsExports from './error';\nimport * as object from './object';\nimport * as promiseimpl from './promise_external';\nimport * as type from './type';\nimport * as XhrIoExports from './xhrio';\n/**\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\n * doesn't work in React Native on Android.\n */\nvar NetworkXhrIo = (function () {\n    function NetworkXhrIo() {\n        var _this = this;\n        this.sent_ = false;\n        this.xhr_ = new XMLHttpRequest();\n        this.errorCode_ = XhrIoExports.ErrorCode.NO_ERROR;\n        this.sendPromise_ = promiseimpl.make(function (resolve, reject) {\n            _this.xhr_.addEventListener('abort', function (event) {\n                _this.errorCode_ = XhrIoExports.ErrorCode.ABORT;\n                resolve(_this);\n            });\n            _this.xhr_.addEventListener('error', function (event) {\n                _this.errorCode_ = XhrIoExports.ErrorCode.NETWORK_ERROR;\n                resolve(_this);\n            });\n            _this.xhr_.addEventListener('load', function (event) {\n                resolve(_this);\n            });\n        });\n    }\n    /**\n     * @override\n     */\n    NetworkXhrIo.prototype.send = function (url, method, opt_body, opt_headers) {\n        var _this = this;\n        if (this.sent_) {\n            throw errorsExports.internalError('cannot .send() more than once');\n        }\n        this.sent_ = true;\n        this.xhr_.open(method, url, true);\n        if (type.isDef(opt_headers)) {\n            var headers = opt_headers;\n            object.forEach(headers, function (key, val) {\n                _this.xhr_.setRequestHeader(key, val.toString());\n            });\n        }\n        if (type.isDef(opt_body)) {\n            this.xhr_.send(opt_body);\n        }\n        else {\n            this.xhr_.send();\n        }\n        return this.sendPromise_;\n    };\n    /**\n     * @override\n     */\n    NetworkXhrIo.prototype.getErrorCode = function () {\n        if (!this.sent_) {\n            throw errorsExports.internalError('cannot .getErrorCode() before sending');\n        }\n        return this.errorCode_;\n    };\n    /**\n     * @override\n     */\n    NetworkXhrIo.prototype.getStatus = function () {\n        if (!this.sent_) {\n            throw errorsExports.internalError('cannot .getStatus() before sending');\n        }\n        try {\n            return this.xhr_.status;\n        }\n        catch (e) {\n            return -1;\n        }\n    };\n    /**\n     * @override\n     */\n    NetworkXhrIo.prototype.getResponseText = function () {\n        if (!this.sent_) {\n            throw errorsExports.internalError('cannot .getResponseText() before sending');\n        }\n        return this.xhr_.responseText;\n    };\n    /**\n     * Aborts the request.\n     * @override\n     */\n    NetworkXhrIo.prototype.abort = function () {\n        this.xhr_.abort();\n    };\n    /**\n     * @override\n     */\n    NetworkXhrIo.prototype.getResponseHeader = function (header) {\n        return this.xhr_.getResponseHeader(header);\n    };\n    /**\n     * @override\n     */\n    NetworkXhrIo.prototype.addUploadProgressListener = function (listener) {\n        if (type.isDef(this.xhr_.upload)) {\n            this.xhr_.upload.addEventListener('progress', listener);\n        }\n    };\n    /**\n     * @override\n     */\n    NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) {\n        if (type.isDef(this.xhr_.upload)) {\n            this.xhr_.upload.removeEventListener('progress', listener);\n        }\n    };\n    return NetworkXhrIo;\n}());\nexport { NetworkXhrIo };\n\n\n"]}