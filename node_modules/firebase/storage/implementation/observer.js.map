{"version":3,"sources":["src/storage/implementation/observer.ts","storage/implementation/observer.js"],"names":["type","Observer","nextOrObserver","opt_error","opt_complete","asFunctions","isFunction","isDef","next","error","complete","observer"],"mappings":";;;;;;;AAeA;;IAAYA,I;;;;AAeZ;;;AAGA,IAAAC,WAAA,YAAA;AAKE,aAAAA,QAAA,CACEC,cADF,EAEEC,SAFF,EAGEC,YAHF,EAGkC;AAEhC,YAAIC,cACFL,KAAKM,UAAL,CAAgBJ,cAAhB,KACAF,KAAKO,KAAL,CAAWJ,SAAX,CADA,IAEAH,KAAKO,KAAL,CAAWH,YAAX,CAHF;AAIA,YAAIC,WAAJ,EAAiB;AACf,iBAAKG,IAAL,GAAYN,cAAZ;AACA,iBAAKO,KAAL,GAAaN,aAAa,IAA1B;AACA,iBAAKO,QAAL,GAAgBN,gBAAgB,IAAhC;AACD,SAJD,MAIO;AACL,gBAAMO,WAAWT,cAAjB;AAKA,iBAAKM,IAAL,GAAYG,SAASH,IAAT,IAAiB,IAA7B;AACA,iBAAKC,KAAL,GAAaE,SAASF,KAAT,IAAkB,IAA/B;AACA,iBAAKC,QAAL,GAAgBC,SAASD,QAAT,IAAqB,IAArC;AACD;AACF;AACH,WAAAT,QAAA;AA7BA,CAAA,EAAA,C,CAjCA;;;;;;;;;;;;;;;QCsCSA,Q,GAAAA,Q","file":"observer.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport * as type from './type';\n\ntype NextFn<T> = (value: T) => void;\ntype ErrorFn = (error: Error) => void;\ntype CompleteFn = () => void;\ntype Unsubscribe = () => void;\n\ntype Subscribe<T> = (\n  next: NextFn<T> | { [name: string]: string | null },\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport { NextFn, ErrorFn, CompleteFn, Unsubscribe, Subscribe };\n\n/**\n * @struct\n */\nexport class Observer<T> {\n  next: NextFn<T> | null;\n  error: ErrorFn | null;\n  complete: CompleteFn | null;\n\n  constructor(\n    nextOrObserver: NextFn<T> | { [name: string]: string | null } | null,\n    opt_error?: ErrorFn | null,\n    opt_complete?: CompleteFn | null\n  ) {\n    let asFunctions =\n      type.isFunction(nextOrObserver) ||\n      type.isDef(opt_error) ||\n      type.isDef(opt_complete);\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T> | null;\n      this.error = opt_error || null;\n      this.complete = opt_complete || null;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T> | null;\n        error?: ErrorFn | null;\n        complete?: CompleteFn | null;\n      };\n      this.next = observer.next || null;\n      this.error = observer.error || null;\n      this.complete = observer.complete || null;\n    }\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport * as type from './type';\n/**\n * @struct\n */\nvar Observer = (function () {\n    function Observer(nextOrObserver, opt_error, opt_complete) {\n        var asFunctions = type.isFunction(nextOrObserver) ||\n            type.isDef(opt_error) ||\n            type.isDef(opt_complete);\n        if (asFunctions) {\n            this.next = nextOrObserver;\n            this.error = opt_error || null;\n            this.complete = opt_complete || null;\n        }\n        else {\n            var observer = nextOrObserver;\n            this.next = observer.next || null;\n            this.error = observer.error || null;\n            this.complete = observer.complete || null;\n        }\n    }\n    return Observer;\n}());\nexport { Observer };\n\n\n"]}