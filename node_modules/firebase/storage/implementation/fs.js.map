{"version":3,"sources":["src/storage/implementation/fs.ts","storage/implementation/fs.js"],"names":["getBlob","sliceBlob","type","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","undefined","var_args","_i","arguments","length","bb","i","append","isNativeBlobDefined","Blob","Error","blob","start","end","webkitSlice","mozSlice","slice"],"mappings":";;;;;QA2CMA,O,GAAAA,O;QA0BAC,S,GAAAA,S;;AAhDN;;IAAYC,I;;;;AAMZ,SAAAC,cAAA,GAAA;AACE,QAAI,OAAOC,WAAP,KAAuB,WAA3B,EAAwC;AACtC,eAAOA,WAAP;AACD,KAFD,MAEO,IAAI,OAAOC,iBAAP,KAA6B,WAAjC,EAA8C;AACnD,eAAOA,iBAAP;AACD,KAFM,MAEA;AACL,eAAOC,SAAP;AACD;AACF;AAED;;;;;;AAMM,SAAAN,OAAA,GAAA;AAAkB,QAAAO,WAAA,EAAA;ACvBpB,SDuBoB,IAAAC,KAAA,CCvBpB,EDuBoBA,KAAAC,UAAAC,MCvBpB,EDuBoBF,ICvBpB,EDuBgE;AAA5CD,iBAAAC,EAAA,IAAAC,UAAAD,EAAA,CAAA;ACrBnB;ADsBH,QAAIJ,cAAcD,gBAAlB;AACA,QAAIC,gBAAgBE,SAApB,EAA+B;AAC7B,YAAIK,KAAK,IAAIP,WAAJ,EAAT;AACA,aAAK,IAAIQ,IAAI,CAAb,EAAgBA,IAAIL,SAASG,MAA7B,EAAqCE,GAArC,EAA0C;AACxCD,eAAGE,MAAH,CAAUN,SAASK,CAAT,CAAV;AACD;AACD,eAAOD,GAAGX,OAAH,EAAP;AACD,KAND,MAMO;AACL,YAAIE,KAAKY,mBAAL,EAAJ,EAAgC;AAC9B,mBAAO,IAAIC,IAAJ,CAASR,QAAT,CAAP;AACD,SAFD,MAEO;AACL,kBAAMS,MAAM,qDAAN,CAAN;AACD;AACF;AACF;AAED;;;;;;;;;AASM,SAAAf,SAAA,CAAoBgB,IAApB,EAAgCC,KAAhC,EAA+CC,GAA/C,EAA0D;AAC9D,QAAKF,KAAaG,WAAlB,EAA+B;AAC7B,eAAQH,KAAaG,WAAb,CAAyBF,KAAzB,EAAgCC,GAAhC,CAAR;AACD,KAFD,MAEO,IAAKF,KAAaI,QAAlB,EAA4B;AACjC,eAAQJ,KAAaI,QAAb,CAAsBH,KAAtB,EAA6BC,GAA7B,CAAR;AACD,KAFM,MAEA,IAAIF,KAAKK,KAAT,EAAgB;AACrB,eAAOL,KAAKK,KAAL,CAAWJ,KAAX,EAAkBC,GAAlB,CAAP;AACD;AACD,WAAO,IAAP;AACD","file":"fs.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport * as array from './array';\nimport * as type from './type';\n\ndeclare var IBlobBuilder;\ndeclare var BlobBuilder;\ndeclare var WebKitBlobBuilder;\n\nfunction getBlobBuilder(): (typeof IBlobBuilder) | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param var_args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...var_args: (string | Blob | ArrayBuffer)[]): Blob {\n  let BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    let bb = new BlobBuilder();\n    for (let i = 0; i < var_args.length; i++) {\n      bb.append(var_args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (type.isNativeBlobDefined()) {\n      return new Blob(var_args);\n    } else {\n      throw Error(\"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if ((blob as any).webkitSlice) {\n    return (blob as any).webkitSlice(start, end);\n  } else if ((blob as any).mozSlice) {\n    return (blob as any).mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","import * as type from './type';\nfunction getBlobBuilder() {\n    if (typeof BlobBuilder !== 'undefined') {\n        return BlobBuilder;\n    }\n    else if (typeof WebKitBlobBuilder !== 'undefined') {\n        return WebKitBlobBuilder;\n    }\n    else {\n        return undefined;\n    }\n}\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param var_args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob() {\n    var var_args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        var_args[_i] = arguments[_i];\n    }\n    var BlobBuilder = getBlobBuilder();\n    if (BlobBuilder !== undefined) {\n        var bb = new BlobBuilder();\n        for (var i = 0; i < var_args.length; i++) {\n            bb.append(var_args[i]);\n        }\n        return bb.getBlob();\n    }\n    else {\n        if (type.isNativeBlobDefined()) {\n            return new Blob(var_args);\n        }\n        else {\n            throw Error(\"This browser doesn't seem to support creating Blobs\");\n        }\n    }\n}\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob, start, end) {\n    if (blob.webkitSlice) {\n        return blob.webkitSlice(start, end);\n    }\n    else if (blob.mozSlice) {\n        return blob.mozSlice(start, end);\n    }\n    else if (blob.slice) {\n        return blob.slice(start, end);\n    }\n    return null;\n}\n\n\n"]}