{"version":3,"sources":["src/storage/implementation/requestmap.ts","storage/implementation/requestmap.js"],"names":["object","constants","RequestMap","map_","id_","minSafeInteger","prototype","addRequest","r","id","self","unmap","getPromise","then","clear","forEach","key","val","cancel"],"mappings":";;;;;;;AAeA;;IAAYA,M;;AAGZ;;IAAYC,S;;;;AAEZ;;;AApBA;;;;;;;;;;;;;;;AAuBA,IAAAC,aAAA,YAAA;AAIE,aAAAA,UAAA,GAAA;AAHQ,aAAAC,IAAA,GAAwC,EAAxC;AAIN,aAAKC,GAAL,GAAWH,UAAUI,cAArB;AACD;AAED;;;;;AAKAH,eAAAI,SAAA,CAAAC,UAAA,GAAA,UAAWC,CAAX,EAA0B;AACxB,YAAIC,KAAK,KAAKL,GAAd;AACA,aAAKA,GAAL;AACA,aAAKD,IAAL,CAAUM,EAAV,IAAgBD,CAAhB;AACA,YAAIE,OAAO,IAAX;AAEA,iBAAAC,KAAA,GAAA;AACE,mBAAOD,KAAKP,IAAL,CAAUM,EAAV,CAAP;AACD;AACDD,UAAEI,UAAF,GAAeC,IAAf,CAAoBF,KAApB,EAA2BA,KAA3B;AACD,KAVD;AAYA;;;AAGAT,eAAAI,SAAA,CAAAQ,KAAA,GAAA,YAAA;AACEd,eAAOe,OAAP,CAAe,KAAKZ,IAApB,EAA0B,UAACa,GAAD,EAAcC,GAAd,EAA+B;AACvD,gBAAIA,GAAJ,EAAS;AACPA,oBAAIC,MAAJ,CAAW,IAAX;AACD;AACF,SAJD;AAKA,aAAKf,IAAL,GAAY,EAAZ;AACD,KAPD;AAQF,WAAAD,UAAA;AApCA,CAAA,EAAA;QC8BSA,U,GAAAA,U","file":"requestmap.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport * as object from './object';\nimport * as RequestExports from './request';\nimport { Request } from './request';\nimport * as constants from './constants';\n\n/**\n * @struct\n */\nexport class RequestMap {\n  private map_: { [key: number]: Request<any> } = {};\n  private id_: number;\n\n  constructor() {\n    this.id_ = constants.minSafeInteger;\n  }\n\n  /**\n   * Registers the given request with this map.\n   * The request is unregistered when it completes.\n   * @param r The request to register.\n   */\n  addRequest(r: Request<any>) {\n    let id = this.id_;\n    this.id_++;\n    this.map_[id] = r;\n    let self = this;\n\n    function unmap() {\n      delete self.map_[id];\n    }\n    r.getPromise().then(unmap, unmap);\n  }\n\n  /**\n   * Cancels all registered requests.\n   */\n  clear() {\n    object.forEach(this.map_, (key: string, val: Request<any>) => {\n      if (val) {\n        val.cancel(true);\n      }\n    });\n    this.map_ = {};\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport * as object from './object';\nimport * as constants from './constants';\n/**\n * @struct\n */\nvar RequestMap = (function () {\n    function RequestMap() {\n        this.map_ = {};\n        this.id_ = constants.minSafeInteger;\n    }\n    /**\n     * Registers the given request with this map.\n     * The request is unregistered when it completes.\n     * @param r The request to register.\n     */\n    RequestMap.prototype.addRequest = function (r) {\n        var id = this.id_;\n        this.id_++;\n        this.map_[id] = r;\n        var self = this;\n        function unmap() {\n            delete self.map_[id];\n        }\n        r.getPromise().then(unmap, unmap);\n    };\n    /**\n     * Cancels all registered requests.\n     */\n    RequestMap.prototype.clear = function () {\n        object.forEach(this.map_, function (key, val) {\n            if (val) {\n                val.cancel(true);\n            }\n        });\n        this.map_ = {};\n    };\n    return RequestMap;\n}());\nexport { RequestMap };\n\n\n"]}