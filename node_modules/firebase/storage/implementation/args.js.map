{"version":3,"sources":["src/storage/implementation/args.ts","storage/implementation/args.js"],"names":["validate","and_","stringSpec","uploadDataSpec","metadataSpec","nonNegativeNumberSpec","looseObjectSpec","nullFunctionSpec","errorsExports","MetadataUtils","type","name","specs","passed","minArgs","length","maxArgs","i","optional","validLength","invalidArgumentCount","validator","e","Error","invalidArgument","message","ArgSpec","opt_optional","self","p","isJustDef","v1","v2","opt_validator","stringValidator","isString","valid","Uint8Array","ArrayBuffer","isNativeBlobDefined","Blob","metadataValidator","isNumber","isLooseObject","isDef","Object","undefined","isFunction"],"mappings":"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","file":"args.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport * as errorsExports from './error';\nimport { errors } from './error';\nimport * as MetadataUtils from './metadata';\nimport * as type from './type';\n\n/**\n * @param name Name of the function.\n * @param specs Argument specs.\n * @param passed The actual arguments passed to the function.\n * @throws {fbs.Error} If the arguments are invalid.\n */\nexport function validate(name: string, specs: ArgSpec[], passed: IArguments) {\n  let minArgs = specs.length;\n  let maxArgs = specs.length;\n  for (let i = 0; i < specs.length; i++) {\n    if (specs[i].optional) {\n      minArgs = i;\n      break;\n    }\n  }\n  let validLength = minArgs <= passed.length && passed.length <= maxArgs;\n  if (!validLength) {\n    throw errorsExports.invalidArgumentCount(\n      minArgs,\n      maxArgs,\n      name,\n      passed.length\n    );\n  }\n  for (let i = 0; i < passed.length; i++) {\n    try {\n      specs[i].validator(passed[i]);\n    } catch (e) {\n      if (e instanceof Error) {\n        throw errorsExports.invalidArgument(i, name, e.message);\n      } else {\n        throw errorsExports.invalidArgument(i, name, e);\n      }\n    }\n  }\n}\n\n/**\n * @struct\n */\nexport class ArgSpec {\n  validator: (p1: any) => void;\n  optional: boolean;\n\n  constructor(validator: (p1: any) => void, opt_optional?: boolean) {\n    let self = this;\n    this.validator = function(p: any) {\n      if (self.optional && !type.isJustDef(p)) {\n        return;\n      }\n      validator(p);\n    };\n    this.optional = !!opt_optional;\n  }\n}\n\nexport function and_(v1: (p1: any) => void, v2: Function): (p1: any) => void {\n  return function(p) {\n    v1(p);\n    v2(p);\n  };\n}\n\nexport function stringSpec(\n  opt_validator?: (p1: any) => void | null,\n  opt_optional?: boolean\n): ArgSpec {\n  function stringValidator(p: any) {\n    if (!type.isString(p)) {\n      throw 'Expected string.';\n    }\n  }\n  let validator;\n  if (opt_validator) {\n    validator = and_(stringValidator, opt_validator);\n  } else {\n    validator = stringValidator;\n  }\n  return new ArgSpec(validator, opt_optional);\n}\n\nexport function uploadDataSpec(): ArgSpec {\n  function validator(p: any) {\n    let valid =\n      p instanceof Uint8Array ||\n      p instanceof ArrayBuffer ||\n      (type.isNativeBlobDefined() && p instanceof Blob);\n    if (!valid) {\n      throw 'Expected Blob or File.';\n    }\n  }\n  return new ArgSpec(validator);\n}\n\nexport function metadataSpec(opt_optional?: boolean): ArgSpec {\n  return new ArgSpec(MetadataUtils.metadataValidator, opt_optional);\n}\n\nexport function nonNegativeNumberSpec(): ArgSpec {\n  function validator(p: any) {\n    let valid = type.isNumber(p) && p >= 0;\n    if (!valid) {\n      throw 'Expected a number 0 or greater.';\n    }\n  }\n  return new ArgSpec(validator);\n}\n\nexport function looseObjectSpec(\n  opt_validator?: ((p1: any) => void) | null,\n  opt_optional?: boolean\n): ArgSpec {\n  function validator(p: any) {\n    let isLooseObject = p === null || (type.isDef(p) && p instanceof Object);\n    if (!isLooseObject) {\n      throw 'Expected an Object.';\n    }\n    if (opt_validator !== undefined && opt_validator !== null) {\n      opt_validator(p);\n    }\n  }\n  return new ArgSpec(validator, opt_optional);\n}\n\nexport function nullFunctionSpec(opt_optional?: boolean): ArgSpec {\n  function validator(p: any) {\n    let valid = p === null || type.isFunction(p);\n    if (!valid) {\n      throw 'Expected a Function.';\n    }\n  }\n  return new ArgSpec(validator, opt_optional);\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport * as errorsExports from './error';\nimport * as MetadataUtils from './metadata';\nimport * as type from './type';\n/**\n * @param name Name of the function.\n * @param specs Argument specs.\n * @param passed The actual arguments passed to the function.\n * @throws {fbs.Error} If the arguments are invalid.\n */\nexport function validate(name, specs, passed) {\n    var minArgs = specs.length;\n    var maxArgs = specs.length;\n    for (var i = 0; i < specs.length; i++) {\n        if (specs[i].optional) {\n            minArgs = i;\n            break;\n        }\n    }\n    var validLength = minArgs <= passed.length && passed.length <= maxArgs;\n    if (!validLength) {\n        throw errorsExports.invalidArgumentCount(minArgs, maxArgs, name, passed.length);\n    }\n    for (var i = 0; i < passed.length; i++) {\n        try {\n            specs[i].validator(passed[i]);\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                throw errorsExports.invalidArgument(i, name, e.message);\n            }\n            else {\n                throw errorsExports.invalidArgument(i, name, e);\n            }\n        }\n    }\n}\n/**\n * @struct\n */\nvar ArgSpec = (function () {\n    function ArgSpec(validator, opt_optional) {\n        var self = this;\n        this.validator = function (p) {\n            if (self.optional && !type.isJustDef(p)) {\n                return;\n            }\n            validator(p);\n        };\n        this.optional = !!opt_optional;\n    }\n    return ArgSpec;\n}());\nexport { ArgSpec };\nexport function and_(v1, v2) {\n    return function (p) {\n        v1(p);\n        v2(p);\n    };\n}\nexport function stringSpec(opt_validator, opt_optional) {\n    function stringValidator(p) {\n        if (!type.isString(p)) {\n            throw 'Expected string.';\n        }\n    }\n    var validator;\n    if (opt_validator) {\n        validator = and_(stringValidator, opt_validator);\n    }\n    else {\n        validator = stringValidator;\n    }\n    return new ArgSpec(validator, opt_optional);\n}\nexport function uploadDataSpec() {\n    function validator(p) {\n        var valid = p instanceof Uint8Array ||\n            p instanceof ArrayBuffer ||\n            (type.isNativeBlobDefined() && p instanceof Blob);\n        if (!valid) {\n            throw 'Expected Blob or File.';\n        }\n    }\n    return new ArgSpec(validator);\n}\nexport function metadataSpec(opt_optional) {\n    return new ArgSpec(MetadataUtils.metadataValidator, opt_optional);\n}\nexport function nonNegativeNumberSpec() {\n    function validator(p) {\n        var valid = type.isNumber(p) && p >= 0;\n        if (!valid) {\n            throw 'Expected a number 0 or greater.';\n        }\n    }\n    return new ArgSpec(validator);\n}\nexport function looseObjectSpec(opt_validator, opt_optional) {\n    function validator(p) {\n        var isLooseObject = p === null || (type.isDef(p) && p instanceof Object);\n        if (!isLooseObject) {\n            throw 'Expected an Object.';\n        }\n        if (opt_validator !== undefined && opt_validator !== null) {\n            opt_validator(p);\n        }\n    }\n    return new ArgSpec(validator, opt_optional);\n}\nexport function nullFunctionSpec(opt_optional) {\n    function validator(p) {\n        var valid = p === null || type.isFunction(p);\n        if (!valid) {\n            throw 'Expected a Function.';\n        }\n    }\n    return new ArgSpec(validator, opt_optional);\n}\n\n\n"]}