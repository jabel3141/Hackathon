{"version":3,"sources":["../src/storage/reference.ts","storage/reference.js"],"names":["args","errorsExports","metadata","object","path","requests","fbsString","type","Reference","authWrapper","location","makeFromUrl","prototype","toString","validate","arguments","bucket","newRef","mappings","getMappings","child","childPath","stringSpec","newPath","Object","defineProperty","get","parent","enumerable","configurable","lastComponent","service","put","data","uploadDataSpec","metadataSpec","throwIfRoot_","putString","string","format","opt_metadata","RAW","formatValidator","dataFromString","clone","isDef","contentType","delete","self","getAuthToken","then","authToken","requestInfo","deleteObject","makeRequest","getPromise","getMetadata","updateMetadata","getDownloadURL","url","noDownloadURL","name","invalidRootOperation"],"mappings":"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","file":"reference.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * @fileoverview Defines the Firebase Storage Reference class.\n */\nimport * as args from './implementation/args';\nimport { AuthWrapper } from './implementation/authwrapper';\nimport { FbsBlob } from './implementation/blob';\nimport * as errorsExports from './implementation/error';\nimport { errors } from './implementation/error';\nimport { Location } from './implementation/location';\nimport * as metadata from './implementation/metadata';\nimport * as object from './implementation/object';\nimport * as path from './implementation/path';\nimport * as requests from './implementation/requests';\nimport * as fbsString from './implementation/string';\nimport { StringFormat } from './implementation/string';\nimport * as type from './implementation/type';\nimport { Metadata } from './metadata';\nimport { Service } from './service';\nimport { UploadTask } from './task';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @param location An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  protected location: Location;\n\n  constructor(protected authWrapper: AuthWrapper, location: string | Location) {\n    if (location instanceof Location) {\n      this.location = location;\n    } else {\n      this.location = Location.makeFromUrl(location);\n    }\n  }\n\n  /**\n   * @return The URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    args.validate('toString', [], arguments);\n    return 'gs://' + this.location.bucket + '/' + this.location.path;\n  }\n\n  protected newRef(authWrapper: AuthWrapper, location: Location): Reference {\n    return new Reference(authWrapper, location);\n  }\n\n  protected mappings(): metadata.Mappings {\n    return metadata.getMappings();\n  }\n\n  /**\n   * @return A reference to the object obtained by\n   *     appending childPath, removing any duplicate, beginning, or trailing\n   *     slashes.\n   */\n  child(childPath: string): Reference {\n    args.validate('child', [args.stringSpec()], arguments);\n    let newPath = path.child(this.location.path, childPath);\n    let location = new Location(this.location.bucket, newPath);\n    return this.newRef(this.authWrapper, location);\n  }\n\n  /**\n   * @return A reference to the parent of the\n   *     current object, or null if the current object is the root.\n   */\n  get parent(): Reference | null {\n    let newPath = path.parent(this.location.path);\n    if (newPath === null) {\n      return null;\n    }\n    let location = new Location(this.location.bucket, newPath);\n    return this.newRef(this.authWrapper, location);\n  }\n\n  /**\n   * @return An reference to the root of this\n   *     object's bucket.\n   */\n  get root(): Reference {\n    let location = new Location(this.location.bucket, '');\n    return this.newRef(this.authWrapper, location);\n  }\n\n  get bucket(): string {\n    return this.location.bucket;\n  }\n\n  get fullPath(): string {\n    return this.location.path;\n  }\n\n  get name(): string {\n    return path.lastComponent(this.location.path);\n  }\n\n  get storage(): Service {\n    return this.authWrapper.service();\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data The blob to upload.\n   * @return An UploadTask that lets you control and\n   *     observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata: Metadata | null = null\n  ): UploadTask {\n    args.validate(\n      'put',\n      [args.uploadDataSpec(), args.metadataSpec(true)],\n      arguments\n    );\n    this.throwIfRoot_('put');\n    return new UploadTask(\n      this,\n      this.authWrapper,\n      this.location,\n      this.mappings(),\n      new FbsBlob(data),\n      metadata\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param string The string to upload.\n   * @param opt_format The format of the string to upload.\n   * @return An UploadTask that lets you control and\n   *     observe the upload.\n   */\n  putString(\n    string: string,\n    format: StringFormat = StringFormat.RAW,\n    opt_metadata?: Metadata\n  ): UploadTask {\n    args.validate(\n      'putString',\n      [\n        args.stringSpec(),\n        args.stringSpec(fbsString.formatValidator, true),\n        args.metadataSpec(true)\n      ],\n      arguments\n    );\n    this.throwIfRoot_('putString');\n    let data = fbsString.dataFromString(format, string);\n    let metadata = object.clone<Metadata>(opt_metadata);\n    if (!type.isDef(metadata['contentType']) && type.isDef(data.contentType)) {\n      metadata['contentType'] = data.contentType;\n    }\n    return new UploadTask(\n      this,\n      this.authWrapper,\n      this.location,\n      this.mappings(),\n      new FbsBlob(data.data, true),\n      metadata\n    );\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @return A promise that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    args.validate('delete', [], arguments);\n    this.throwIfRoot_('delete');\n    let self = this;\n    return this.authWrapper.getAuthToken().then(function(authToken) {\n      let requestInfo = requests.deleteObject(self.authWrapper, self.location);\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  }\n\n  /**\n   *     A promise that resolves with the metadata for this object. If this\n   *     object doesn't exist or metadata cannot be retreived, the promise is\n   *     rejected.\n   */\n  getMetadata(): Promise<Metadata> {\n    args.validate('getMetadata', [], arguments);\n    this.throwIfRoot_('getMetadata');\n    let self = this;\n    return this.authWrapper.getAuthToken().then(function(authToken) {\n      let requestInfo = requests.getMetadata(\n        self.authWrapper,\n        self.location,\n        self.mappings()\n      );\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata The new metadata for the object.\n   *     Only values that have been explicitly set will be changed. Explicitly\n   *     setting a value to null will remove the metadata.\n   * @return A promise that resolves\n   *     with the new metadata for this object.\n   *     @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(metadata: Metadata): Promise<Metadata> {\n    args.validate('updateMetadata', [args.metadataSpec()], arguments);\n    this.throwIfRoot_('updateMetadata');\n    let self = this;\n    return this.authWrapper.getAuthToken().then(function(authToken) {\n      let requestInfo = requests.updateMetadata(\n        self.authWrapper,\n        self.location,\n        metadata,\n        self.mappings()\n      );\n      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n    });\n  }\n\n  /**\n   * @return A promise that resolves with the download\n   *     URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    args.validate('getDownloadURL', [], arguments);\n    this.throwIfRoot_('getDownloadURL');\n    return this.getMetadata().then(function(metadata) {\n      let url = (metadata['downloadURLs'] as string[])[0];\n      if (type.isDef(url)) {\n        return url;\n      } else {\n        throw errorsExports.noDownloadURL();\n      }\n    });\n  }\n\n  private throwIfRoot_(name: string) {\n    if (this.location.path === '') {\n      throw errorsExports.invalidRootOperation(name);\n    }\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n/**\n * @fileoverview Defines the Firebase Storage Reference class.\n */\nimport * as args from './implementation/args';\nimport { FbsBlob } from './implementation/blob';\nimport * as errorsExports from './implementation/error';\nimport { Location } from './implementation/location';\nimport * as metadata from './implementation/metadata';\nimport * as object from './implementation/object';\nimport * as path from './implementation/path';\nimport * as requests from './implementation/requests';\nimport * as fbsString from './implementation/string';\nimport { StringFormat } from './implementation/string';\nimport * as type from './implementation/type';\nimport { UploadTask } from './task';\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @param location An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nvar Reference = (function () {\n    function Reference(authWrapper, location) {\n        this.authWrapper = authWrapper;\n        if (location instanceof Location) {\n            this.location = location;\n        }\n        else {\n            this.location = Location.makeFromUrl(location);\n        }\n    }\n    /**\n     * @return The URL for the bucket and path this object references,\n     *     in the form gs://<bucket>/<object-path>\n     * @override\n     */\n    Reference.prototype.toString = function () {\n        args.validate('toString', [], arguments);\n        return 'gs://' + this.location.bucket + '/' + this.location.path;\n    };\n    Reference.prototype.newRef = function (authWrapper, location) {\n        return new Reference(authWrapper, location);\n    };\n    Reference.prototype.mappings = function () {\n        return metadata.getMappings();\n    };\n    /**\n     * @return A reference to the object obtained by\n     *     appending childPath, removing any duplicate, beginning, or trailing\n     *     slashes.\n     */\n    Reference.prototype.child = function (childPath) {\n        args.validate('child', [args.stringSpec()], arguments);\n        var newPath = path.child(this.location.path, childPath);\n        var location = new Location(this.location.bucket, newPath);\n        return this.newRef(this.authWrapper, location);\n    };\n    Object.defineProperty(Reference.prototype, \"parent\", {\n        /**\n         * @return A reference to the parent of the\n         *     current object, or null if the current object is the root.\n         */\n        get: function () {\n            var newPath = path.parent(this.location.path);\n            if (newPath === null) {\n                return null;\n            }\n            var location = new Location(this.location.bucket, newPath);\n            return this.newRef(this.authWrapper, location);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Reference.prototype, \"root\", {\n        /**\n         * @return An reference to the root of this\n         *     object's bucket.\n         */\n        get: function () {\n            var location = new Location(this.location.bucket, '');\n            return this.newRef(this.authWrapper, location);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Reference.prototype, \"bucket\", {\n        get: function () {\n            return this.location.bucket;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Reference.prototype, \"fullPath\", {\n        get: function () {\n            return this.location.path;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Reference.prototype, \"name\", {\n        get: function () {\n            return path.lastComponent(this.location.path);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Reference.prototype, \"storage\", {\n        get: function () {\n            return this.authWrapper.service();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Uploads a blob to this object's location.\n     * @param data The blob to upload.\n     * @return An UploadTask that lets you control and\n     *     observe the upload.\n     */\n    Reference.prototype.put = function (data, metadata) {\n        if (metadata === void 0) { metadata = null; }\n        args.validate('put', [args.uploadDataSpec(), args.metadataSpec(true)], arguments);\n        this.throwIfRoot_('put');\n        return new UploadTask(this, this.authWrapper, this.location, this.mappings(), new FbsBlob(data), metadata);\n    };\n    /**\n     * Uploads a string to this object's location.\n     * @param string The string to upload.\n     * @param opt_format The format of the string to upload.\n     * @return An UploadTask that lets you control and\n     *     observe the upload.\n     */\n    Reference.prototype.putString = function (string, format, opt_metadata) {\n        if (format === void 0) { format = StringFormat.RAW; }\n        args.validate('putString', [\n            args.stringSpec(),\n            args.stringSpec(fbsString.formatValidator, true),\n            args.metadataSpec(true)\n        ], arguments);\n        this.throwIfRoot_('putString');\n        var data = fbsString.dataFromString(format, string);\n        var metadata = object.clone(opt_metadata);\n        if (!type.isDef(metadata['contentType']) && type.isDef(data.contentType)) {\n            metadata['contentType'] = data.contentType;\n        }\n        return new UploadTask(this, this.authWrapper, this.location, this.mappings(), new FbsBlob(data.data, true), metadata);\n    };\n    /**\n     * Deletes the object at this location.\n     * @return A promise that resolves if the deletion succeeds.\n     */\n    Reference.prototype.delete = function () {\n        args.validate('delete', [], arguments);\n        this.throwIfRoot_('delete');\n        var self = this;\n        return this.authWrapper.getAuthToken().then(function (authToken) {\n            var requestInfo = requests.deleteObject(self.authWrapper, self.location);\n            return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n        });\n    };\n    /**\n     *     A promise that resolves with the metadata for this object. If this\n     *     object doesn't exist or metadata cannot be retreived, the promise is\n     *     rejected.\n     */\n    Reference.prototype.getMetadata = function () {\n        args.validate('getMetadata', [], arguments);\n        this.throwIfRoot_('getMetadata');\n        var self = this;\n        return this.authWrapper.getAuthToken().then(function (authToken) {\n            var requestInfo = requests.getMetadata(self.authWrapper, self.location, self.mappings());\n            return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n        });\n    };\n    /**\n     * Updates the metadata for this object.\n     * @param metadata The new metadata for the object.\n     *     Only values that have been explicitly set will be changed. Explicitly\n     *     setting a value to null will remove the metadata.\n     * @return A promise that resolves\n     *     with the new metadata for this object.\n     *     @see firebaseStorage.Reference.prototype.getMetadata\n     */\n    Reference.prototype.updateMetadata = function (metadata) {\n        args.validate('updateMetadata', [args.metadataSpec()], arguments);\n        this.throwIfRoot_('updateMetadata');\n        var self = this;\n        return this.authWrapper.getAuthToken().then(function (authToken) {\n            var requestInfo = requests.updateMetadata(self.authWrapper, self.location, metadata, self.mappings());\n            return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\n        });\n    };\n    /**\n     * @return A promise that resolves with the download\n     *     URL for this object.\n     */\n    Reference.prototype.getDownloadURL = function () {\n        args.validate('getDownloadURL', [], arguments);\n        this.throwIfRoot_('getDownloadURL');\n        return this.getMetadata().then(function (metadata) {\n            var url = metadata['downloadURLs'][0];\n            if (type.isDef(url)) {\n                return url;\n            }\n            else {\n                throw errorsExports.noDownloadURL();\n            }\n        });\n    };\n    Reference.prototype.throwIfRoot_ = function (name) {\n        if (this.location.path === '') {\n            throw errorsExports.invalidRootOperation(name);\n        }\n    };\n    return Reference;\n}());\nexport { Reference };\n\n\n"]}