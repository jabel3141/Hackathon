{"version":3,"sources":["src/database/api/Database.ts","database/api/Database.js"],"names":["Database","repo_","root_","Empty","INTERNAL","DatabaseInternals","Object","defineProperty","prototype","get","app","enumerable","configurable","ref","pathString","checkDeleted_","arguments","length","undefined","child","refFromURL","url","apiName","parsedURL","repoInfo","host","repoInfo_","path","toString","goOffline","interrupt","goOnline","resume","ServerValue","TIMESTAMP","database","delete","getInstance","deleteRepo","resolve"],"mappings":"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","file":"Database.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fatal } from '../core/util/util';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { Path } from '../core/util/Path';\nimport { PromiseImpl } from '../../utils/promise';\nimport { Reference } from './Reference';\nimport { Repo } from '../core/Repo';\nimport { RepoManager } from '../core/RepoManager';\nimport { validateArgCount } from '../../utils/validation';\nimport { validateUrl } from '../core/util/validation';\nimport { FirebaseApp, FirebaseService } from '../../app/firebase_app';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Class representing a firebase database.\n * @implements {FirebaseService}\n */\nexport class Database implements FirebaseService {\n  INTERNAL: DatabaseInternals;\n  private root_: Reference;\n\n  static readonly ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    }\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   * @param {!Repo} repo_\n   */\n  constructor(private repo_: Repo) {\n    if (!(repo_ instanceof Repo)) {\n      fatal(\n        \"Don't call new Database() directly - please use firebase.database().\"\n      );\n    }\n\n    /** @type {Reference} */\n    this.root_ = new Reference(repo_, Path.Empty);\n\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  get app(): FirebaseApp {\n    return this.repo_.app;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in opt_pathString.\n   * @param {string=} pathString\n   * @return {!Reference} Firebase reference.\n   */\n  ref(pathString?: string): Reference {\n    this.checkDeleted_('ref');\n    validateArgCount('database.ref', 0, 1, arguments.length);\n\n    return pathString !== undefined ? this.root_.child(pathString) : this.root_;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @param {string} url\n   * @return {!Reference} Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    /** @const {string} */\n    const apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const parsedURL = parseRepoInfo(url);\n    validateUrl(apiName, 1, parsedURL);\n\n    const repoInfo = parsedURL.repoInfo;\n    if (repoInfo.host !== ((this.repo_ as any).repoInfo_ as RepoInfo).host) {\n      fatal(\n        apiName +\n          ': Host name does not match the current database: ' +\n          '(found ' +\n          repoInfo.host +\n          ' but expected ' +\n          ((this.repo_ as any).repoInfo_ as RepoInfo).host +\n          ')'\n      );\n    }\n\n    return this.ref(parsedURL.path.toString());\n  }\n\n  /**\n   * @param {string} apiName\n   */\n  private checkDeleted_(apiName: string) {\n    if (this.repo_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n\n  // Make individual repo go offline.\n  goOffline() {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  }\n\n  goOnline() {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  }\n}\n\nexport class DatabaseInternals {\n  /** @param {!Database} database */\n  constructor(public database: Database) {}\n\n  /** @return {Promise<void>} */\n  delete(): Promise<void> {\n    (this.database as any).checkDeleted_('delete');\n    RepoManager.getInstance().deleteRepo((this.database as any).repo_ as Repo);\n\n    (this.database as any).repo_ = null;\n    (this.database as any).root_ = null;\n    this.database.INTERNAL = null;\n    this.database = null;\n    return PromiseImpl.resolve();\n  }\n}\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { fatal } from '../core/util/util';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { Path } from '../core/util/Path';\nimport { PromiseImpl } from '../../utils/promise';\nimport { Reference } from './Reference';\nimport { Repo } from '../core/Repo';\nimport { RepoManager } from '../core/RepoManager';\nimport { validateArgCount } from '../../utils/validation';\nimport { validateUrl } from '../core/util/validation';\n/**\n * Class representing a firebase database.\n * @implements {FirebaseService}\n */\nvar Database = (function () {\n    /**\n     * The constructor should not be called by users of our public API.\n     * @param {!Repo} repo_\n     */\n    function Database(repo_) {\n        this.repo_ = repo_;\n        if (!(repo_ instanceof Repo)) {\n            fatal(\"Don't call new Database() directly - please use firebase.database().\");\n        }\n        /** @type {Reference} */\n        this.root_ = new Reference(repo_, Path.Empty);\n        this.INTERNAL = new DatabaseInternals(this);\n    }\n    Object.defineProperty(Database.prototype, \"app\", {\n        get: function () {\n            return this.repo_.app;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns a reference to the root or the path specified in opt_pathString.\n     * @param {string=} pathString\n     * @return {!Reference} Firebase reference.\n     */\n    Database.prototype.ref = function (pathString) {\n        this.checkDeleted_('ref');\n        validateArgCount('database.ref', 0, 1, arguments.length);\n        return pathString !== undefined ? this.root_.child(pathString) : this.root_;\n    };\n    /**\n     * Returns a reference to the root or the path specified in url.\n     * We throw a exception if the url is not in the same domain as the\n     * current repo.\n     * @param {string} url\n     * @return {!Reference} Firebase reference.\n     */\n    Database.prototype.refFromURL = function (url) {\n        /** @const {string} */\n        var apiName = 'database.refFromURL';\n        this.checkDeleted_(apiName);\n        validateArgCount(apiName, 1, 1, arguments.length);\n        var parsedURL = parseRepoInfo(url);\n        validateUrl(apiName, 1, parsedURL);\n        var repoInfo = parsedURL.repoInfo;\n        if (repoInfo.host !== this.repo_.repoInfo_.host) {\n            fatal(apiName +\n                ': Host name does not match the current database: ' +\n                '(found ' +\n                repoInfo.host +\n                ' but expected ' +\n                this.repo_.repoInfo_.host +\n                ')');\n        }\n        return this.ref(parsedURL.path.toString());\n    };\n    /**\n     * @param {string} apiName\n     */\n    Database.prototype.checkDeleted_ = function (apiName) {\n        if (this.repo_ === null) {\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\n        }\n    };\n    // Make individual repo go offline.\n    Database.prototype.goOffline = function () {\n        validateArgCount('database.goOffline', 0, 0, arguments.length);\n        this.checkDeleted_('goOffline');\n        this.repo_.interrupt();\n    };\n    Database.prototype.goOnline = function () {\n        validateArgCount('database.goOnline', 0, 0, arguments.length);\n        this.checkDeleted_('goOnline');\n        this.repo_.resume();\n    };\n    Database.ServerValue = {\n        TIMESTAMP: {\n            '.sv': 'timestamp'\n        }\n    };\n    return Database;\n}());\nexport { Database };\nvar DatabaseInternals = (function () {\n    /** @param {!Database} database */\n    function DatabaseInternals(database) {\n        this.database = database;\n    }\n    /** @return {Promise<void>} */\n    DatabaseInternals.prototype.delete = function () {\n        this.database.checkDeleted_('delete');\n        RepoManager.getInstance().deleteRepo(this.database.repo_);\n        this.database.repo_ = null;\n        this.database.root_ = null;\n        this.database.INTERNAL = null;\n        this.database = null;\n        return PromiseImpl.resolve();\n    };\n    return DatabaseInternals;\n}());\nexport { DatabaseInternals };\n\n\n"]}