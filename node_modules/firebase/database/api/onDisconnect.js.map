{"version":3,"sources":["src/database/api/onDisconnect.ts","database/api/onDisconnect.js"],"names":["OnDisconnect","repo_","path_","prototype","cancel","onComplete","arguments","length","deferred","onDisconnectCancel","wrapCallback","promise","remove","onDisconnectSet","set","value","setWithPriority","priority","onDisconnectSetWithPriority","update","objectToMerge","Array","isArray","newObjectToMerge","i","onDisconnectUpdate"],"mappings":"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","file":"onDisconnect.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { validateArgCount, validateCallback } from '../../utils/validation';\nimport {\n  validateWritablePath,\n  validateFirebaseDataArg,\n  validatePriority,\n  validateFirebaseMergeDataArg\n} from '../core/util/validation';\nimport { warn } from '../core/util/util';\nimport { Deferred } from '../../utils/promise';\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\n\n/**\n * @constructor\n */\nexport class OnDisconnect {\n  /**\n   * @param {!Repo} repo_\n   * @param {!Path} path_\n   */\n  constructor(private repo_: Repo, private path_: Path) {}\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  cancel(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    const deferred = new Deferred();\n    this.repo_.onDisconnectCancel(\n      this.path_,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    const deferred = new Deferred();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  set(value: any, onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    validateCallback('OnDisconnect.set', 2, onComplete, true);\n    const deferred = new Deferred();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      value,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {number|string|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  setWithPriority(\n    value: any,\n    priority: number | string | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      1,\n      value,\n      this.path_,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo_.onDisconnectSetWithPriority(\n      this.path_,\n      value,\n      priority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  update(\n    objectToMerge: object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: any } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n          'existing data, or an Object with integer keys if you really do want to only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      1,\n      objectToMerge,\n      this.path_,\n      false\n    );\n    validateCallback('OnDisconnect.update', 2, onComplete, true);\n    const deferred = new Deferred();\n    this.repo_.onDisconnectUpdate(\n      this.path_,\n      objectToMerge,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { validateArgCount, validateCallback } from '../../utils/validation';\nimport { validateWritablePath, validateFirebaseDataArg, validatePriority, validateFirebaseMergeDataArg } from '../core/util/validation';\nimport { warn } from '../core/util/util';\nimport { Deferred } from '../../utils/promise';\n/**\n * @constructor\n */\nvar OnDisconnect = (function () {\n    /**\n     * @param {!Repo} repo_\n     * @param {!Path} path_\n     */\n    function OnDisconnect(repo_, path_) {\n        this.repo_ = repo_;\n        this.path_ = path_;\n    }\n    /**\n     * @param {function(?Error)=} onComplete\n     * @return {!firebase.Promise}\n     */\n    OnDisconnect.prototype.cancel = function (onComplete) {\n        validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n        validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n        var deferred = new Deferred();\n        this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\n     * @param {function(?Error)=} onComplete\n     * @return {!firebase.Promise}\n     */\n    OnDisconnect.prototype.remove = function (onComplete) {\n        validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n        validateWritablePath('OnDisconnect.remove', this.path_);\n        validateCallback('OnDisconnect.remove', 1, onComplete, true);\n        var deferred = new Deferred();\n        this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\n     * @param {*} value\n     * @param {function(?Error)=} onComplete\n     * @return {!firebase.Promise}\n     */\n    OnDisconnect.prototype.set = function (value, onComplete) {\n        validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n        validateWritablePath('OnDisconnect.set', this.path_);\n        validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n        validateCallback('OnDisconnect.set', 2, onComplete, true);\n        var deferred = new Deferred();\n        this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\n     * @param {*} value\n     * @param {number|string|null} priority\n     * @param {function(?Error)=} onComplete\n     * @return {!firebase.Promise}\n     */\n    OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\n        validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n        validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\n        validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n        validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n        var deferred = new Deferred();\n        this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\n     * @param {!Object} objectToMerge\n     * @param {function(?Error)=} onComplete\n     * @return {!firebase.Promise}\n     */\n    OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\n        validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n        validateWritablePath('OnDisconnect.update', this.path_);\n        if (Array.isArray(objectToMerge)) {\n            var newObjectToMerge = {};\n            for (var i = 0; i < objectToMerge.length; ++i) {\n                newObjectToMerge['' + i] = objectToMerge[i];\n            }\n            objectToMerge = newObjectToMerge;\n            warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n                'existing data, or an Object with integer keys if you really do want to only update some of the children.');\n        }\n        validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\n        validateCallback('OnDisconnect.update', 2, onComplete, true);\n        var deferred = new Deferred();\n        this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    return OnDisconnect;\n}());\nexport { OnDisconnect };\n\n\n"]}