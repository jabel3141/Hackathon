{"version":3,"sources":["src/database/api/DataSnapshot.ts","database/api/DataSnapshot.js"],"names":["DataSnapshot","node_","ref_","index_","prototype","val","arguments","length","exportVal","toJSON","exists","isEmpty","child","childPathString","String","childPath","childRef","getChild","hasChild","getPriority","forEach","action","_this","isLeafNode","childrenNode","forEachChild","key","node","hasChildren","Object","defineProperty","get","getKey","enumerable","configurable","numChildren","getRef"],"mappings":"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","file":"DataSnapshot.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { validateArgCount, validateCallback } from '../../utils/validation';\nimport { validatePathString } from '../core/util/validation';\nimport { Path } from '../core/util/Path';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { Reference } from './Reference';\nimport { Index } from '../core/snap/indexes/Index';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\n\n/**\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\n * surfaces the public methods (val, forEach, etc.) we want to expose.\n */\nexport class DataSnapshot {\n  /**\n   * @param {!Node} node_ A SnapshotNode to wrap.\n   * @param {!Reference} ref_ The ref of the location this snapshot came from.\n   * @param {!Index} index_ The iteration order for this snapshot\n   */\n  constructor(\n    private readonly node_: Node,\n    private readonly ref_: Reference,\n    private readonly index_: Index\n  ) {}\n\n  /**\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\n   * empty.\n   *\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  val(): any {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this.node_.val();\n  }\n\n  /**\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\n   * the entire node contents.\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  exportVal(): any {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this.node_.val(true);\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): any {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this.exportVal();\n  }\n\n  /**\n   * Returns whether the snapshot contains a non-null value.\n   *\n   * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\n   */\n  exists(): boolean {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return !this.node_.isEmpty();\n  }\n\n  /**\n   * Returns a DataSnapshot of the specified child node's contents.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {!DataSnapshot} DataSnapshot for child node.\n   */\n  child(childPathString: string): DataSnapshot {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    childPathString = String(childPathString);\n    validatePathString('DataSnapshot.child', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    const childRef = this.ref_.child(childPath);\n    return new DataSnapshot(\n      this.node_.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n\n  /**\n   * Returns whether the snapshot contains a child at the specified path.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {boolean} Whether the child exists.\n   */\n  hasChild(childPathString: string): boolean {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    return !this.node_.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns the priority of the object, or null if no priority was set.\n   *\n   * @return {string|number|null} The priority.\n   */\n  getPriority(): string | number | null {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this.node_.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * Iterates through child nodes and calls the specified action for each one.\n   *\n   * @param {function(!DataSnapshot)} action Callback function to be called\n   * for each child.\n   * @return {boolean} True if forEach was canceled by action returning true for\n   * one of the child nodes.\n   */\n  forEach(action: (d: DataSnapshot) => void): boolean {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 1, action, false);\n\n    if (this.node_.isLeafNode()) return false;\n\n    const childrenNode = this.node_ as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this.index_, (key, node) => {\n      return action(\n        new DataSnapshot(node, this.ref_.child(key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns whether this DataSnapshot has children.\n   * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\n   */\n  hasChildren(): boolean {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n\n    if (this.node_.isLeafNode()) return false;\n    else return !this.node_.isEmpty();\n  }\n\n  get key() {\n    return this.ref_.getKey();\n  }\n\n  /**\n   * Returns the number of children for this DataSnapshot.\n   * @return {number} The number of children that this DataSnapshot contains.\n   */\n  numChildren(): number {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n\n    return this.node_.numChildren();\n  }\n\n  /**\n   * @return {Reference} The Firebase reference for the location this snapshot's data came from.\n   */\n  getRef(): Reference {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n\n    return this.ref_;\n  }\n\n  get ref() {\n    return this.getRef();\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { validateArgCount, validateCallback } from '../../utils/validation';\nimport { validatePathString } from '../core/util/validation';\nimport { Path } from '../core/util/Path';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\n/**\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\n * surfaces the public methods (val, forEach, etc.) we want to expose.\n */\nvar DataSnapshot = (function () {\n    /**\n     * @param {!Node} node_ A SnapshotNode to wrap.\n     * @param {!Reference} ref_ The ref of the location this snapshot came from.\n     * @param {!Index} index_ The iteration order for this snapshot\n     */\n    function DataSnapshot(node_, ref_, index_) {\n        this.node_ = node_;\n        this.ref_ = ref_;\n        this.index_ = index_;\n    }\n    /**\n     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\n     * empty.\n     *\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n     */\n    DataSnapshot.prototype.val = function () {\n        validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n        return this.node_.val();\n    };\n    /**\n     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\n     * the entire node contents.\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n     */\n    DataSnapshot.prototype.exportVal = function () {\n        validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n        return this.node_.val(true);\n    };\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n    // for end-users\n    DataSnapshot.prototype.toJSON = function () {\n        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n        validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n        return this.exportVal();\n    };\n    /**\n     * Returns whether the snapshot contains a non-null value.\n     *\n     * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\n     */\n    DataSnapshot.prototype.exists = function () {\n        validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n        return !this.node_.isEmpty();\n    };\n    /**\n     * Returns a DataSnapshot of the specified child node's contents.\n     *\n     * @param {!string} childPathString Path to a child.\n     * @return {!DataSnapshot} DataSnapshot for child node.\n     */\n    DataSnapshot.prototype.child = function (childPathString) {\n        validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n        // Ensure the childPath is a string (can be a number)\n        childPathString = String(childPathString);\n        validatePathString('DataSnapshot.child', 1, childPathString, false);\n        var childPath = new Path(childPathString);\n        var childRef = this.ref_.child(childPath);\n        return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);\n    };\n    /**\n     * Returns whether the snapshot contains a child at the specified path.\n     *\n     * @param {!string} childPathString Path to a child.\n     * @return {boolean} Whether the child exists.\n     */\n    DataSnapshot.prototype.hasChild = function (childPathString) {\n        validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n        validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n        var childPath = new Path(childPathString);\n        return !this.node_.getChild(childPath).isEmpty();\n    };\n    /**\n     * Returns the priority of the object, or null if no priority was set.\n     *\n     * @return {string|number|null} The priority.\n     */\n    DataSnapshot.prototype.getPriority = function () {\n        validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n        return this.node_.getPriority().val();\n    };\n    /**\n     * Iterates through child nodes and calls the specified action for each one.\n     *\n     * @param {function(!DataSnapshot)} action Callback function to be called\n     * for each child.\n     * @return {boolean} True if forEach was canceled by action returning true for\n     * one of the child nodes.\n     */\n    DataSnapshot.prototype.forEach = function (action) {\n        var _this = this;\n        validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n        validateCallback('DataSnapshot.forEach', 1, action, false);\n        if (this.node_.isLeafNode())\n            return false;\n        var childrenNode = this.node_;\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n        return !!childrenNode.forEachChild(this.index_, function (key, node) {\n            return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));\n        });\n    };\n    /**\n     * Returns whether this DataSnapshot has children.\n     * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\n     */\n    DataSnapshot.prototype.hasChildren = function () {\n        validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n        if (this.node_.isLeafNode())\n            return false;\n        else\n            return !this.node_.isEmpty();\n    };\n    Object.defineProperty(DataSnapshot.prototype, \"key\", {\n        get: function () {\n            return this.ref_.getKey();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the number of children for this DataSnapshot.\n     * @return {number} The number of children that this DataSnapshot contains.\n     */\n    DataSnapshot.prototype.numChildren = function () {\n        validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n        return this.node_.numChildren();\n    };\n    /**\n     * @return {Reference} The Firebase reference for the location this snapshot's data came from.\n     */\n    DataSnapshot.prototype.getRef = function () {\n        validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n        return this.ref_;\n    };\n    Object.defineProperty(DataSnapshot.prototype, \"ref\", {\n        get: function () {\n            return this.getRef();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return DataSnapshot;\n}());\nexport { DataSnapshot };\n\n\n"]}