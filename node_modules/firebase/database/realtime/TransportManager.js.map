{"version":3,"sources":["src/database/realtime/TransportManager.ts","database/realtime/TransportManager.js"],"names":["TransportManager","repoInfo","initTransports_","Object","defineProperty","get","enumerable","configurable","prototype","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","webSocketOnly","transports_","transports_1","ALL_TRANSPORTS","i","transport","push","initialTransport","length","Error","upgradeTransport"],"mappings":";;;;;;;AAgBA;;AACA;;AACA;;AAIA;;;;;;;;AAQA,IAAAA,mBAAA,YAAA;AAWE;;;AAGA,aAAAA,gBAAA,CAAYC,QAAZ,EAA8B;AAC5B,aAAKC,eAAL,CAAqBD,QAArB;AACD;AATDE,WAAAC,cAAA,CAAWJ,gBAAX,EAAW,gBAAX,EAAyB;AAJzB;;;;ACKMK,aDDN,eAAA;AACE,mBAAO,wFAAP;AACD,SAFwB;ACInBC,oBAAY,IDJO;ACKnBC,sBAAc;ADLK,KAAzB;AAWA;;;;AAIQP,qBAAAQ,SAAA,CAAAN,eAAA,GAAR,UAAwBD,QAAxB,EAA0C;AACxC,YAAMQ,wBACJ,4CAAuB,yCAAoB,aAApB,GADzB;AAEA,YAAIC,uBACFD,yBAAyB,CAAC,yCAAoBE,gBAApB,EAD5B;AAGA,YAAIV,SAASW,aAAb,EAA4B;AAC1B,gBAAI,CAACH,qBAAL,EACE,gBACE,iFADF;AAIFC,mCAAuB,IAAvB;AACD;AAED,YAAIA,oBAAJ,EAA0B;AACxB,iBAAKG,WAAL,GAAmB,0CAAnB;AACD,SAFD,MAEO;AACL,gBAAMC,eAAc,KAAKD,WAAL,GAAmB,EAAvC;AACA,4BACEb,iBAAiBe,cADnB,EAEE,UAACC,CAAD,EAAYC,SAAZ,EAA2C;AACzC,oBAAIA,aAAaA,UAAU,aAAV,GAAjB,EAA6C;AAC3CH,iCAAWI,IAAX,CAAgBD,SAAhB;AACD;AACF,aANH;AAQD;AACF,KA5BO;AA8BR;;;;AAIAjB,qBAAAQ,SAAA,CAAAW,gBAAA,GAAA,YAAA;AACE,YAAI,KAAKN,WAAL,CAAiBO,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B,mBAAO,KAAKP,WAAL,CAAiB,CAAjB,CAAP;AACD,SAFD,MAEO;AACL,kBAAM,IAAIQ,KAAJ,CAAU,yBAAV,CAAN;AACD;AACF,KAND;AAQA;;;;AAIArB,qBAAAQ,SAAA,CAAAc,gBAAA,GAAA,YAAA;AACE,YAAI,KAAKT,WAAL,CAAiBO,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B,mBAAO,KAAKP,WAAL,CAAiB,CAAjB,CAAP;AACD,SAFD,MAEO;AACL,mBAAO,IAAP;AACD;AACF,KAND;AAOF,WAAAb,gBAAA;AA3EA,CAAA,EAAA,C,CA9BA;;;;;;;;;;;;;;;QC8FSA,gB,GAAAA,gB","file":"TransportManager.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { WebSocketConnection } from './WebSocketConnection';\nimport { warn, each } from '../core/util/util';\nimport { TransportConstructor } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n * @constructor\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  /**\n   * @const\n   * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\n   */\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo\n   * @private\n   */\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable)\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      each(\n        TransportManager.ALL_TRANSPORTS,\n        (i: number, transport: TransportConstructor) => {\n          if (transport && transport['isAvailable']()) {\n            transports.push(transport);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\n   * initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\n   * transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { WebSocketConnection } from './WebSocketConnection';\nimport { warn, each } from '../core/util/util';\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n * @constructor\n */\nvar TransportManager = (function () {\n    /**\n     * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\n     */\n    function TransportManager(repoInfo) {\n        this.initTransports_(repoInfo);\n    }\n    Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\n        /**\n         * @const\n         * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\n         */\n        get: function () {\n            return [BrowserPollConnection, WebSocketConnection];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {!RepoInfo} repoInfo\n     * @private\n     */\n    TransportManager.prototype.initTransports_ = function (repoInfo) {\n        var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n        var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n        if (repoInfo.webSocketOnly) {\n            if (!isWebSocketsAvailable)\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n            isSkipPollConnection = true;\n        }\n        if (isSkipPollConnection) {\n            this.transports_ = [WebSocketConnection];\n        }\n        else {\n            var transports_1 = (this.transports_ = []);\n            each(TransportManager.ALL_TRANSPORTS, function (i, transport) {\n                if (transport && transport['isAvailable']()) {\n                    transports_1.push(transport);\n                }\n            });\n        }\n    };\n    /**\n     * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\n     * initial transport to use\n     */\n    TransportManager.prototype.initialTransport = function () {\n        if (this.transports_.length > 0) {\n            return this.transports_[0];\n        }\n        else {\n            throw new Error('No transports available');\n        }\n    };\n    /**\n     * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\n     * transport, or null\n     */\n    TransportManager.prototype.upgradeTransport = function () {\n        if (this.transports_.length > 1) {\n            return this.transports_[1];\n        }\n        else {\n            return null;\n        }\n    };\n    return TransportManager;\n}());\nexport { TransportManager };\n\n\n"]}