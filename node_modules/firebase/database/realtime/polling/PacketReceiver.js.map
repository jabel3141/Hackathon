{"version":3,"sources":["database/src/database/realtime/polling/PacketReceiver.ts","database/realtime/polling/PacketReceiver.js"],"names":["PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","prototype","closeAfter","responseNum","callback","handleResponse","requestNum","data","_this","_loop_1","toProcess","this_1","_loop_2","i","length","state_1"],"mappings":";;;;;;;AAgBA;;AAEA;;;;;AAKA,IAAAA,iBAAA,YAAA;AAME;;;AAGA,aAAAA,cAAA,CAAoBC,UAApB,EAAmD;AAA/B,aAAAA,UAAA,GAAAA,UAAA;AARpB,aAAAC,gBAAA,GAA0B,EAA1B;AACA,aAAAC,kBAAA,GAAqB,CAArB;AACA,aAAAC,kBAAA,GAAqB,CAAC,CAAtB;AACA,aAAAC,OAAA,GAA+B,IAA/B;AAKuD;AAEvDL,mBAAAM,SAAA,CAAAC,UAAA,GAAA,UAAWC,WAAX,EAAgCC,QAAhC,EAAoD;AAClD,aAAKL,kBAAL,GAA0BI,WAA1B;AACA,aAAKH,OAAL,GAAeI,QAAf;AACA,YAAI,KAAKL,kBAAL,GAA0B,KAAKD,kBAAnC,EAAuD;AACrD,iBAAKE,OAAL;AACA,iBAAKA,OAAL,GAAe,IAAf;AACD;AACF,KAPD;AASA;;;;;;;AAOAL,mBAAAM,SAAA,CAAAI,cAAA,GAAA,UAAeC,UAAf,EAAmCC,IAAnC,EAA8C;AAA9C,YAAAC,QAAA,IAAA;AACE,aAAKX,gBAAL,CAAsBS,UAAtB,IAAoCC,IAApC;ACDI,YAAIE,UAAU,SAAVA,OAAU,GAAY;ADG5B,gBAAMC,YAAYC,OAAKd,gBAAL,CAAsBc,OAAKb,kBAA3B,CAAlB;AACA,mBAAOa,OAAKd,gBAAL,CAAsBc,OAAKb,kBAA3B,CAAP;ACDM,gBAAIc,UAAU,SAAVA,OAAU,CDEXC,CCFW,EDEV;AACR,oBAAIH,UAAUG,CAAV,CAAJ,EAAkB;AAChB,8CAAe,YAAA;AACbL,8BAAKZ,UAAL,CAAgBc,UAAUG,CAAV,CAAhB;AACD,qBAFD;AAGD;AACF,aCRK;ADEN,iBAAK,IAAIA,IAAI,CAAb,EAAgBA,IAAIH,UAAUI,MAA9B,EAAsC,EAAED,CAAxC,EAAyC;ACM/BD,wBDNDC,CCMC;ADAT;AACD,gBAAIF,OAAKb,kBAAL,KAA4Ba,OAAKZ,kBAArC,EAAyD;AACvD,oBAAIY,OAAKX,OAAT,EAAkB;AAChBW,2BAAKX,OAAL;AACAW,2BAAKX,OAAL,GAAe,IAAf;AACD;ACEO,uBAAO,OAAP;ADAT;AACDW,mBAAKb,kBAAL;AACD,SCpBG;AAsBA,YAAIa,SAAS,IAAb;ADpBJ,eAAO,KAAKd,gBAAL,CAAsB,KAAKC,kBAA3B,CAAP,EAAqD;ACsB7C,gBAAIiB,UAAUN,SAAd;AACA,gBAAIM,YAAY,OAAhB,EACI;ADNX;AACF,KArBD;AAsBF,WAAApB,cAAA;AAjDA,CAAA,EAAA,C,CAvBA;;;;;;;;;;;;;;;QCiFSA,c,GAAAA,c","file":"PacketReceiver.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n * @constructor\n */\nexport class PacketReceiver {\n  pendingResponses: any[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: Object) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   * @param {number} requestNum\n   * @param {Array} data\n   */\n  handleResponse(requestNum: number, data: any[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[this.currentResponseNum];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { exceptionGuard } from '../../core/util/util';\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n * @constructor\n */\nvar PacketReceiver = (function () {\n    /**\n     * @param onMessage_\n     */\n    function PacketReceiver(onMessage_) {\n        this.onMessage_ = onMessage_;\n        this.pendingResponses = [];\n        this.currentResponseNum = 0;\n        this.closeAfterResponse = -1;\n        this.onClose = null;\n    }\n    PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\n        this.closeAfterResponse = responseNum;\n        this.onClose = callback;\n        if (this.closeAfterResponse < this.currentResponseNum) {\n            this.onClose();\n            this.onClose = null;\n        }\n    };\n    /**\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n     * browsers will respond in the same order as the requests we sent\n     * @param {number} requestNum\n     * @param {Array} data\n     */\n    PacketReceiver.prototype.handleResponse = function (requestNum, data) {\n        var _this = this;\n        this.pendingResponses[requestNum] = data;\n        var _loop_1 = function () {\n            var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\n            delete this_1.pendingResponses[this_1.currentResponseNum];\n            var _loop_2 = function (i) {\n                if (toProcess[i]) {\n                    exceptionGuard(function () {\n                        _this.onMessage_(toProcess[i]);\n                    });\n                }\n            };\n            for (var i = 0; i < toProcess.length; ++i) {\n                _loop_2(i);\n            }\n            if (this_1.currentResponseNum === this_1.closeAfterResponse) {\n                if (this_1.onClose) {\n                    this_1.onClose();\n                    this_1.onClose = null;\n                }\n                return \"break\";\n            }\n            this_1.currentResponseNum++;\n        };\n        var this_1 = this;\n        while (this.pendingResponses[this.currentResponseNum]) {\n            var state_1 = _loop_1();\n            if (state_1 === \"break\")\n                break;\n        }\n    };\n    return PacketReceiver;\n}());\nexport { PacketReceiver };\n\n\n"]}