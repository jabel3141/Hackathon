{"version":3,"sources":["src/database/core/RepoManager.ts","database/core/RepoManager.js"],"names":["DATABASE_URL_OPTION","_staticInstance","RepoManager","repos_","useRestClient_","getInstance","prototype","interrupt","repo","resume","databaseFromApp","app","dbUrl","options","undefined","parsedUrl","repoInfo","path","isEmpty","createRepo","database","deleteRepo","name","forceRestClient"],"mappings":";;;;;;;AAiBA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAIA;AA1BA;;;;;;;;;;;;;;;AA2BA,IAAMA,sBAAsB,aAA5B;AAEA,IAAIC,eAAJ;AAEA;;;AAGA,IAAAC,cAAA,YAAA;AAAA,aAAAA,WAAA,GAAA;AACE;;;AAGQ,aAAAC,MAAA,GAEJ,EAFI;AAIR;;;;AAIQ,aAAAC,cAAA,GAA0B,KAA1B;AA8FT;AA5FQF,gBAAAG,WAAA,GAAP,YAAA;AACE,YAAI,CAACJ,eAAL,EAAsB;AACpBA,8BAAkB,IAAIC,WAAJ,EAAlB;AACD;AACD,eAAOD,eAAP;AACD,KALM;AAOP;AACAC,gBAAAI,SAAA,CAAAC,SAAA,GAAA,YAAA;AACE,aAAK,IAAMC,IAAX,IAAmB,KAAKL,MAAxB,EAAgC;AAC9B,iBAAKA,MAAL,CAAYK,IAAZ,EAAkBD,SAAlB;AACD;AACF,KAJD;AAMAL,gBAAAI,SAAA,CAAAG,MAAA,GAAA,YAAA;AACE,aAAK,IAAMD,IAAX,IAAmB,KAAKL,MAAxB,EAAgC;AAC9B,iBAAKA,MAAL,CAAYK,IAAZ,EAAkBC,MAAlB;AACD;AACF,KAJD;AAMA;;;;;;AAMAP,gBAAAI,SAAA,CAAAI,eAAA,GAAA,UAAgBC,GAAhB,EAAgC;AAC9B,YAAMC,QAAgBD,IAAIE,OAAJ,CAAYb,mBAAZ,CAAtB;AACA,YAAIY,UAAUE,SAAd,EAAyB;AACvB,6BACE,gEACEd,mBADF,GAEE,+CAHJ;AAKD;AAED,YAAMe,YAAY,2BAAcH,KAAd,CAAlB;AACA,YAAMI,WAAWD,UAAUC,QAA3B;AAEA,qCAAY,+BAAZ,EAA6C,CAA7C,EAAgDD,SAAhD;AACA,YAAI,CAACA,UAAUE,IAAV,CAAeC,OAAf,EAAL,EAA+B;AAC7B,6BACE,gEACE,+BAFJ;AAID;AAED,YAAMV,OAAO,KAAKW,UAAL,CAAgBH,QAAhB,EAA0BL,GAA1B,CAAb;AAEA,eAAOH,KAAKY,QAAZ;AACD,KAxBD;AA0BA;;;;;AAKAlB,gBAAAI,SAAA,CAAAe,UAAA,GAAA,UAAWb,IAAX,EAAqB;AACnB;AACA,YAAI,kBAAQ,KAAKL,MAAb,EAAqBK,KAAKG,GAAL,CAASW,IAA9B,MAAwCd,IAA5C,EAAkD;AAChD,6BAAM,cAAcA,KAAKG,GAAL,CAASW,IAAvB,GAA8B,4BAApC;AACD;AACDd,aAAKD,SAAL;AACA,eAAO,KAAKJ,MAAL,CAAYK,KAAKG,GAAL,CAASW,IAArB,CAAP;AACD,KAPD;AASA;;;;;;;;AAQApB,gBAAAI,SAAA,CAAAa,UAAA,GAAA,UAAWH,QAAX,EAA+BL,GAA/B,EAA+C;AAC7C,YAAIH,OAAO,kBAAQ,KAAKL,MAAb,EAAqBQ,IAAIW,IAAzB,CAAX;AACA,YAAId,IAAJ,EAAU;AACR,6BAAM,+DAAN;AACD;AACDA,eAAO,eAASQ,QAAT,EAAmB,KAAKZ,cAAxB,EAAwCO,GAAxC,CAAP;AACA,aAAKR,MAAL,CAAYQ,IAAIW,IAAhB,IAAwBd,IAAxB;AAEA,eAAOA,IAAP;AACD,KATD;AAWA;;;;AAIAN,gBAAAI,SAAA,CAAAiB,eAAA,GAAA,UAAgBA,eAAhB,EAAwC;AACtC,aAAKnB,cAAL,GAAsBmB,eAAtB;AACD,KAFD;AAGF,WAAArB,WAAA;AA1GA,CAAA,EAAA;QCoFSA,W,GAAAA,W","file":"RepoManager.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { FirebaseApp } from '../../app/firebase_app';\nimport { safeGet } from '../../utils/obj';\nimport { Repo } from './Repo';\nimport { fatal } from './util/util';\nimport { parseRepoInfo } from './util/libs/parser';\nimport { validateUrl } from './util/validation';\nimport './Repo_transaction';\nimport { Database } from '../api/Database';\nimport { RepoInfo } from './RepoInfo';\n\n/** @const {string} */\nconst DATABASE_URL_OPTION = 'databaseURL';\n\nlet _staticInstance: RepoManager;\n\n/**\n * Creates and caches Repo instances.\n */\nexport class RepoManager {\n  /**\n   * @private {!Object.<string, !Repo>}\n   */\n  private repos_: {\n    [name: string]: Repo;\n  } = {};\n\n  /**\n   * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n   * @private {boolean}\n   */\n  private useRestClient_: boolean = false;\n\n  static getInstance(): RepoManager {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n    return _staticInstance;\n  }\n\n  // TODO(koss): Remove these functions unless used in tests?\n  interrupt() {\n    for (const repo in this.repos_) {\n      this.repos_[repo].interrupt();\n    }\n  }\n\n  resume() {\n    for (const repo in this.repos_) {\n      this.repos_[repo].resume();\n    }\n  }\n\n  /**\n   * This function should only ever be called to CREATE a new database instance.\n   *\n   * @param {!FirebaseApp} app\n   * @return {!Database}\n   */\n  databaseFromApp(app: FirebaseApp): Database {\n    const dbUrl: string = app.options[DATABASE_URL_OPTION];\n    if (dbUrl === undefined) {\n      fatal(\n        \"Can't determine Firebase Database URL.  Be sure to include \" +\n          DATABASE_URL_OPTION +\n          ' option when calling firebase.intializeApp().'\n      );\n    }\n\n    const parsedUrl = parseRepoInfo(dbUrl);\n    const repoInfo = parsedUrl.repoInfo;\n\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n    if (!parsedUrl.path.isEmpty()) {\n      fatal(\n        'Database URL must point to the root of a Firebase Database ' +\n          '(not including a child path).'\n      );\n    }\n\n    const repo = this.createRepo(repoInfo, app);\n\n    return repo.database;\n  }\n\n  /**\n   * Remove the repo and make sure it is disconnected.\n   *\n   * @param {!Repo} repo\n   */\n  deleteRepo(repo: Repo) {\n    // This should never happen...\n    if (safeGet(this.repos_, repo.app.name) !== repo) {\n      fatal('Database ' + repo.app.name + ' has already been deleted.');\n    }\n    repo.interrupt();\n    delete this.repos_[repo.app.name];\n  }\n\n  /**\n   * Ensures a repo doesn't already exist and then creates one using the\n   * provided app.\n   *\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\n   * @param {!FirebaseApp} app\n   * @return {!Repo} The Repo object for the specified server / repoName.\n   */\n  createRepo(repoInfo: RepoInfo, app: FirebaseApp): Repo {\n    let repo = safeGet(this.repos_, app.name);\n    if (repo) {\n      fatal('FIREBASE INTERNAL ERROR: Database initialized multiple times.');\n    }\n    repo = new Repo(repoInfo, this.useRestClient_, app);\n    this.repos_[app.name] = repo;\n\n    return repo;\n  }\n\n  /**\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n   * @param {boolean} forceRestClient\n   */\n  forceRestClient(forceRestClient: boolean) {\n    this.useRestClient_ = forceRestClient;\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { safeGet } from '../../utils/obj';\nimport { Repo } from './Repo';\nimport { fatal } from './util/util';\nimport { parseRepoInfo } from './util/libs/parser';\nimport { validateUrl } from './util/validation';\nimport './Repo_transaction';\n/** @const {string} */\nvar DATABASE_URL_OPTION = 'databaseURL';\nvar _staticInstance;\n/**\n * Creates and caches Repo instances.\n */\nvar RepoManager = (function () {\n    function RepoManager() {\n        /**\n         * @private {!Object.<string, !Repo>}\n         */\n        this.repos_ = {};\n        /**\n         * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n         * @private {boolean}\n         */\n        this.useRestClient_ = false;\n    }\n    RepoManager.getInstance = function () {\n        if (!_staticInstance) {\n            _staticInstance = new RepoManager();\n        }\n        return _staticInstance;\n    };\n    // TODO(koss): Remove these functions unless used in tests?\n    RepoManager.prototype.interrupt = function () {\n        for (var repo in this.repos_) {\n            this.repos_[repo].interrupt();\n        }\n    };\n    RepoManager.prototype.resume = function () {\n        for (var repo in this.repos_) {\n            this.repos_[repo].resume();\n        }\n    };\n    /**\n     * This function should only ever be called to CREATE a new database instance.\n     *\n     * @param {!FirebaseApp} app\n     * @return {!Database}\n     */\n    RepoManager.prototype.databaseFromApp = function (app) {\n        var dbUrl = app.options[DATABASE_URL_OPTION];\n        if (dbUrl === undefined) {\n            fatal(\"Can't determine Firebase Database URL.  Be sure to include \" +\n                DATABASE_URL_OPTION +\n                ' option when calling firebase.intializeApp().');\n        }\n        var parsedUrl = parseRepoInfo(dbUrl);\n        var repoInfo = parsedUrl.repoInfo;\n        validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n        if (!parsedUrl.path.isEmpty()) {\n            fatal('Database URL must point to the root of a Firebase Database ' +\n                '(not including a child path).');\n        }\n        var repo = this.createRepo(repoInfo, app);\n        return repo.database;\n    };\n    /**\n     * Remove the repo and make sure it is disconnected.\n     *\n     * @param {!Repo} repo\n     */\n    RepoManager.prototype.deleteRepo = function (repo) {\n        // This should never happen...\n        if (safeGet(this.repos_, repo.app.name) !== repo) {\n            fatal('Database ' + repo.app.name + ' has already been deleted.');\n        }\n        repo.interrupt();\n        delete this.repos_[repo.app.name];\n    };\n    /**\n     * Ensures a repo doesn't already exist and then creates one using the\n     * provided app.\n     *\n     * @param {!RepoInfo} repoInfo The metadata about the Repo\n     * @param {!FirebaseApp} app\n     * @return {!Repo} The Repo object for the specified server / repoName.\n     */\n    RepoManager.prototype.createRepo = function (repoInfo, app) {\n        var repo = safeGet(this.repos_, app.name);\n        if (repo) {\n            fatal('FIREBASE INTERNAL ERROR: Database initialized multiple times.');\n        }\n        repo = new Repo(repoInfo, this.useRestClient_, app);\n        this.repos_[app.name] = repo;\n        return repo;\n    };\n    /**\n     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n     * @param {boolean} forceRestClient\n     */\n    RepoManager.prototype.forceRestClient = function (forceRestClient) {\n        this.useRestClient_ = forceRestClient;\n    };\n    return RepoManager;\n}());\nexport { RepoManager };\n\n\n"]}