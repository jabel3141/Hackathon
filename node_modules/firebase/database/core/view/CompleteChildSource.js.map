{"version":3,"sources":["database/src/database/core/view/CompleteChildSource.ts","database/core/view/CompleteChildSource.js"],"names":["NoCompleteChildSource_","prototype","getCompleteChild","childKey","getChildAfterChild","index","child","reverse","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","node","getEventCache","isCompleteForChild","getNode","getImmediateChild","serverNode","getServerCache","calcCompleteChild","completeServerData","getCompleteServerSnap","nodes","calcIndexedSlice","length"],"mappings":";;;;;;;AAgBA;;AAkCA;;;;;;;AAOA,IAAAA,yBAAA,YAAA;AAAA,aAAAA,sBAAA,GAAA,CAkBC;AAjBC;;;AAGAA,2BAAAC,SAAA,CAAAC,gBAAA,GAAA,UAAiBC,QAAjB,EAAkC;AAChC,eAAO,IAAP;AACD,KAFD;AAIA;;;AAGAH,2BAAAC,SAAA,CAAAG,kBAAA,GAAA,UACEC,KADF,EAEEC,KAFF,EAGEC,OAHF,EAGmB;AAEjB,eAAO,IAAP;AACD,KAND;AAOF,WAAAP,sBAAA;AAlBA,CAAA,EAAA,C,CAzDA;;;;;;;;;;;;;;;QCwCSA,sB,GAAAA,sB;ADqCT;;;;;;AAKO,IAAMQ,8DAA2B,IAAIR,sBAAJ,EAAjC;AAEP;;;;;;;AAOA,IAAAS,+BAAA,YAAA;AACE;;;;;AAKA,aAAAA,4BAAA,CACUC,OADV,EAEUC,UAFV,EAGUC,uBAHV,EAGqD;AAA3C,YAAAA,4BAAA,KAAA,CAAA,EAAA;AAAAA,sCAAA,IAAA;AAA2C;AAF3C,aAAAF,OAAA,GAAAA,OAAA;AACA,aAAAC,UAAA,GAAAA,UAAA;AACA,aAAAC,uBAAA,GAAAA,uBAAA;AACN;AAEJ;;;AAGAH,iCAAAR,SAAA,CAAAC,gBAAA,GAAA,UAAiBC,QAAjB,EAAiC;AAC/B,YAAMU,OAAO,KAAKF,UAAL,CAAgBG,aAAhB,EAAb;AACA,YAAID,KAAKE,kBAAL,CAAwBZ,QAAxB,CAAJ,EAAuC;AACrC,mBAAOU,KAAKG,OAAL,GAAeC,iBAAf,CAAiCd,QAAjC,CAAP;AACD,SAFD,MAEO;AACL,gBAAMe,aACJ,KAAKN,uBAAL,IAAgC,IAAhC,GACI,yBAAc,KAAKA,uBAAnB,EAA4C,IAA5C,EAAkD,KAAlD,CADJ,GAEI,KAAKD,UAAL,CAAgBQ,cAAhB,EAHN;AAIA,mBAAO,KAAKT,OAAL,CAAaU,iBAAb,CAA+BjB,QAA/B,EAAyCe,UAAzC,CAAP;AACD;AACF,KAXD;AAaA;;;AAGAT,iCAAAR,SAAA,CAAAG,kBAAA,GAAA,UACEC,KADF,EAEEC,KAFF,EAGEC,OAHF,EAGkB;AAEhB,YAAMc,qBACJ,KAAKT,uBAAL,IAAgC,IAAhC,GACI,KAAKA,uBADT,GAEI,KAAKD,UAAL,CAAgBW,qBAAhB,EAHN;AAIA,YAAMC,QAAQ,KAAKb,OAAL,CAAac,gBAAb,CACZH,kBADY,EAEZf,KAFY,EAGZ,CAHY,EAIZC,OAJY,EAKZF,KALY,CAAd;AAOA,YAAIkB,MAAME,MAAN,KAAiB,CAArB,EAAwB;AACtB,mBAAO,IAAP;AACD,SAFD,MAEO;AACL,mBAAOF,MAAM,CAAN,CAAP;AACD;AACF,KArBD;AAsBF,WAAAd,4BAAA;AArDA,CAAA,EAAA;QCOSA,4B,GAAAA,4B","file":"CompleteChildSource.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { CacheNode } from './CacheNode';\nimport { NamedNode, Node } from '../snap/Node';\nimport { Index } from '../snap/indexes/Index';\nimport { WriteTreeRef } from '../WriteTree';\nimport { ViewCache } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  /**\n   * @param {!string} childKey\n   * @return {?Node}\n   */\n  getCompleteChild(childKey: string): Node | null;\n\n  /**\n   * @param {!Index} index\n   * @param {!NamedNode} child\n   * @param {boolean} reverse\n   * @return {?NamedNode}\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n *\n * @private\n * @constructor\n * @implements CompleteChildSource\n */\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n * @const\n * @type {!CompleteChildSource}\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n *\n *\n * @implements CompleteChildSource\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  /**\n   * @param {!WriteTreeRef} writes_\n   * @param {!ViewCache} viewCache_\n   * @param {?Node} optCompleteServerCache_\n   */\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.getEventCache();\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.getServerCache();\n      return this.writes_.calcCompleteChild(childKey, serverNode);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : this.viewCache_.getCompleteServerSnap();\n    const nodes = this.writes_.calcIndexedSlice(\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { CacheNode } from './CacheNode';\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n *\n * @private\n * @constructor\n * @implements CompleteChildSource\n */\nvar NoCompleteChildSource_ = (function () {\n    function NoCompleteChildSource_() {\n    }\n    /**\n     * @inheritDoc\n     */\n    NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\n        return null;\n    };\n    /**\n     * @inheritDoc\n     */\n    NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\n        return null;\n    };\n    return NoCompleteChildSource_;\n}());\nexport { NoCompleteChildSource_ };\n/**\n * Singleton instance.\n * @const\n * @type {!CompleteChildSource}\n */\nexport var NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n *\n *\n * @implements CompleteChildSource\n */\nvar WriteTreeCompleteChildSource = (function () {\n    /**\n     * @param {!WriteTreeRef} writes_\n     * @param {!ViewCache} viewCache_\n     * @param {?Node} optCompleteServerCache_\n     */\n    function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\n        if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }\n        this.writes_ = writes_;\n        this.viewCache_ = viewCache_;\n        this.optCompleteServerCache_ = optCompleteServerCache_;\n    }\n    /**\n     * @inheritDoc\n     */\n    WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\n        var node = this.viewCache_.getEventCache();\n        if (node.isCompleteForChild(childKey)) {\n            return node.getNode().getImmediateChild(childKey);\n        }\n        else {\n            var serverNode = this.optCompleteServerCache_ != null\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\n                : this.viewCache_.getServerCache();\n            return this.writes_.calcCompleteChild(childKey, serverNode);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\n        var completeServerData = this.optCompleteServerCache_ != null\n            ? this.optCompleteServerCache_\n            : this.viewCache_.getCompleteServerSnap();\n        var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);\n        if (nodes.length === 0) {\n            return null;\n        }\n        else {\n            return nodes[0];\n        }\n    };\n    return WriteTreeCompleteChildSource;\n}());\nexport { WriteTreeCompleteChildSource };\n\n\n"]}