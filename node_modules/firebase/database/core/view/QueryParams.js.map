{"version":3,"sources":["database/src/database/core/view/QueryParams.ts"],"names":["QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","limit_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","index_","prototype","hasStart","isViewFromLeft","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","getIndexStartValue","getIndexStartName","hasEnd","getIndexEndValue","getIndexEndName","hasLimit","hasAnchoredLimit","getLimit","getIndex","copy_","copy","limit","newLimit","newParams","limitToFirst","limitToLast","VIEW_FROM_RIGHT","startAt","indexValue","key","undefined","endAt","orderBy","index","getQueryObject","WIRE_PROTOCOL_CONSTANTS","obj","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","toString","loadsAllData","isDefault","getNodeFilter","toRestQueryStringParameters","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","PRIORITY_INDEX","VALUE_INDEX","KEY_INDEX","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","DEFAULT"],"mappings":"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","file":"QueryParams.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../../utils/assert';\nimport { MIN_NAME, MAX_NAME } from '../util/util';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { RangedFilter } from './filter/RangedFilter';\nimport { stringify } from '../../../utils/json';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { Index } from '../snap/indexes/Index';\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n * @constructor\n */\nexport class QueryParams {\n  private limitSet_ = false;\n  private startSet_ = false;\n  private startNameSet_ = false;\n  private endSet_ = false;\n  private endNameSet_ = false;\n\n  private limit_ = 0;\n  private viewFrom_ = '';\n  private indexStartValue_: any | null = null;\n  private indexStartName_ = '';\n  private indexEndValue_: any | null = null;\n  private indexEndName_ = '';\n\n  private index_ = PRIORITY_INDEX;\n\n  /**\n   * Wire Protocol Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n\n  /**\n   * REST Query Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n\n  /**\n   * Default, empty query parameters\n   * @type {!QueryParams}\n   * @const\n   */\n  static readonly DEFAULT = new QueryParams();\n\n  /**\n   * @return {boolean}\n   */\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @return {boolean} True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return (\n        this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT\n      );\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   * @return {*}\n   */\n  getIndexStartValue(): any {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * @return {*}\n   */\n  getIndexEndValue(): any {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   * @return {!number}\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  /**\n   * @return {!Index}\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @return {!QueryParams}\n   * @private\n   */\n  private copy_(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limit(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToFirst(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToLast(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  startAt(indexValue: any, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.startSet_ = true;\n    if (!(indexValue !== undefined)) {\n      indexValue = null;\n    }\n    newParams.indexStartValue_ = indexValue;\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  endAt(indexValue: any, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.endSet_ = true;\n    if (!(indexValue !== undefined)) {\n      indexValue = null;\n    }\n    newParams.indexEndValue_ = indexValue;\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {!Index} index\n   * @return {!QueryParams}\n   */\n  orderBy(index: Index): QueryParams {\n    const newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  }\n\n  /**\n   * @return {!Object}\n   */\n  getQueryObject(): Object {\n    const WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    const obj: { [k: string]: any } = {};\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      let viewFrom = this.viewFrom_;\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    }\n    // For now, priority index is the default, so we only specify if it's some other index\n    if (this.index_ !== PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n    return obj;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ == PRIORITY_INDEX;\n  }\n\n  /**\n   * @return {!NodeFilter}\n   */\n  getNodeFilter(): NodeFilter {\n    if (this.loadsAllData()) {\n      return new IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter(this);\n    } else {\n      return new RangedFilter(this);\n    }\n  }\n\n  /**\n   * Returns a set of REST query string parameters representing this query.\n   *\n   * @return {!Object.<string,*>} query string parameters\n   */\n  toRestQueryStringParameters(): { [k: string]: any } {\n    const REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    const qs: { [k: string]: string | number } = {};\n\n    if (this.isDefault()) {\n      return qs;\n    }\n\n    let orderBy;\n    if (this.index_ === PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n    qs[REST_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = stringify(this.indexStartValue_);\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + stringify(this.indexStartName_);\n      }\n    }\n\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = stringify(this.indexEndValue_);\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + stringify(this.indexEndName_);\n      }\n    }\n\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n\n    return qs;\n  }\n}\n"]}