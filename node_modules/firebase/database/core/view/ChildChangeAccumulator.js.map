{"version":3,"sources":["database/src/database/core/view/ChildChangeAccumulator.ts","database/core/view/ChildChangeAccumulator.js"],"names":["ChildChangeAccumulator","changeMap_","prototype","trackChildChange","change","type","childKey","childName","CHILD_ADDED","CHILD_CHANGED","CHILD_REMOVED","oldChange","oldType","childChangedChange","snapshotNode","childRemovedChange","oldSnap","childAddedChange","getChanges"],"mappings":";;;;;;;AAgBA;;AACA;;AACA;;AAEA;;;AAGA,IAAAA,yBAAA,YAAA;AAAA,aAAAA,sBAAA,GAAA;AACU,aAAAC,UAAA,GAAsC,EAAtC;AA4ET;AA1EC;;;AAGAD,2BAAAE,SAAA,CAAAC,gBAAA,GAAA,UAAiBC,MAAjB,EAA+B;AAC7B,YAAMC,OAAOD,OAAOC,IAApB;AACA,YAAMC,SAAS,sBAAT,GAAkCF,OAAOG,SAA/C;AACA,4BACEF,QAAQ,eAAOG,WAAf,IACEH,QAAQ,eAAOI,aADjB,IAEEJ,QAAQ,eAAOK,aAHnB,EAIE,2CAJF;AAMA,4BACEJ,aAAa,WADf,EAEE,iDAFF;AAIA,YAAMK,YAAY,kBAAQ,KAAKV,UAAb,EAAyBK,QAAzB,CAAlB;AACA,YAAIK,SAAJ,EAAe;AACb,gBAAMC,UAAUD,UAAUN,IAA1B;AACA,gBAAIA,QAAQ,eAAOG,WAAf,IAA8BI,WAAW,eAAOF,aAApD,EAAmE;AACjE,qBAAKT,UAAL,CAAgBK,QAAhB,IAA4B,eAAOO,kBAAP,CAC1BP,QAD0B,EAE1BF,OAAOU,YAFmB,EAG1BH,UAAUG,YAHgB,CAA5B;AAKD,aAND,MAMO,IACLT,QAAQ,eAAOK,aAAf,IACAE,WAAW,eAAOJ,WAFb,EAGL;AACA,uBAAO,KAAKP,UAAL,CAAgBK,QAAhB,CAAP;AACD,aALM,MAKA,IACLD,QAAQ,eAAOK,aAAf,IACAE,WAAW,eAAOH,aAFb,EAGL;AACA,qBAAKR,UAAL,CAAgBK,QAAhB,IAA4B,eAAOS,kBAAP,CAC1BT,QAD0B,EAE1BK,UAAUK,OAFgB,CAA5B;AAID,aARM,MAQA,IACLX,QAAQ,eAAOI,aAAf,IACAG,WAAW,eAAOJ,WAFb,EAGL;AACA,qBAAKP,UAAL,CAAgBK,QAAhB,IAA4B,eAAOW,gBAAP,CAC1BX,QAD0B,EAE1BF,OAAOU,YAFmB,CAA5B;AAID,aARM,MAQA,IACLT,QAAQ,eAAOI,aAAf,IACAG,WAAW,eAAOH,aAFb,EAGL;AACA,qBAAKR,UAAL,CAAgBK,QAAhB,IAA4B,eAAOO,kBAAP,CAC1BP,QAD0B,EAE1BF,OAAOU,YAFmB,EAG1BH,UAAUK,OAHgB,CAA5B;AAKD,aATM,MASA;AACL,sBAAM,4BACJ,qCACEZ,MADF,GAEE,kBAFF,GAGEO,SAJE,CAAN;AAMD;AACF,SA9CD,MA8CO;AACL,iBAAKV,UAAL,CAAgBK,QAAhB,IAA4BF,MAA5B;AACD;AACF,KA/DD;AAiEA;;;AAGAJ,2BAAAE,SAAA,CAAAgB,UAAA,GAAA,YAAA;AACE,eAAO,oBAAU,KAAKjB,UAAf,CAAP;AACD,KAFD;AAGF,WAAAD,sBAAA;AA7EA,CAAA,EAAA,C,CAvBA;;;;;;;;;;;;;;;QC4ESA,sB,GAAAA,sB","file":"ChildChangeAccumulator.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { getValues, safeGet } from '../../../utils/obj';\nimport { Change } from './Change';\nimport { assert, assertionError } from '../../../utils/assert';\n\n/**\n * @constructor\n */\nexport class ChildChangeAccumulator {\n  private changeMap_: { [k: string]: Change } = {};\n\n  /**\n   * @param {!Change} change\n   */\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey /** @type {!string} */ = change.childName;\n    assert(\n      type == Change.CHILD_ADDED ||\n        type == Change.CHILD_CHANGED ||\n        type == Change.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = safeGet(this.changeMap_, childKey) as Change;\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {\n        this.changeMap_[childKey] = Change.childChangedChange(\n          childKey,\n          change.snapshotNode,\n          oldChange.snapshotNode\n        );\n      } else if (\n        type == Change.CHILD_REMOVED &&\n        oldType == Change.CHILD_ADDED\n      ) {\n        delete this.changeMap_[childKey];\n      } else if (\n        type == Change.CHILD_REMOVED &&\n        oldType == Change.CHILD_CHANGED\n      ) {\n        this.changeMap_[childKey] = Change.childRemovedChange(\n          childKey,\n          oldChange.oldSnap\n        );\n      } else if (\n        type == Change.CHILD_CHANGED &&\n        oldType == Change.CHILD_ADDED\n      ) {\n        this.changeMap_[childKey] = Change.childAddedChange(\n          childKey,\n          change.snapshotNode\n        );\n      } else if (\n        type == Change.CHILD_CHANGED &&\n        oldType == Change.CHILD_CHANGED\n      ) {\n        this.changeMap_[childKey] = Change.childChangedChange(\n          childKey,\n          change.snapshotNode,\n          oldChange.oldSnap\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap_[childKey] = change;\n    }\n  }\n\n  /**\n   * @return {!Array.<!Change>}\n   */\n  getChanges(): Change[] {\n    return getValues(this.changeMap_);\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { getValues, safeGet } from '../../../utils/obj';\nimport { Change } from './Change';\nimport { assert, assertionError } from '../../../utils/assert';\n/**\n * @constructor\n */\nvar ChildChangeAccumulator = (function () {\n    function ChildChangeAccumulator() {\n        this.changeMap_ = {};\n    }\n    /**\n     * @param {!Change} change\n     */\n    ChildChangeAccumulator.prototype.trackChildChange = function (change) {\n        var type = change.type;\n        var childKey /** @type {!string} */ = change.childName;\n        assert(type == Change.CHILD_ADDED ||\n            type == Change.CHILD_CHANGED ||\n            type == Change.CHILD_REMOVED, 'Only child changes supported for tracking');\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n        var oldChange = safeGet(this.changeMap_, childKey);\n        if (oldChange) {\n            var oldType = oldChange.type;\n            if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode);\n            }\n            else if (type == Change.CHILD_REMOVED &&\n                oldType == Change.CHILD_ADDED) {\n                delete this.changeMap_[childKey];\n            }\n            else if (type == Change.CHILD_REMOVED &&\n                oldType == Change.CHILD_CHANGED) {\n                this.changeMap_[childKey] = Change.childRemovedChange(childKey, oldChange.oldSnap);\n            }\n            else if (type == Change.CHILD_CHANGED &&\n                oldType == Change.CHILD_ADDED) {\n                this.changeMap_[childKey] = Change.childAddedChange(childKey, change.snapshotNode);\n            }\n            else if (type == Change.CHILD_CHANGED &&\n                oldType == Change.CHILD_CHANGED) {\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap);\n            }\n            else {\n                throw assertionError('Illegal combination of changes: ' +\n                    change +\n                    ' occurred after ' +\n                    oldChange);\n            }\n        }\n        else {\n            this.changeMap_[childKey] = change;\n        }\n    };\n    /**\n     * @return {!Array.<!Change>}\n     */\n    ChildChangeAccumulator.prototype.getChanges = function () {\n        return getValues(this.changeMap_);\n    };\n    return ChildChangeAccumulator;\n}());\nexport { ChildChangeAccumulator };\n\n\n"]}