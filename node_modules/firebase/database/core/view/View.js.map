{"version":3,"sources":["database/src/database/core/view/View.ts","database/core/view/View.js"],"names":["View","query_","initialViewCache","eventRegistrations_","params","getQueryParams","indexFilter","getIndex","filter","getNodeFilter","processor_","initialServerCache","getServerCache","initialEventCache","getEventCache","serverSnap","updateFullNode","EMPTY_NODE","getNode","eventSnap","newServerCache","isFullyInitialized","filtersNodes","newEventCache","viewCache_","eventGenerator_","prototype","getQuery","getCompleteServerCache","path","cache","getCompleteServerSnap","loadsAllData","isEmpty","getImmediateChild","getFront","getChild","length","addEventRegistration","eventRegistration","push","removeEventRegistration","cancelError","cancelEvents","path_1","forEach","registration","maybeEvent","createCancelEvent","remaining","i","existing","matches","hasAnyCallback","concat","slice","applyOperation","operation","writesCache","completeServerCache","type","MERGE","source","queryId","getCompleteEventSnap","oldViewCache","result","assertIndexed","viewCache","generateEventsForChanges_","changes","getInitialEvents","initialChanges","isLeafNode","eventNode","forEachChild","key","childNode","childAddedChange","valueChange","eventCache","registrations","generateEventsForChanges"],"mappings":"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","file":"View.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { ViewProcessor } from './ViewProcessor';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { ViewCache } from './ViewCache';\nimport { EventGenerator } from './EventGenerator';\nimport { assert } from '../../../utils/assert';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Change } from './Change';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Query } from '../../api/Query';\nimport { EventRegistration } from './EventRegistration';\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\nimport { CancelEvent, Event } from './Event';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n * @constructor\n */\nexport class View {\n  private processor_: ViewProcessor;\n  private viewCache_: ViewCache;\n  private eventRegistrations_: EventRegistration[] = [];\n  private eventGenerator_: EventGenerator;\n\n  /**\n   *\n   * @param {!Query} query_\n   * @param {!ViewCache} initialViewCache\n   */\n  constructor(private query_: Query, initialViewCache: ViewCache) {\n    const params = this.query_.getQueryParams();\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = params.getNodeFilter();\n\n    /**\n     * @type {ViewProcessor}\n     * @private\n     */\n    this.processor_ = new ViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.getServerCache();\n    const initialEventCache = initialViewCache.getEventCache();\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    /**\n     * @type {!ViewCache}\n     * @private\n     */\n    this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n\n    /**\n     * @type {!EventGenerator}\n     * @private\n     */\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  /**\n   * @return {!Query}\n   */\n  getQuery(): Query {\n    return this.query_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getServerCache(): Node | null {\n    return this.viewCache_.getServerCache().getNode();\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    const cache = this.viewCache_.getCompleteServerSnap();\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (\n        this.query_.getQueryParams().loadsAllData() ||\n        (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())\n      ) {\n        return cache.getChild(path);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.eventRegistrations_.length === 0;\n  }\n\n  /**\n   * @param {!EventRegistration} eventRegistration\n   */\n  addEventRegistration(eventRegistration: EventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  }\n\n  /**\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    const cancelEvents: CancelEvent[] = [];\n    if (cancelError) {\n      assert(\n        eventRegistration == null,\n        'A cancel should cancel all event registrations.'\n      );\n      const path = this.query_.path;\n      this.eventRegistrations_.forEach(function(registration) {\n        cancelError /** @type {!Error} */ = cancelError;\n        const maybeEvent = registration.createCancelEvent(cancelError, path);\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n\n    if (eventRegistration) {\n      let remaining = [];\n      for (let i = 0; i < this.eventRegistrations_.length; ++i) {\n        const existing = this.eventRegistrations_[i];\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\n   *\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @return {!Array.<!Event>}\n   */\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null\n  ): Event[] {\n    if (\n      operation.type === OperationType.MERGE &&\n      operation.source.queryId !== null\n    ) {\n      assert(\n        this.viewCache_.getCompleteServerSnap(),\n        'We should always have a full cache before handling merges'\n      );\n      assert(\n        this.viewCache_.getCompleteEventSnap(),\n        'Missing event cache, even though we have a server cache'\n      );\n    }\n\n    const oldViewCache = this.viewCache_;\n    const result = this.processor_.applyOperation(\n      oldViewCache,\n      operation,\n      writesCache,\n      completeServerCache\n    );\n    this.processor_.assertIndexed(result.viewCache);\n\n    assert(\n      result.viewCache.getServerCache().isFullyInitialized() ||\n        !oldViewCache.getServerCache().isFullyInitialized(),\n      'Once a server snap is complete, it should never go back'\n    );\n\n    this.viewCache_ = result.viewCache;\n\n    return this.generateEventsForChanges_(\n      result.changes,\n      result.viewCache.getEventCache().getNode(),\n      null\n    );\n  }\n\n  /**\n   * @param {!EventRegistration} registration\n   * @return {!Array.<!Event>}\n   */\n  getInitialEvents(registration: EventRegistration): Event[] {\n    const eventSnap = this.viewCache_.getEventCache();\n    const initialChanges: Change[] = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n      const eventNode = eventSnap.getNode() as ChildrenNode;\n      eventNode.forEachChild(PRIORITY_INDEX, function(key, childNode) {\n        initialChanges.push(Change.childAddedChange(key, childNode));\n      });\n    }\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change.valueChange(eventSnap.getNode()));\n    }\n    return this.generateEventsForChanges_(\n      initialChanges,\n      eventSnap.getNode(),\n      registration\n    );\n  }\n\n  /**\n   * @private\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {EventRegistration=} eventRegistration\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges_(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistration?: EventRegistration\n  ): Event[] {\n    const registrations = eventRegistration\n      ? [eventRegistration]\n      : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(\n      changes,\n      eventCache,\n      registrations\n    );\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { ViewProcessor } from './ViewProcessor';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { ViewCache } from './ViewCache';\nimport { EventGenerator } from './EventGenerator';\nimport { assert } from '../../../utils/assert';\nimport { OperationType } from '../operation/Operation';\nimport { Change } from './Change';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n * @constructor\n */\nvar View = (function () {\n    /**\n     *\n     * @param {!Query} query_\n     * @param {!ViewCache} initialViewCache\n     */\n    function View(query_, initialViewCache) {\n        this.query_ = query_;\n        this.eventRegistrations_ = [];\n        var params = this.query_.getQueryParams();\n        var indexFilter = new IndexedFilter(params.getIndex());\n        var filter = params.getNodeFilter();\n        /**\n         * @type {ViewProcessor}\n         * @private\n         */\n        this.processor_ = new ViewProcessor(filter);\n        var initialServerCache = initialViewCache.getServerCache();\n        var initialEventCache = initialViewCache.getEventCache();\n        // Don't filter server node with other filter than index, wait for tagged listen\n        var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n        var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n        var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n        var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n        /**\n         * @type {!ViewCache}\n         * @private\n         */\n        this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n        /**\n         * @type {!EventGenerator}\n         * @private\n         */\n        this.eventGenerator_ = new EventGenerator(this.query_);\n    }\n    /**\n     * @return {!Query}\n     */\n    View.prototype.getQuery = function () {\n        return this.query_;\n    };\n    /**\n     * @return {?Node}\n     */\n    View.prototype.getServerCache = function () {\n        return this.viewCache_.getServerCache().getNode();\n    };\n    /**\n     * @param {!Path} path\n     * @return {?Node}\n     */\n    View.prototype.getCompleteServerCache = function (path) {\n        var cache = this.viewCache_.getCompleteServerSnap();\n        if (cache) {\n            // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n            // we need to see if it contains the child we're interested in.\n            if (this.query_.getQueryParams().loadsAllData() ||\n                (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())) {\n                return cache.getChild(path);\n            }\n        }\n        return null;\n    };\n    /**\n     * @return {boolean}\n     */\n    View.prototype.isEmpty = function () {\n        return this.eventRegistrations_.length === 0;\n    };\n    /**\n     * @param {!EventRegistration} eventRegistration\n     */\n    View.prototype.addEventRegistration = function (eventRegistration) {\n        this.eventRegistrations_.push(eventRegistration);\n    };\n    /**\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n     */\n    View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\n        var cancelEvents = [];\n        if (cancelError) {\n            assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n            var path_1 = this.query_.path;\n            this.eventRegistrations_.forEach(function (registration) {\n                cancelError /** @type {!Error} */ = cancelError;\n                var maybeEvent = registration.createCancelEvent(cancelError, path_1);\n                if (maybeEvent) {\n                    cancelEvents.push(maybeEvent);\n                }\n            });\n        }\n        if (eventRegistration) {\n            var remaining = [];\n            for (var i = 0; i < this.eventRegistrations_.length; ++i) {\n                var existing = this.eventRegistrations_[i];\n                if (!existing.matches(eventRegistration)) {\n                    remaining.push(existing);\n                }\n                else if (eventRegistration.hasAnyCallback()) {\n                    // We're removing just this one\n                    remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n                    break;\n                }\n            }\n            this.eventRegistrations_ = remaining;\n        }\n        else {\n            this.eventRegistrations_ = [];\n        }\n        return cancelEvents;\n    };\n    /**\n     * Applies the given Operation, updates our cache, and returns the appropriate events.\n     *\n     * @param {!Operation} operation\n     * @param {!WriteTreeRef} writesCache\n     * @param {?Node} completeServerCache\n     * @return {!Array.<!Event>}\n     */\n    View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\n        if (operation.type === OperationType.MERGE &&\n            operation.source.queryId !== null) {\n            assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\n            assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\n        }\n        var oldViewCache = this.viewCache_;\n        var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\n        this.processor_.assertIndexed(result.viewCache);\n        assert(result.viewCache.getServerCache().isFullyInitialized() ||\n            !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n        this.viewCache_ = result.viewCache;\n        return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\n    };\n    /**\n     * @param {!EventRegistration} registration\n     * @return {!Array.<!Event>}\n     */\n    View.prototype.getInitialEvents = function (registration) {\n        var eventSnap = this.viewCache_.getEventCache();\n        var initialChanges = [];\n        if (!eventSnap.getNode().isLeafNode()) {\n            var eventNode = eventSnap.getNode();\n            eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n                initialChanges.push(Change.childAddedChange(key, childNode));\n            });\n        }\n        if (eventSnap.isFullyInitialized()) {\n            initialChanges.push(Change.valueChange(eventSnap.getNode()));\n        }\n        return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\n    };\n    /**\n     * @private\n     * @param {!Array.<!Change>} changes\n     * @param {!Node} eventCache\n     * @param {EventRegistration=} eventRegistration\n     * @return {!Array.<!Event>}\n     */\n    View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\n        var registrations = eventRegistration\n            ? [eventRegistration]\n            : this.eventRegistrations_;\n        return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\n    };\n    return View;\n}());\nexport { View };\n\n\n"]}