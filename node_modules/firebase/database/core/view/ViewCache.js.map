{"version":3,"sources":["database/src/database/core/view/ViewCache.ts"],"names":["ViewCache","eventCache_","serverCache_","prototype","updateEventSnap","eventSnap","complete","filtered","updateServerSnap","serverSnap","getEventCache","getCompleteEventSnap","isFullyInitialized","getNode","getServerCache","getCompleteServerSnap","Empty","EMPTY_NODE"],"mappings":";;;;;;;AAgBA;;AACA;;AAGA;;;;;;;AApBA;;;;;;;;;;;;;;;AA2BA,IAAAA,YAAA,YAAA;AACE;;;;;AAKA,WAAAA,SAAA,CACmBC,WADnB,EAEmBC,YAFnB,EAE0C;AADvB,SAAAD,WAAA,GAAAA,WAAA;AACA,SAAAC,YAAA,GAAAA,YAAA;AACf;AAmBJ;;;;;;AAMAF,YAAAG,SAAA,CAAAC,eAAA,GAAA,UACEC,SADF,EAEEC,QAFF,EAGEC,QAHF,EAGmB;AAEjB,WAAO,IAAIP,SAAJ,CACL,yBAAcK,SAAd,EAAyBC,QAAzB,EAAmCC,QAAnC,CADK,EAEL,KAAKL,YAFA,CAAP;AAID,GATD;AAWA;;;;;;AAMAF,YAAAG,SAAA,CAAAK,gBAAA,GAAA,UACEC,UADF,EAEEH,QAFF,EAGEC,QAHF,EAGmB;AAEjB,WAAO,IAAIP,SAAJ,CACL,KAAKC,WADA,EAEL,yBAAcQ,UAAd,EAA0BH,QAA1B,EAAoCC,QAApC,CAFK,CAAP;AAID,GATD;AAWA;;;AAGAP,YAAAG,SAAA,CAAAO,aAAA,GAAA,YAAA;AACE,WAAO,KAAKT,WAAZ;AACD,GAFD;AAIA;;;AAGAD,YAAAG,SAAA,CAAAQ,oBAAA,GAAA,YAAA;AACE,WAAO,KAAKV,WAAL,CAAiBW,kBAAjB,KACH,KAAKX,WAAL,CAAiBY,OAAjB,EADG,GAEH,IAFJ;AAGD,GAJD;AAMA;;;AAGAb,YAAAG,SAAA,CAAAW,cAAA,GAAA,YAAA;AACE,WAAO,KAAKZ,YAAZ;AACD,GAFD;AAIA;;;AAGAF,YAAAG,SAAA,CAAAY,qBAAA,GAAA,YAAA;AACE,WAAO,KAAKb,YAAL,CAAkBU,kBAAlB,KACH,KAAKV,YAAL,CAAkBW,OAAlB,EADG,GAEH,IAFJ;AAGD,GAJD;AA7EA;;;;AAIOb,YAAAgB,KAAA,GAAQ,IAAIhB,SAAJ,CACb,yBACE,2BAAaiB,UADf;AAEE,uBAAsB,KAFxB;AAGE,eAAc,KAHhB,CADa,EAMb,yBACE,2BAAaA,UADf;AAEE,uBAAsB,KAFxB;AAGE,eAAc,KAHhB,CANa,CAAR;AA8ET,SAAAjB,SAAA;AA7FA,CAAA,EAAA;QAAaA,S,GAAAA,S","file":"ViewCache.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { Node } from '../snap/Node';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n *\n * @constructor\n */\nexport class ViewCache {\n  /**\n   *\n   * @param {!CacheNode} eventCache_\n   * @param {!CacheNode} serverCache_\n   */\n  constructor(\n    private readonly eventCache_: CacheNode,\n    private readonly serverCache_: CacheNode\n  ) {}\n\n  /**\n   * @const\n   * @type {ViewCache}\n   */\n  static Empty = new ViewCache(\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    ),\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    )\n  );\n\n  /**\n   * @param {!Node} eventSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateEventSnap(\n    eventSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      new CacheNode(eventSnap, complete, filtered),\n      this.serverCache_\n    );\n  }\n\n  /**\n   * @param {!Node} serverSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateServerSnap(\n    serverSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      this.eventCache_,\n      new CacheNode(serverSnap, complete, filtered)\n    );\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getEventCache(): CacheNode {\n    return this.eventCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteEventSnap(): Node | null {\n    return this.eventCache_.isFullyInitialized()\n      ? this.eventCache_.getNode()\n      : null;\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getServerCache(): CacheNode {\n    return this.serverCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteServerSnap(): Node | null {\n    return this.serverCache_.isFullyInitialized()\n      ? this.serverCache_.getNode()\n      : null;\n  }\n}\n"]}