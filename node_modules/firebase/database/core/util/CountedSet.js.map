{"version":3,"sources":["database/src/database/core/util/CountedSet.ts","database/core/util/CountedSet.js"],"names":["CountedSet","set","prototype","add","item","val","contains","key","get","undefined","remove","clear","isEmpty","count","each","fn","k","v","keys","push"],"mappings":";;;;;;;AAgBA;;AAEA;;;;;AAKA,IAAAA,aAAA,YAAA;AAAA,aAAAA,UAAA,GAAA;AACE,aAAAC,GAAA,GAA0B,EAA1B;AA0ED;AAxEC;;;;AAIAD,eAAAE,SAAA,CAAAC,GAAA,GAAA,UAAIC,IAAJ,EAAaC,GAAb,EAAmB;AACjB,aAAKJ,GAAL,CAASG,IAAT,IAAwBC,QAAQ,IAAR,GAAeA,GAAf,GAAqB,IAA7C;AACD,KAFD;AAIA;;;;AAIAL,eAAAE,SAAA,CAAAI,QAAA,GAAA,UAASC,GAAT,EAAe;AACb,eAAO,mBAAS,KAAKN,GAAd,EAAmBM,GAAnB,CAAP;AACD,KAFD;AAIA;;;;AAIAP,eAAAE,SAAA,CAAAM,GAAA,GAAA,UAAIJ,IAAJ,EAAW;AACT,eAAO,KAAKE,QAAL,CAAcF,IAAd,IAAsB,KAAKH,GAAL,CAASG,IAAT,CAAtB,GAA8CK,SAArD;AACD,KAFD;AAIA;;;AAGAT,eAAAE,SAAA,CAAAQ,MAAA,GAAA,UAAON,IAAP,EAAc;AACZ,eAAO,KAAKH,GAAL,CAASG,IAAT,CAAP;AACD,KAFD;AAIA;;;AAGAJ,eAAAE,SAAA,CAAAS,KAAA,GAAA,YAAA;AACE,aAAKV,GAAL,GAAW,EAAX;AACD,KAFD;AAIA;;;;AAIAD,eAAAE,SAAA,CAAAU,OAAA,GAAA,YAAA;AACE,eAAO,kBAAQ,KAAKX,GAAb,CAAP;AACD,KAFD;AAIA;;;AAGAD,eAAAE,SAAA,CAAAW,KAAA,GAAA,YAAA;AACE,eAAO,mBAAS,KAAKZ,GAAd,CAAP;AACD,KAFD;AAIA;;;;AAIAD,eAAAE,SAAA,CAAAY,IAAA,GAAA,UAAKC,EAAL,EAA6B;AAC3B,0BAAQ,KAAKd,GAAb,EAAkB,UAACe,CAAD,EAAOC,CAAP,EAAW;AAAK,mBAAAF,GAAGC,CAAH,EAAMC,CAAN,CAAA;AAAQ,SAA1C;AACD,KAFD;AAIA;;;;AAIAjB,eAAAE,SAAA,CAAAgB,IAAA,GAAA,YAAA;AACE,YAAMA,OAAY,EAAlB;AACA,0BAAQ,KAAKjB,GAAb,EAAkB,UAACe,CAAD,EAAK;AACrBE,iBAAKC,IAAL,CAAUH,CAAV;AACD,SAFD;AAGA,eAAOE,IAAP;AACD,KAND;AAOF,WAAAlB,UAAA;AA3EA,CAAA,EAAA,C,CAvBA;;;;;;;;;;;;;;;QC2FSA,U,GAAAA,U","file":"CountedSet.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { isEmpty, getCount, forEach, contains } from '../../../utils/obj';\n\n/**\n * Implements a set with a count of elements.\n *\n * @template K, V\n */\nexport class CountedSet<K, V> {\n  set: { [k: string]: V } = {};\n\n  /**\n   * @param {!K} item\n   * @param {V} val\n   */\n  add(item: K, val: V) {\n    this.set[item as any] = val !== null ? val : true as any;\n  }\n\n  /**\n   * @param {!K} key\n   * @return {boolean}\n   */\n  contains(key: K) {\n    return contains(this.set, key);\n  }\n\n  /**\n   * @param {!K} item\n   * @return {V}\n   */\n  get(item: K): V | void {\n    return this.contains(item) ? this.set[item as any] : undefined;\n  }\n\n  /**\n   * @param {!K} item\n   */\n  remove(item: K) {\n    delete this.set[item as any];\n  }\n\n  /**\n   * Deletes everything in the set\n   */\n  clear() {\n    this.set = {};\n  }\n\n  /**\n   * True if there's nothing in the set\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return isEmpty(this.set);\n  }\n\n  /**\n   * @return {number} The number of items in the set\n   */\n  count(): number {\n    return getCount(this.set);\n  }\n\n  /**\n   * Run a function on each k,v pair in the set\n   * @param {function(K, V)} fn\n   */\n  each(fn: (k: K, v: V) => void) {\n    forEach(this.set, (k: K, v: V) => fn(k, v));\n  }\n\n  /**\n   * Mostly for debugging\n   * @return {Array.<K>} The keys present in this CountedSet\n   */\n  keys(): K[] {\n    const keys: K[] = [];\n    forEach(this.set, (k: K) => {\n      keys.push(k);\n    });\n    return keys;\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { isEmpty, getCount, forEach, contains } from '../../../utils/obj';\n/**\n * Implements a set with a count of elements.\n *\n * @template K, V\n */\nvar CountedSet = (function () {\n    function CountedSet() {\n        this.set = {};\n    }\n    /**\n     * @param {!K} item\n     * @param {V} val\n     */\n    CountedSet.prototype.add = function (item, val) {\n        this.set[item] = val !== null ? val : true;\n    };\n    /**\n     * @param {!K} key\n     * @return {boolean}\n     */\n    CountedSet.prototype.contains = function (key) {\n        return contains(this.set, key);\n    };\n    /**\n     * @param {!K} item\n     * @return {V}\n     */\n    CountedSet.prototype.get = function (item) {\n        return this.contains(item) ? this.set[item] : undefined;\n    };\n    /**\n     * @param {!K} item\n     */\n    CountedSet.prototype.remove = function (item) {\n        delete this.set[item];\n    };\n    /**\n     * Deletes everything in the set\n     */\n    CountedSet.prototype.clear = function () {\n        this.set = {};\n    };\n    /**\n     * True if there's nothing in the set\n     * @return {boolean}\n     */\n    CountedSet.prototype.isEmpty = function () {\n        return isEmpty(this.set);\n    };\n    /**\n     * @return {number} The number of items in the set\n     */\n    CountedSet.prototype.count = function () {\n        return getCount(this.set);\n    };\n    /**\n     * Run a function on each k,v pair in the set\n     * @param {function(K, V)} fn\n     */\n    CountedSet.prototype.each = function (fn) {\n        forEach(this.set, function (k, v) { return fn(k, v); });\n    };\n    /**\n     * Mostly for debugging\n     * @return {Array.<K>} The keys present in this CountedSet\n     */\n    CountedSet.prototype.keys = function () {\n        var keys = [];\n        forEach(this.set, function (k) {\n            keys.push(k);\n        });\n        return keys;\n    };\n    return CountedSet;\n}());\nexport { CountedSet };\n\n\n"]}