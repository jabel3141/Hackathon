{"version":3,"sources":["database/src/database/core/util/ServerValues.ts"],"names":["generateWithValues","values","Date","getTime","resolveDeferredValue","value","serverValues","resolveDeferredValueTree","tree","resolvedTree","forEachTree","path","node","remember","resolveDeferredValueSnapshot","rawPri","getPriority","val","priority","newNode","isLeafNode","leafNode","getValue","childrenNode","updatePriority","forEachChild","childName","childNode","newChildNode","updateImmediateChild"],"mappings":";;;;;;;8QAAA;;;;;;;;;;;;;;;;;AAgBA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAIA;;;;;AAKO,IAAMA,kDAAqB,SAArBA,kBAAqB,CAASC,MAAT,EAE1B;AACNA,aAASA,UAAU,EAAnB;AACAA,WAAO,WAAP,IAAsBA,OAAO,WAAP,KAAuB,IAAIC,IAAJ,GAAWC,OAAX,EAA7C;AACA,WAAOF,MAAP;AACD,CANM;AAQP;;;;;;;AAOO,IAAMG,sDAAuB,SAAvBA,oBAAuB,CAClCC,KADkC,EAElCC,YAFkC,EAEA;AAElC,QAAI,CAACD,KAAD,IAAU,QAAOA,KAAP,yCAAOA,KAAP,OAAiB,QAA/B,EAAyC;AACvC,eAAOA,KAAP;AACD,KAFD,MAEO;AACL,4BAAO,SAASA,KAAhB,EAAuB,2CAAvB;AACA,eAAOC,aAAaD,MAAM,KAAN,CAAb,CAAP;AACD;AACF,CAVM;AAYP;;;;;;;AAOO,IAAME,8DAA2B,SAA3BA,wBAA2B,CACtCC,IADsC,EAEtCF,YAFsC,EAElB;AAEpB,QAAMG,eAAe,4CAArB;AACAD,SAAKE,WAAL,CAAiB,eAAS,EAAT,CAAjB,EAA+B,UAASC,IAAT,EAAeC,IAAf,EAAmB;AAChDH,qBAAaI,QAAb,CACEF,IADF,EAEEG,6BAA6BF,IAA7B,EAAmCN,YAAnC,CAFF;AAID,KALD;AAMA,WAAOG,YAAP;AACD,CAZM;AAcP;;;;;;;;AAQO,IAAMK,sEAA+B,SAA/BA,4BAA+B,CAC1CF,IAD0C,EAE1CN,YAF0C,EAEtB;AAEpB,QAAMS,SAASH,KAAKI,WAAL,GAAmBC,GAAnB,EAAf;AAMA,QAAMC,WAAWd,qBAAqBW,MAArB,EAA6BT,YAA7B,CAAjB;AACA,QAAIa,OAAJ;AAEA,QAAIP,KAAKQ,UAAL,EAAJ,EAAuB;AACrB,YAAMC,WAAWT,IAAjB;AACA,YAAMP,QAAQD,qBAAqBiB,SAASC,QAAT,EAArB,EAA0ChB,YAA1C,CAAd;AACA,YACED,UAAUgB,SAASC,QAAT,EAAV,IACAJ,aAAaG,SAASL,WAAT,GAAuBC,GAAvB,EAFf,EAGE;AACA,mBAAO,uBAAaZ,KAAb,EAAoB,gCAAaa,QAAb,CAApB,CAAP;AACD,SALD,MAKO;AACL,mBAAON,IAAP;AACD;AACF,KAXD,MAWO;AACL,YAAMW,eAAeX,IAArB;AACAO,kBAAUI,YAAV;AACA,YAAIL,aAAaK,aAAaP,WAAb,GAA2BC,GAA3B,EAAjB,EAAmD;AACjDE,sBAAUA,QAAQK,cAAR,CAAuB,uBAAaN,QAAb,CAAvB,CAAV;AACD;AACDK,qBAAaE,YAAb,gCAA0C,UAASC,SAAT,EAAoBC,SAApB,EAA6B;AACrE,gBAAMC,eAAed,6BACnBa,SADmB,EAEnBrB,YAFmB,CAArB;AAIA,gBAAIsB,iBAAiBD,SAArB,EAAgC;AAC9BR,0BAAUA,QAAQU,oBAAR,CAA6BH,SAA7B,EAAwCE,YAAxC,CAAV;AACD;AACF,SARD;AASA,eAAOT,OAAP;AACD;AACF,CAzCM","file":"ServerValues.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../../utils/assert';\nimport { Path } from './Path';\nimport { SparseSnapshotTree } from '../SparseSnapshotTree';\nimport { LeafNode } from '../snap/LeafNode';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { ChildrenNode } from '../snap/ChildrenNode';\n\n/**\n * Generate placeholders for deferred values.\n * @param {?Object} values\n * @return {!Object}\n */\nexport const generateWithValues = function(values: {\n  [k: string]: any;\n} | null): { [k: string]: any } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n * @param {(Object|string|number|boolean)} value\n * @param {!Object} serverValues\n * @return {!(string|number|boolean)}\n */\nexport const resolveDeferredValue = function(\n  value: { [k: string]: any } | string | number | boolean,\n  serverValues: { [k: string]: any }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  } else {\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\n    return serverValues[value['.sv']];\n  }\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param {!SparseSnapshotTree} tree\n * @param {!Object} serverValues\n * @return {!SparseSnapshotTree}\n */\nexport const resolveDeferredValueTree = function(\n  tree: SparseSnapshotTree,\n  serverValues: Object\n): SparseSnapshotTree {\n  const resolvedTree = new SparseSnapshotTree();\n  tree.forEachTree(new Path(''), function(path, node) {\n    resolvedTree.remember(\n      path,\n      resolveDeferredValueSnapshot(node, serverValues)\n    );\n  });\n  return resolvedTree;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n * @param {!Node} node\n * @param {!Object} serverValues\n * @return {!Node}\n */\nexport const resolveDeferredValueSnapshot = function(\n  node: Node,\n  serverValues: Object\n): Node {\n  const rawPri = node.getPriority().val() as\n    | object\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredValue(rawPri, serverValues);\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredValue(leafNode.getValue(), serverValues);\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, function(childName, childNode) {\n      const newChildNode = resolveDeferredValueSnapshot(\n        childNode,\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n};\n"]}