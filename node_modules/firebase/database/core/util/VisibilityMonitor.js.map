{"version":3,"sources":["database/src/database/core/util/VisibilityMonitor.ts","database/core/util/VisibilityMonitor.js"],"names":["__extends","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","VisibilityMonitor","_super","_this","call","hidden","visibilityChange","document","addEventListener","visible_","visible","trigger","getInstance","getInitialEvent","eventType"],"mappings":";;;;;;;AAgBA;;AACA;;AAjBA;;;;;;;;;;;;;;;ACeA,IAAIA,YAAa,aAAQ,UAAKA,SAAd,IAA6B,YAAY;AACrD,QAAIC,gBAAgBC,OAAOC,cAAP,IACf,EAAEC,WAAW,EAAb,cAA6BC,KAA7B,IAAsC,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAAED,UAAEF,SAAF,GAAcG,CAAd;AAAkB,KAD3D,IAEhB,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,aAAK,IAAIC,CAAT,IAAcD,CAAd;AAAiB,gBAAIA,EAAEE,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBF,EAAEE,CAAF,IAAOD,EAAEC,CAAF,CAAP;AAA1C;AAAwD,KAF9E;AAGA,WAAO,UAAUF,CAAV,EAAaC,CAAb,EAAgB;AACnBN,sBAAcK,CAAd,EAAiBC,CAAjB;AACA,iBAASG,EAAT,GAAc;AAAE,iBAAKC,WAAL,GAAmBL,CAAnB;AAAuB;AACvCA,UAAEM,SAAF,GAAcL,MAAM,IAAN,GAAaL,OAAOW,MAAP,CAAcN,CAAd,CAAb,IAAiCG,GAAGE,SAAH,GAAeL,EAAEK,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,KAJD;AAKH,CAT2C,EAA5C;;ADMA;;;AAGA,IAAAI,oBAAA,UAAAC,MAAA,EAAA;AAAuCf,cAAAc,iBAAA,EAAAC,MAAA;AAOrC,aAAAD,iBAAA,GAAA;AAAA,YAAAE,QACED,OAAAE,IAAA,CAAA,IAAA,EAAM,CAAC,SAAD,CAAN,KAAkB,IADpB;AAEE,YAAIC,MAAJ;AACA,YAAIC,gBAAJ;AACA,YACE,OAAOC,QAAP,KAAoB,WAApB,IACA,OAAOA,SAASC,gBAAhB,KAAqC,WAFvC,EAGE;AACA,gBAAI,OAAOD,SAAS,QAAT,CAAP,KAA8B,WAAlC,EAA+C;AAC7C;AACAD,mCAAmB,kBAAnB;AACAD,yBAAS,QAAT;AACD,aAJD,MAIO,IAAI,OAAOE,SAAS,WAAT,CAAP,KAAiC,WAArC,EAAkD;AACvDD,mCAAmB,qBAAnB;AACAD,yBAAS,WAAT;AACD,aAHM,MAGA,IAAI,OAAOE,SAAS,UAAT,CAAP,KAAgC,WAApC,EAAiD;AACtDD,mCAAmB,oBAAnB;AACAD,yBAAS,UAAT;AACD,aAHM,MAGA,IAAI,OAAOE,SAAS,cAAT,CAAP,KAAoC,WAAxC,EAAqD;AAC1DD,mCAAmB,wBAAnB;AACAD,yBAAS,cAAT;AACD;AACF;AAED;AACA;AACA;AACA;AACAF,cAAKM,QAAL,GAAgB,IAAhB;AAEA,YAAIH,gBAAJ,EAAsB;AACpBC,qBAASC,gBAAT,CACEF,gBADF,EAEE,YAAA;AACE,oBAAMI,UAAU,CAACH,SAASF,MAAT,CAAjB;AACA,oBAAIK,YAAYP,MAAKM,QAArB,EAA+B;AAC7BN,0BAAKM,QAAL,GAAgBC,OAAhB;AACAP,0BAAKQ,OAAL,CAAa,SAAb,EAAwBD,OAAxB;AACD;AACF,aARH,EASE,KATF;AAWD;ACHG,eAAOP,KAAP;ADIL;AA/CMF,sBAAAW,WAAA,GAAP,YAAA;AACE,eAAO,IAAIX,iBAAJ,EAAP;AACD,KAFM;AAiDP;;;;AAIAA,sBAAAF,SAAA,CAAAc,eAAA,GAAA,UAAgBC,SAAhB,EAAiC;AAC/B,4BAAOA,cAAc,SAArB,EAAgC,yBAAyBA,SAAzD;AACA,eAAO,CAAC,KAAKL,QAAN,CAAP;AACD,KAHD;AAIF,WAAAR,iBAAA;AA5DA,CAAA,4BAAA;QC6DSA,iB,GAAAA,iB","file":"VisibilityMonitor.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { EventEmitter } from './EventEmitter';\nimport { assert } from '../../../utils/assert';\n\ndeclare const document: any;\n\n/**\n * @extends {EventEmitter}\n */\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { EventEmitter } from './EventEmitter';\nimport { assert } from '../../../utils/assert';\n/**\n * @extends {EventEmitter}\n */\nvar VisibilityMonitor = (function (_super) {\n    __extends(VisibilityMonitor, _super);\n    function VisibilityMonitor() {\n        var _this = _super.call(this, ['visible']) || this;\n        var hidden;\n        var visibilityChange;\n        if (typeof document !== 'undefined' &&\n            typeof document.addEventListener !== 'undefined') {\n            if (typeof document['hidden'] !== 'undefined') {\n                // Opera 12.10 and Firefox 18 and later support\n                visibilityChange = 'visibilitychange';\n                hidden = 'hidden';\n            }\n            else if (typeof document['mozHidden'] !== 'undefined') {\n                visibilityChange = 'mozvisibilitychange';\n                hidden = 'mozHidden';\n            }\n            else if (typeof document['msHidden'] !== 'undefined') {\n                visibilityChange = 'msvisibilitychange';\n                hidden = 'msHidden';\n            }\n            else if (typeof document['webkitHidden'] !== 'undefined') {\n                visibilityChange = 'webkitvisibilitychange';\n                hidden = 'webkitHidden';\n            }\n        }\n        // Initially, we always assume we are visible. This ensures that in browsers\n        // without page visibility support or in cases where we are never visible\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n        // reconnects\n        _this.visible_ = true;\n        if (visibilityChange) {\n            document.addEventListener(visibilityChange, function () {\n                var visible = !document[hidden];\n                if (visible !== _this.visible_) {\n                    _this.visible_ = visible;\n                    _this.trigger('visible', visible);\n                }\n            }, false);\n        }\n        return _this;\n    }\n    VisibilityMonitor.getInstance = function () {\n        return new VisibilityMonitor();\n    };\n    /**\n     * @param {!string} eventType\n     * @return {Array.<boolean>}\n     */\n    VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n        return [this.visible_];\n    };\n    return VisibilityMonitor;\n}(EventEmitter));\nexport { VisibilityMonitor };\n\n\n"]}