{"version":3,"sources":["database/core/src/database/core/snap/indexes/PathIndex.ts","database/core/snap/indexes/PathIndex.js"],"names":["__extends","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","PathIndex","_super","indexPath_","_this","call","isEmpty","getFront","extractChild","snap","getChild","isDefinedOn","node","compare","a","aChild","bChild","indexCmp","compareTo","name","makePost","indexValue","valueNode","EMPTY_NODE","updateChild","maxPost","toString","slice","join"],"mappings":"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","file":"PathIndex.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../../../utils/assert';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { Index } from './Index';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\nimport { Path } from '../../util/Path';\n\n/**\n * @param {!Path} indexPath\n * @constructor\n * @extends {Index}\n */\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !indexPath_.isEmpty() && indexPath_.getFront() !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  /**\n   * @param {!Node} snap\n   * @return {!Node}\n   * @protected\n   */\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.indexPath_.slice().join('/');\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { assert } from '../../../../utils/assert';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { Index } from './Index';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n/**\n * @param {!Path} indexPath\n * @constructor\n * @extends {Index}\n */\nvar PathIndex = (function (_super) {\n    __extends(PathIndex, _super);\n    function PathIndex(indexPath_) {\n        var _this = _super.call(this) || this;\n        _this.indexPath_ = indexPath_;\n        assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n        return _this;\n    }\n    /**\n     * @param {!Node} snap\n     * @return {!Node}\n     * @protected\n     */\n    PathIndex.prototype.extractChild = function (snap) {\n        return snap.getChild(this.indexPath_);\n    };\n    /**\n     * @inheritDoc\n     */\n    PathIndex.prototype.isDefinedOn = function (node) {\n        return !node.getChild(this.indexPath_).isEmpty();\n    };\n    /**\n     * @inheritDoc\n     */\n    PathIndex.prototype.compare = function (a, b) {\n        var aChild = this.extractChild(a.node);\n        var bChild = this.extractChild(b.node);\n        var indexCmp = aChild.compareTo(bChild);\n        if (indexCmp === 0) {\n            return nameCompare(a.name, b.name);\n        }\n        else {\n            return indexCmp;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    PathIndex.prototype.makePost = function (indexValue, name) {\n        var valueNode = nodeFromJSON(indexValue);\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n        return new NamedNode(name, node);\n    };\n    /**\n     * @inheritDoc\n     */\n    PathIndex.prototype.maxPost = function () {\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n        return new NamedNode(MAX_NAME, node);\n    };\n    /**\n     * @inheritDoc\n     */\n    PathIndex.prototype.toString = function () {\n        return this.indexPath_.slice().join('/');\n    };\n    return PathIndex;\n}(Index));\nexport { PathIndex };\n\n\n"]}