{"version":3,"sources":["database/core/src/database/core/snap/indexes/ValueIndex.ts","database/core/snap/indexes/ValueIndex.js"],"names":["__extends","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","ValueIndex","_super","apply","arguments","compare","a","indexCmp","node","compareTo","name","isDefinedOn","indexedValueChanged","oldNode","newNode","equals","minPost","MIN","maxPost","MAX","makePost","indexValue","valueNode","toString","VALUE_INDEX"],"mappings":";;;;;;;AAgBA;;AACA;;AACA;;AACA;;AAnBA;;;;;;;;;;;;;;;ACeA,IAAIA,YAAa,aAAQ,UAAKA,SAAd,IAA6B,YAAY;AACrD,QAAIC,gBAAgBC,OAAOC,cAAP,IACf,EAAEC,WAAW,EAAb,cAA6BC,KAA7B,IAAsC,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAAED,UAAEF,SAAF,GAAcG,CAAd;AAAkB,KAD3D,IAEhB,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,aAAK,IAAIC,CAAT,IAAcD,CAAd;AAAiB,gBAAIA,EAAEE,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBF,EAAEE,CAAF,IAAOD,EAAEC,CAAF,CAAP;AAA1C;AAAwD,KAF9E;AAGA,WAAO,UAAUF,CAAV,EAAaC,CAAb,EAAgB;AACnBN,sBAAcK,CAAd,EAAiBC,CAAjB;AACA,iBAASG,EAAT,GAAc;AAAE,iBAAKC,WAAL,GAAmBL,CAAnB;AAAuB;AACvCA,UAAEM,SAAF,GAAcL,MAAM,IAAN,GAAaL,OAAOW,MAAP,CAAcN,CAAd,CAAb,IAAiCG,GAAGE,SAAH,GAAeL,EAAEK,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,KAJD;AAKH,CAT2C,EAA5C;;ADMA;;;;;AAKA,IAAAI,aAAA,UAAAC,MAAA,EAAA;AAAgCf,cAAAc,UAAA,EAAAC,MAAA;AAAhC,aAAAD,UAAA,GAAA;ACWQ,eAAOC,WAAW,IAAX,IAAmBA,OAAOC,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAA3D;AD8CP;AAxDC;;;AAGAH,eAAAF,SAAA,CAAAM,OAAA,GAAA,UAAQC,CAAR,EAAsBZ,CAAtB,EAAkC;AAChC,YAAMa,WAAWD,EAAEE,IAAF,CAAOC,SAAP,CAAiBf,EAAEc,IAAnB,CAAjB;AACA,YAAID,aAAa,CAAjB,EAAoB;AAClB,mBAAO,uBAAYD,EAAEI,IAAd,EAAoBhB,EAAEgB,IAAtB,CAAP;AACD,SAFD,MAEO;AACL,mBAAOH,QAAP;AACD;AACF,KAPD;AASA;;;AAGAN,eAAAF,SAAA,CAAAY,WAAA,GAAA,UAAYH,IAAZ,EAAsB;AACpB,eAAO,IAAP;AACD,KAFD;AAIA;;;AAGAP,eAAAF,SAAA,CAAAa,mBAAA,GAAA,UAAoBC,OAApB,EAAmCC,OAAnC,EAAgD;AAC9C,eAAO,CAACD,QAAQE,MAAR,CAAeD,OAAf,CAAR;AACD,KAFD;AAIA;;;AAGAb,eAAAF,SAAA,CAAAiB,OAAA,GAAA,YAAA;AACE,eAAQ,gBAAkBC,GAA1B;AACD,KAFD;AAIA;;;AAGAhB,eAAAF,SAAA,CAAAmB,OAAA,GAAA,YAAA;AACE,eAAQ,gBAAkBC,GAA1B;AACD,KAFD;AAIA;;;;;AAKAlB,eAAAF,SAAA,CAAAqB,QAAA,GAAA,UAASC,UAAT,EAA6BX,IAA7B,EAAyC;AACvC,YAAMY,YAAY,gCAAaD,UAAb,CAAlB;AACA,eAAO,oBAAcX,IAAd,EAAoBY,SAApB,CAAP;AACD,KAHD;AAKA;;;AAGArB,eAAAF,SAAA,CAAAwB,QAAA,GAAA,YAAA;AACE,eAAO,QAAP;AACD,KAFD;AAGF,WAAAtB,UAAA;AAzDA,CAAA,cAAA;QCkESA,U,GAAAA,U;ADPF,IAAMuB,oCAAc,IAAIvB,UAAJ,EAApB","file":"ValueIndex.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Index } from './Index';\nimport { NamedNode, Node } from '../Node';\nimport { nameCompare } from '../../util/util';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class ValueIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return (NamedNode as any).MAX;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Index } from './Index';\nimport { NamedNode } from '../Node';\nimport { nameCompare } from '../../util/util';\nimport { nodeFromJSON } from '../nodeFromJSON';\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nvar ValueIndex = (function (_super) {\n    __extends(ValueIndex, _super);\n    function ValueIndex() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @inheritDoc\n     */\n    ValueIndex.prototype.compare = function (a, b) {\n        var indexCmp = a.node.compareTo(b.node);\n        if (indexCmp === 0) {\n            return nameCompare(a.name, b.name);\n        }\n        else {\n            return indexCmp;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    ValueIndex.prototype.isDefinedOn = function (node) {\n        return true;\n    };\n    /**\n     * @inheritDoc\n     */\n    ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n        return !oldNode.equals(newNode);\n    };\n    /**\n     * @inheritDoc\n     */\n    ValueIndex.prototype.minPost = function () {\n        return NamedNode.MIN;\n    };\n    /**\n     * @inheritDoc\n     */\n    ValueIndex.prototype.maxPost = function () {\n        return NamedNode.MAX;\n    };\n    /**\n     * @param {*} indexValue\n     * @param {string} name\n     * @return {!NamedNode}\n     */\n    ValueIndex.prototype.makePost = function (indexValue, name) {\n        var valueNode = nodeFromJSON(indexValue);\n        return new NamedNode(name, valueNode);\n    };\n    /**\n     * @return {!string} String representation for inclusion in a query spec\n     */\n    ValueIndex.prototype.toString = function () {\n        return '.value';\n    };\n    return ValueIndex;\n}(Index));\nexport { ValueIndex };\nexport var VALUE_INDEX = new ValueIndex();\n\n\n"]}