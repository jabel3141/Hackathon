{"version":3,"sources":["database/core/src/database/core/snap/indexes/Index.ts","database/core/snap/indexes/Index.js"],"names":["Index","prototype","getCompare","compare","bind","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN"],"mappings":";;;;;;;AAgBA;;AACA;;AAGA;;;;AApBA;;;;;;;;;;;;;;;AAwBA,IAAAA,QAAA,YAAA;AAAA,WAAAA,KAAA,GAAA,CA6DC;AA/CC;;;;AAIAA,QAAAC,SAAA,CAAAC,UAAA,GAAA,YAAA;AACE,WAAO,KAAKC,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAP;AACD,GAFD;AAIA;;;;;;;;AAQAJ,QAAAC,SAAA,CAAAI,mBAAA,GAAA,UAAoBC,OAApB,EAAmCC,OAAnC,EAAgD;AAC9C,QAAMC,aAAa,oCAAwBF,OAAxB,CAAnB;AACA,QAAMG,aAAa,oCAAwBF,OAAxB,CAAnB;AACA,WAAO,KAAKJ,OAAL,CAAaK,UAAb,EAAyBC,UAAzB,MAAyC,CAAhD;AACD,GAJD;AAMA;;;;AAIAT,QAAAC,SAAA,CAAAS,OAAA,GAAA,YAAA;AACE,WAAQ,gBAAkBC,GAA1B;AACD,GAFD;AAqBF,SAAAX,KAAA;AA7DA,CAAA,EAAA;QC6BSA,K,GAAAA,K","file":"Index.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Node, NamedNode } from '../Node';\nimport { MIN_NAME, MAX_NAME } from '../../util/util';\nimport { Comparator } from '../../util/SortedMap';\n\n/**\n *\n * @constructor\n */\nexport abstract class Index {\n  /**\n   * @param {!NamedNode} a\n   * @param {!NamedNode} b\n   * @return {number}\n   */\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  /**\n   * @param {!Node} node\n   * @return {boolean}\n   */\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   * @param {!Node} oldNode\n   * @param {!Node} newNode\n   * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  abstract makePost(indexValue: any, name: string): NamedNode;\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { NamedNode } from '../Node';\nimport { MIN_NAME } from '../../util/util';\n/**\n *\n * @constructor\n */\nvar Index = (function () {\n    function Index() {\n    }\n    /**\n     * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\n     * this index\n     */\n    Index.prototype.getCompare = function () {\n        return this.compare.bind(this);\n    };\n    /**\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n     *\n     * @param {!Node} oldNode\n     * @param {!Node} newNode\n     * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\n     */\n    Index.prototype.indexedValueChanged = function (oldNode, newNode) {\n        var oldWrapped = new NamedNode(MIN_NAME, oldNode);\n        var newWrapped = new NamedNode(MIN_NAME, newNode);\n        return this.compare(oldWrapped, newWrapped) !== 0;\n    };\n    /**\n     * @return {!NamedNode} a node wrapper that will sort equal to or less than\n     * any other node wrapper, using this index\n     */\n    Index.prototype.minPost = function () {\n        return NamedNode.MIN;\n    };\n    return Index;\n}());\nexport { Index };\n\n\n"]}