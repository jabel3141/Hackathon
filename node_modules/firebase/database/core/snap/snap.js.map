{"version":3,"sources":["database/src/database/core/snap/snap.ts"],"names":["setMaxNode","MAX_NODE","val","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","isEmpty","getPriority"],"mappings":";;;;;;;8QAAA;;;;;;;;;;;;;;;;;QAuBMA,U,GAAAA,U;;AAPN;;AACA;;AACA;;AAGA,IAAIC,QAAJ;AAEM,SAAAD,UAAA,CAAqBE,GAArB,EAA8B;AAClCD,eAAWC,GAAX;AACD;AAED;;;;AAIO,IAAMC,8CAAmB,SAAnBA,gBAAmB,CAASC,QAAT,EAAkC;AAChE,QAAI,OAAOA,QAAP,KAAoB,QAAxB,EACE,OAAO,YAAY,iCAAsBA,QAAtB,CAAnB,CADF,KAEK,OAAO,YAAYA,QAAnB;AACN,CAJM;AAMP;;;;;AAKO,IAAMC,sDAAuB,SAAvBA,oBAAuB,CAASC,YAAT,EAA2B;AAC7D,QAAIA,aAAaC,UAAb,EAAJ,EAA+B;AAC7B,YAAML,MAAMI,aAAaJ,GAAb,EAAZ;AACA,4BACE,OAAOA,GAAP,KAAe,QAAf,IACE,OAAOA,GAAP,KAAe,QADjB,IAEG,QAAOA,GAAP,yCAAOA,GAAP,OAAe,QAAf,IAA2B,mBAASA,GAAT,EAAc,KAAd,CAHhC,EAIE,sCAJF;AAMD,KARD,MAQO;AACL,4BACEI,iBAAiBL,QAAjB,IAA6BK,aAAaE,OAAb,EAD/B,EAEE,8BAFF;AAID;AACD;AACA,wBACEF,iBAAiBL,QAAjB,IAA6BK,aAAaG,WAAb,GAA2BD,OAA3B,EAD/B,EAEE,oDAFF;AAID,CApBM","file":"snap.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../../utils/assert';\nimport { doubleToIEEE754String } from '../util/util';\nimport { contains } from '../../../utils/obj';\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @param {(!string|!number)} priority\n * @return {!string}\n */\nexport const priorityHashText = function(priority: string | number): string {\n  if (typeof priority === 'number')\n    return 'number:' + doubleToIEEE754String(priority);\n  else return 'string:' + priority;\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n *\n * @param {!Node} priorityNode\n */\nexport const validatePriorityNode = function(priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n"]}