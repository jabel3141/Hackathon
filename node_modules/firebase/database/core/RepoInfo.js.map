{"version":3,"sources":["src/database/core/RepoInfo.ts","database/core/RepoInfo.js"],"names":["RepoInfo","host","secure","namespace","webSocketOnly","persistenceKey","toLowerCase","domain","substr","indexOf","internalHost","get","prototype","needsQueryParam","isCacheableHost","isDemoHost","isCustomHost","updateHost","newHost","set","connectionURL","type","params","connURL","Error","pairs","key","value","push","join","toString","str","toURLString"],"mappings":"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","file":"RepoInfo.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../utils/assert';\nimport { forEach } from '../../utils/obj';\nimport { PersistentStorage } from './storage/storage';\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\n/**\n * A class that holds metadata about a Repo object\n *\n * @constructor\n */\nexport class RepoInfo {\n  host: string;\n  domain: string;\n  internalHost: string;\n\n  /**\n   * @param {string} host Hostname portion of the url for the repo\n   * @param {boolean} secure Whether or not this repo is accessed over ssl\n   * @param {string} namespace The namespace represented by the repo\n   * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\n   * @param {string=} persistenceKey Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public secure: boolean,\n    public namespace: string,\n    public webSocketOnly: boolean,\n    public persistenceKey: string = ''\n  ) {\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this.host;\n  }\n\n  needsQueryParam(): boolean {\n    return this.host !== this.internalHost;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isDemoHost() {\n    return this.domain === 'firebaseio-demo.com';\n  }\n\n  isCustomHost() {\n    return (\n      this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  updateHost(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  }\n\n  /**\n   * Returns the websocket URL for this repo\n   * @param {string} type of connection\n   * @param {Object} params list\n   * @return {string} The URL for this repo\n   */\n  connectionURL(type: string, params: { [k: string]: string }): string {\n    assert(typeof type === 'string', 'typeof type must == string');\n    assert(typeof params === 'object', 'typeof params must == object');\n\n    let connURL: string;\n    if (type === WEBSOCKET) {\n      connURL =\n        (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === LONG_POLLING) {\n      connURL =\n        (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n\n    const pairs: string[] = [];\n\n    forEach(params, (key: string, value: string) => {\n      pairs.push(key + '=' + value);\n    });\n\n    return connURL + pairs.join('&');\n  }\n\n  /** @return {string} */\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  /** @return {string} */\n  toURLString(): string {\n    return (this.secure ? 'https://' : 'http://') + this.host;\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { assert } from '../../utils/assert';\nimport { forEach } from '../../utils/obj';\nimport { PersistentStorage } from './storage/storage';\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n/**\n * A class that holds metadata about a Repo object\n *\n * @constructor\n */\nvar RepoInfo = (function () {\n    /**\n     * @param {string} host Hostname portion of the url for the repo\n     * @param {boolean} secure Whether or not this repo is accessed over ssl\n     * @param {string} namespace The namespace represented by the repo\n     * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\n     * @param {string=} persistenceKey Override the default session persistence storage key\n     */\n    function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey) {\n        if (persistenceKey === void 0) { persistenceKey = ''; }\n        this.secure = secure;\n        this.namespace = namespace;\n        this.webSocketOnly = webSocketOnly;\n        this.persistenceKey = persistenceKey;\n        this.host = host.toLowerCase();\n        this.domain = this.host.substr(this.host.indexOf('.') + 1);\n        this.internalHost = PersistentStorage.get('host:' + host) || this.host;\n    }\n    RepoInfo.prototype.needsQueryParam = function () {\n        return this.host !== this.internalHost;\n    };\n    RepoInfo.prototype.isCacheableHost = function () {\n        return this.internalHost.substr(0, 2) === 's-';\n    };\n    RepoInfo.prototype.isDemoHost = function () {\n        return this.domain === 'firebaseio-demo.com';\n    };\n    RepoInfo.prototype.isCustomHost = function () {\n        return (this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com');\n    };\n    RepoInfo.prototype.updateHost = function (newHost) {\n        if (newHost !== this.internalHost) {\n            this.internalHost = newHost;\n            if (this.isCacheableHost()) {\n                PersistentStorage.set('host:' + this.host, this.internalHost);\n            }\n        }\n    };\n    /**\n     * Returns the websocket URL for this repo\n     * @param {string} type of connection\n     * @param {Object} params list\n     * @return {string} The URL for this repo\n     */\n    RepoInfo.prototype.connectionURL = function (type, params) {\n        assert(typeof type === 'string', 'typeof type must == string');\n        assert(typeof params === 'object', 'typeof params must == object');\n        var connURL;\n        if (type === WEBSOCKET) {\n            connURL =\n                (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n        }\n        else if (type === LONG_POLLING) {\n            connURL =\n                (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n        }\n        else {\n            throw new Error('Unknown connection type: ' + type);\n        }\n        if (this.needsQueryParam()) {\n            params['ns'] = this.namespace;\n        }\n        var pairs = [];\n        forEach(params, function (key, value) {\n            pairs.push(key + '=' + value);\n        });\n        return connURL + pairs.join('&');\n    };\n    /** @return {string} */\n    RepoInfo.prototype.toString = function () {\n        var str = this.toURLString();\n        if (this.persistenceKey) {\n            str += '<' + this.persistenceKey + '>';\n        }\n        return str;\n    };\n    /** @return {string} */\n    RepoInfo.prototype.toURLString = function () {\n        return (this.secure ? 'https://' : 'http://') + this.host;\n    };\n    return RepoInfo;\n}());\nexport { RepoInfo };\n\n\n"]}