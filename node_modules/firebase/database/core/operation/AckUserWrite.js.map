{"version":3,"sources":["database/src/database/core/operation/AckUserWrite.ts","database/core/operation/AckUserWrite.js"],"names":["AckUserWrite","path","affectedTree","revert","type","ACK_USER_WRITE","source","User","prototype","operationForChild","childName","isEmpty","getFront","popFront","value","children","childTree","subtree","Empty"],"mappings":";;;;;;;AAgBA;;AACA;;AACA;;AAGA,IAAAA,eAAA,YAAA;AAOE;;;;;;AAMA,aAAAA,YAAA;AACE,qBAAyBC,IAD3B;AAEE,qBAAyBC,YAF3B;AAGE,qBAAyBC,MAH3B,EAG0C;AAFf,aAAAF,IAAA,GAAAA,IAAA;AACA,aAAAC,YAAA,GAAAA,YAAA;AACA,aAAAC,MAAA,GAAAA,MAAA;AAf3B;AACA,aAAAC,IAAA,GAAO,yBAAcC,cAArB;AAEA;AACA,aAAAC,MAAA,GAAS,2BAAgBC,IAAzB;AAYI;AAEJ;;;AAGAP,iBAAAQ,SAAA,CAAAC,iBAAA,GAAA,UAAkBC,SAAlB,EAAmC;AACjC,YAAI,CAAC,KAAKT,IAAL,CAAUU,OAAV,EAAL,EAA0B;AACxB,gCACE,KAAKV,IAAL,CAAUW,QAAV,OAAyBF,SAD3B,EAEE,+CAFF;AAIA,mBAAO,IAAIV,YAAJ,CACL,KAAKC,IAAL,CAAUY,QAAV,EADK,EAEL,KAAKX,YAFA,EAGL,KAAKC,MAHA,CAAP;AAKD,SAVD,MAUO,IAAI,KAAKD,YAAL,CAAkBY,KAAlB,IAA2B,IAA/B,EAAqC;AAC1C,gCACE,KAAKZ,YAAL,CAAkBa,QAAlB,CAA2BJ,OAA3B,EADF,EAEE,0DAFF;AAIA;AACA,mBAAO,IAAP;AACD,SAPM,MAOA;AACL,gBAAMK,YAAY,KAAKd,YAAL,CAAkBe,OAAlB,CAA0B,eAASP,SAAT,CAA1B,CAAlB;AACA,mBAAO,IAAIV,YAAJ,CAAiB,WAAKkB,KAAtB,EAA6BF,SAA7B,EAAwC,KAAKb,MAA7C,CAAP;AACD;AACF,KAtBD;AAuBF,WAAAH,YAAA;AA7CA,CAAA,EAAA,C,CArBA;;;;;;;;;;;;;;;QCyDSA,Y,GAAAA,Y","file":"AckUserWrite.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../../utils/assert';\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { ImmutableTree } from '../util/ImmutableTree';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = OperationSource.User;\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\n   * @param {!boolean} revert\n   */\n  constructor(\n    /**@inheritDoc */ public path: Path,\n    /**@inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /**@inheritDoc */ public revert: boolean\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): AckUserWrite {\n    if (!this.path.isEmpty()) {\n      assert(\n        this.path.getFront() === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        this.path.popFront(),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(Path.Empty, childTree, this.revert);\n    }\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { assert } from '../../../utils/assert';\nimport { Path } from '../util/Path';\nimport { OperationSource, OperationType } from './Operation';\nvar AckUserWrite = (function () {\n    /**\n     *\n     * @param {!Path} path\n     * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\n     * @param {!boolean} revert\n     */\n    function AckUserWrite(\n        /**@inheritDoc */ path, \n        /**@inheritDoc */ affectedTree, \n        /**@inheritDoc */ revert) {\n        this.path = path;\n        this.affectedTree = affectedTree;\n        this.revert = revert;\n        /** @inheritDoc */\n        this.type = OperationType.ACK_USER_WRITE;\n        /** @inheritDoc */\n        this.source = OperationSource.User;\n    }\n    /**\n     * @inheritDoc\n     */\n    AckUserWrite.prototype.operationForChild = function (childName) {\n        if (!this.path.isEmpty()) {\n            assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\n            return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\n        }\n        else if (this.affectedTree.value != null) {\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\n            // All child locations are affected as well; just return same operation.\n            return this;\n        }\n        else {\n            var childTree = this.affectedTree.subtree(new Path(childName));\n            return new AckUserWrite(Path.Empty, childTree, this.revert);\n        }\n    };\n    return AckUserWrite;\n}());\nexport { AckUserWrite };\n\n\n"]}