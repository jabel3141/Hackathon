{"version":3,"sources":["database/src/database/core/operation/Operation.ts"],"names":["OperationType","OperationSource","fromUser","fromServer","queryId","tagged","User","Server","forServerTaggedQuery"],"mappings":";;;;;;;AAgBA;;AAGA;;;;AAIA,IAAYA,iDAAZ,C,CAvBA;;;;;;;;;;;;;;;;AAuBA,CAAA,UAAYA,aAAZ,EAAyB;AACvBA,gBAAAA,cAAA,WAAA,IAAA,CAAA,IAAA,WAAA;AACAA,gBAAAA,cAAA,OAAA,IAAA,CAAA,IAAA,OAAA;AACAA,gBAAAA,cAAA,gBAAA,IAAA,CAAA,IAAA,gBAAA;AACAA,gBAAAA,cAAA,iBAAA,IAAA,CAAA,IAAA,iBAAA;AACD,CALD,EAAYA,0BAAAA,aAAA,GAAAA,gBAAa,EAAb,CAAZ;AAiCA;;;;;;;AAOA,IAAAC,kBAAA,YAAA;AACE,WAAAA,eAAA,CACSC,QADT,EAESC,UAFT,EAGSC,OAHT,EAISC,MAJT,EAIwB;AAHf,SAAAH,QAAA,GAAAA,QAAA;AACA,SAAAC,UAAA,GAAAA,UAAA;AACA,SAAAC,OAAA,GAAAA,OAAA;AACA,SAAAC,MAAA,GAAAA,MAAA;AAEP,wBAAO,CAACA,MAAD,IAAWF,UAAlB,EAA8B,qCAA9B;AACD;AACD;;;;AAIOF,kBAAAK,IAAA,GAAO,IAAIL,eAAJ;AACZ,eAAc,IADF,EAEZ,KAFY,EAGZ,IAHY;AAIZ,aAAY,KAJA,CAAP;AAOP;;;;AAIOA,kBAAAM,MAAA,GAAS,IAAIN,eAAJ,CACd,KADc;AAEd,iBAAgB,IAFF,EAGd,IAHc;AAId,aAAY,KAJE,CAAT;AAOP;;;;AAIOA,kBAAAO,oBAAA,GAAuB,UAASJ,OAAT,EAAwB;AACpD,WAAO,IAAIH,eAAJ,CACL,KADK;AAEL,mBAAgB,IAFX,EAGLG,OAHK;AAIL,eAAY,IAJP,CAAP;AAMD,GAPM;AAQT,SAAAH,eAAA;AA3CA,CAAA,EAAA;QAAaA,e,GAAAA,e","file":"Operation.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from '../../../utils/assert';\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  /**\n   * @type {!OperationSource}\n   */\n  source: OperationSource;\n\n  /**\n   * @type {!OperationType}\n   */\n  type: OperationType;\n\n  /**\n   * @type {!Path}\n   */\n  path: Path;\n\n  /**\n   * @param {string} childName\n   * @return {?Operation}\n   */\n  operationForChild(childName: string): Operation | null;\n}\n\n/**\n * @param {boolean} fromUser\n * @param {boolean} fromServer\n * @param {?string} queryId\n * @param {boolean} tagged\n * @constructor\n */\nexport class OperationSource {\n  constructor(\n    public fromUser: boolean,\n    public fromServer: boolean,\n    public queryId: string | null,\n    public tagged: boolean\n  ) {\n    assert(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static User = new OperationSource(\n    /*fromUser=*/ true,\n    false,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static Server = new OperationSource(\n    false,\n    /*fromServer=*/ true,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @param {string} queryId\n   * @return {!OperationSource}\n   */\n  static forServerTaggedQuery = function(queryId: string): OperationSource {\n    return new OperationSource(\n      false,\n      /*fromServer=*/ true,\n      queryId,\n      /*tagged=*/ true\n    );\n  };\n}\n"]}