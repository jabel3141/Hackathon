{"version":3,"sources":["src/database/core/AuthTokenProvider.ts","database/core/AuthTokenProvider.js"],"names":["AuthTokenProvider","app_","prototype","getToken","forceRefresh","then","error","code","Promise","reject","addTokenChangeListener","listener","removeTokenChangeListener","notifyForInvalidToken","errorMessage","name","options"],"mappings":";;;;;;;AAgBA;;AAGA;;;AAGA,IAAAA,oBAAA,YAAA;AACE;;;AAGA,aAAAA,iBAAA,CAAoBC,IAApB,EAAqC;AAAjB,aAAAA,IAAA,GAAAA,IAAA;AAAqB;AAEzC;;;;AAIAD,sBAAAE,SAAA,CAAAC,QAAA,GAAA,UAASC,YAAT,EAA8B;AAC5B,eAAO,KAAKH,IAAL,CAAU,UAAV,EAAsB,UAAtB,EAAkCG,YAAlC,EAAgDC,IAAhD,CACL,IADK;AAEL;AACA,kBAASC,KAAT,EAAc;AACZ;AACA;AACA,gBAAIA,SAASA,MAAMC,IAAN,KAAe,4BAA5B,EAA0D;AACxD,+BAAI,gEAAJ;AACA,uBAAO,IAAP;AACD,aAHD,MAGO;AACL,uBAAOC,QAAQC,MAAR,CAAeH,KAAf,CAAP;AACD;AACF,SAZI,CAAP;AAcD,KAfD;AAiBAN,sBAAAE,SAAA,CAAAQ,sBAAA,GAAA,UAAuBC,QAAvB,EAA+D;AAC7D;AACA;AACA,aAAKV,IAAL,CAAU,UAAV,EAAsB,sBAAtB,EAA8CU,QAA9C;AACD,KAJD;AAMAX,sBAAAE,SAAA,CAAAU,yBAAA,GAAA,UAA0BD,QAA1B,EAAkE;AAChE,aAAKV,IAAL,CAAU,UAAV,EAAsB,yBAAtB,EAAiDU,QAAjD;AACD,KAFD;AAIAX,sBAAAE,SAAA,CAAAW,qBAAA,GAAA,YAAA;AACE,YAAIC,eACF,4DACA,KAAKb,IAAL,CAAUc,IADV,GAEA,yDAFA,GAGA,yBAJF;AAKA,YAAI,gBAAgB,KAAKd,IAAL,CAAUe,OAA9B,EAAuC;AACrCF,4BACE,qEACA,8EADA,GAEA,UAHF;AAID,SALD,MAKO,IAAI,oBAAoB,KAAKb,IAAL,CAAUe,OAAlC,EAA2C;AAChDF,4BACE,yEACA,8EADA,GAEA,UAHF;AAID,SALM,MAKA;AACLA,4BACE,qEACA,4DADA,GAEA,uCAHF;AAID;AACD,wBAAKA,YAAL;AACD,KAvBD;AAwBF,WAAAd,iBAAA;AA7DA,CAAA,EAAA,C,CAtBA;;;;;;;;;;;;;;;QCgFSA,iB,GAAAA,iB","file":"AuthTokenProvider.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { log, warn } from './util/util';\nimport { FirebaseApp, FirebaseAuthTokenData } from '../../app/firebase_app';\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class AuthTokenProvider {\n  /**\n   * @param {!FirebaseApp} app_\n   */\n  constructor(private app_: FirebaseApp) {}\n\n  /**\n   * @param {boolean} forceRefresh\n   * @return {!Promise<FirebaseAuthTokenData>}\n   */\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return this.app_['INTERNAL']['getToken'](forceRefresh).then(\n      null,\n      // .catch\n      function(error) {\n        // TODO: Need to figure out all the cases this is raised and whether\n        // this makes sense.\n        if (error && error.code === 'auth/token-not-initialized') {\n          log('Got auth/token-not-initialized error.  Treating as null token.');\n          return null;\n        } else {\n          return Promise.reject(error);\n        }\n      }\n    );\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    this.app_['INTERNAL']['addAuthTokenListener'](listener);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void) {\n    this.app_['INTERNAL']['removeAuthTokenListener'](listener);\n  }\n\n  notifyForInvalidToken() {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.app_.name +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { log, warn } from './util/util';\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nvar AuthTokenProvider = (function () {\n    /**\n     * @param {!FirebaseApp} app_\n     */\n    function AuthTokenProvider(app_) {\n        this.app_ = app_;\n    }\n    /**\n     * @param {boolean} forceRefresh\n     * @return {!Promise<FirebaseAuthTokenData>}\n     */\n    AuthTokenProvider.prototype.getToken = function (forceRefresh) {\n        return this.app_['INTERNAL']['getToken'](forceRefresh).then(null, \n        // .catch\n        function (error) {\n            // TODO: Need to figure out all the cases this is raised and whether\n            // this makes sense.\n            if (error && error.code === 'auth/token-not-initialized') {\n                log('Got auth/token-not-initialized error.  Treating as null token.');\n                return null;\n            }\n            else {\n                return Promise.reject(error);\n            }\n        });\n    };\n    AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\n        // TODO: We might want to wrap the listener and call it with no args to\n        // avoid a leaky abstraction, but that makes removing the listener harder.\n        this.app_['INTERNAL']['addAuthTokenListener'](listener);\n    };\n    AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\n        this.app_['INTERNAL']['removeAuthTokenListener'](listener);\n    };\n    AuthTokenProvider.prototype.notifyForInvalidToken = function () {\n        var errorMessage = 'Provided authentication credentials for the app named \"' +\n            this.app_.name +\n            '\" are invalid. This usually indicates your app was not ' +\n            'initialized correctly. ';\n        if ('credential' in this.app_.options) {\n            errorMessage +=\n                'Make sure the \"credential\" property provided to initializeApp() ' +\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n                    'project.';\n        }\n        else if ('serviceAccount' in this.app_.options) {\n            errorMessage +=\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n                    'project.';\n        }\n        else {\n            errorMessage +=\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n                    'initializeApp() match the values provided for your app at ' +\n                    'https://console.firebase.google.com/.';\n        }\n        warn(errorMessage);\n    };\n    return AuthTokenProvider;\n}());\nexport { AuthTokenProvider };\n\n\n"]}