{"version":3,"sources":["database/src/database/core/storage/DOMStorageWrapper.ts","database/core/storage/DOMStorageWrapper.js"],"names":["DOMStorageWrapper","domStorage_","prefix_","prototype","set","key","value","removeItem","prefixedName_","setItem","get","storedVal","getItem","remove","name","toString"],"mappings":";;;;;;;AAgBA;;AAEA;;;;;;;;;;AAUA,IAAAA,oBAAA,YAAA;AAIE;;;AAGA,aAAAA,iBAAA,CAAoBC,WAApB,EAAwC;AAApB,aAAAA,WAAA,GAAAA,WAAA;AANpB;AACQ,aAAAC,OAAA,GAAU,WAAV;AAKoC;AAE5C;;;;AAIAF,sBAAAG,SAAA,CAAAC,GAAA,GAAA,UAAIC,GAAJ,EAAiBC,KAAjB,EAAkC;AAChC,YAAIA,SAAS,IAAb,EAAmB;AACjB,iBAAKL,WAAL,CAAiBM,UAAjB,CAA4B,KAAKC,aAAL,CAAmBH,GAAnB,CAA5B;AACD,SAFD,MAEO;AACL,iBAAKJ,WAAL,CAAiBQ,OAAjB,CAAyB,KAAKD,aAAL,CAAmBH,GAAnB,CAAzB,EAAkD,qBAAUC,KAAV,CAAlD;AACD;AACF,KAND;AAQA;;;;AAIAN,sBAAAG,SAAA,CAAAO,GAAA,GAAA,UAAIL,GAAJ,EAAe;AACb,YAAMM,YAAY,KAAKV,WAAL,CAAiBW,OAAjB,CAAyB,KAAKJ,aAAL,CAAmBH,GAAnB,CAAzB,CAAlB;AACA,YAAIM,aAAa,IAAjB,EAAuB;AACrB,mBAAO,IAAP;AACD,SAFD,MAEO;AACL,mBAAO,oBAASA,SAAT,CAAP;AACD;AACF,KAPD;AASA;;;AAGAX,sBAAAG,SAAA,CAAAU,MAAA,GAAA,UAAOR,GAAP,EAAkB;AAChB,aAAKJ,WAAL,CAAiBM,UAAjB,CAA4B,KAAKC,aAAL,CAAmBH,GAAnB,CAA5B;AACD,KAFD;AAMA;;;;AAIAL,sBAAAG,SAAA,CAAAK,aAAA,GAAA,UAAcM,IAAd,EAA0B;AACxB,eAAO,KAAKZ,OAAL,GAAeY,IAAtB;AACD,KAFD;AAIAd,sBAAAG,SAAA,CAAAY,QAAA,GAAA,YAAA;AACE,eAAO,KAAKd,WAAL,CAAiBc,QAAjB,EAAP;AACD,KAFD;AAGF,WAAAf,iBAAA;AAtDA,CAAA,EAAA,C,CA5BA;;;;;;;;;;;;;;;QC8ESA,iB,GAAAA,iB","file":"DOMStorageWrapper.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { jsonEval, stringify } from '../../../utils/json';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n * @constructor\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param {string} key The key to save the value under\n   * @param {?Object} value The value being stored, or null to remove the key.\n   */\n  set(key: string, value: any | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @return {*} The value that was stored under this key, or null\n   */\n  get(key: string): any {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  /**\n   * @param {string} key\n   */\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  /**\n   * @param {string} name\n   * @return {string}\n   */\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nimport { jsonEval, stringify } from '../../../utils/json';\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n * @constructor\n */\nvar DOMStorageWrapper = (function () {\n    /**\n     * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\n     */\n    function DOMStorageWrapper(domStorage_) {\n        this.domStorage_ = domStorage_;\n        // Use a prefix to avoid collisions with other stuff saved by the app.\n        this.prefix_ = 'firebase:';\n    }\n    /**\n     * @param {string} key The key to save the value under\n     * @param {?Object} value The value being stored, or null to remove the key.\n     */\n    DOMStorageWrapper.prototype.set = function (key, value) {\n        if (value == null) {\n            this.domStorage_.removeItem(this.prefixedName_(key));\n        }\n        else {\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n        }\n    };\n    /**\n     * @param {string} key\n     * @return {*} The value that was stored under this key, or null\n     */\n    DOMStorageWrapper.prototype.get = function (key) {\n        var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n        if (storedVal == null) {\n            return null;\n        }\n        else {\n            return jsonEval(storedVal);\n        }\n    };\n    /**\n     * @param {string} key\n     */\n    DOMStorageWrapper.prototype.remove = function (key) {\n        this.domStorage_.removeItem(this.prefixedName_(key));\n    };\n    /**\n     * @param {string} name\n     * @return {string}\n     */\n    DOMStorageWrapper.prototype.prefixedName_ = function (name) {\n        return this.prefix_ + name;\n    };\n    DOMStorageWrapper.prototype.toString = function () {\n        return this.domStorage_.toString();\n    };\n    return DOMStorageWrapper;\n}());\nexport { DOMStorageWrapper };\n\n\n"]}