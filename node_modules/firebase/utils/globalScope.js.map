{"version":3,"sources":["../src/utils/globalScope.ts"],"names":["scope","global","self","Function","e","Error","globalScope"],"mappings":";;;;;AAAA;;;;;;;;;;;;;;;AAgBA,IAAIA,KAAJ;AAEA,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjCD,YAAQC,MAAR;AACD,CAFD,MAEO,IAAI,OAAOC,IAAP,KAAgB,WAApB,EAAiC;AACtCF,YAAQE,IAAR;AACD,CAFM,MAEA;AACL,QAAI;AACFF,gBAAQG,SAAS,aAAT,GAAR;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACV,cAAM,IAAIC,KAAJ,CACJ,0EADI,CAAN;AAGD;AACF;AAEM,IAAMC,oCAAcN,KAApB","file":"globalScope.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nlet scope;\n\nif (typeof global !== 'undefined') {\n  scope = global;\n} else if (typeof self !== 'undefined') {\n  scope = self;\n} else {\n  try {\n    scope = Function('return this')();\n  } catch (e) {\n    throw new Error(\n      'polyfill failed because global object is unavailable in this environment'\n    );\n  }\n}\n\nexport const globalScope = scope;\n"]}