{"version":3,"sources":["../src/utils/jwt.ts"],"names":["decode","token","header","claims","data","signature","parts","split","e","isValidTimestamp","now","Math","floor","Date","getTime","validSince","validUntil","hasOwnProperty","issuedAtTime","isValidFormat","decoded","isAdmin"],"mappings":";;;;;;;8QAAA;;;;;;;;;;;;;;;;;AAgBA;;AACA;;AAEA;;;;;;;;;;AAUO,IAAMA,0BAAS,SAATA,MAAS,CAASC,KAAT,EAAc;AAClC,QAAIC,SAAS,EAAb;AAAA,QACEC,SAAS,EADX;AAAA,QAEEC,OAAO,EAFT;AAAA,QAGEC,YAAY,EAHd;AAKA,QAAI;AACF,YAAIC,QAAQL,MAAMM,KAAN,CAAY,GAAZ,CAAZ;AACAL,iBAAS,oBAAS,wBAAaI,MAAM,CAAN,CAAb,KAA0B,EAAnC,CAAT;AACAH,iBAAS,oBAAS,wBAAaG,MAAM,CAAN,CAAb,KAA0B,EAAnC,CAAT;AACAD,oBAAYC,MAAM,CAAN,CAAZ;AACAF,eAAOD,OAAO,GAAP,KAAe,EAAtB;AACA,eAAOA,OAAO,GAAP,CAAP;AACD,KAPD,CAOE,OAAOK,CAAP,EAAU,CAAE;AAEd,WAAO;AACLN,gBAAQA,MADH;AAELC,gBAAQA,MAFH;AAGLC,cAAMA,IAHD;AAILC,mBAAWA;AAJN,KAAP;AAMD,CArBM;AAuBP;;;;;;;;;;;AAWO,IAAMI,8CAAmB,SAAnBA,gBAAmB,CAASR,KAAT,EAAc;AAC5C,QAAIE,SAASH,OAAOC,KAAP,EAAcE,MAA3B;AAAA,QACEO,MAAMC,KAAKC,KAAL,CAAW,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAlC,CADR;AAAA,QAEEC,UAFF;AAAA,QAGEC,UAHF;AAKA,QAAI,QAAOb,MAAP,yCAAOA,MAAP,OAAkB,QAAtB,EAAgC;AAC9B,YAAIA,OAAOc,cAAP,CAAsB,KAAtB,CAAJ,EAAkC;AAChCF,yBAAaZ,OAAO,KAAP,CAAb;AACD,SAFD,MAEO,IAAIA,OAAOc,cAAP,CAAsB,KAAtB,CAAJ,EAAkC;AACvCF,yBAAaZ,OAAO,KAAP,CAAb;AACD;AAED,YAAIA,OAAOc,cAAP,CAAsB,KAAtB,CAAJ,EAAkC;AAChCD,yBAAab,OAAO,KAAP,CAAb;AACD,SAFD,MAEO;AACL;AACAa,yBAAaD,aAAa,KAA1B;AACD;AACF;AAED,WACEL,OAAOK,UAAP,IAAqBC,UAArB,IAAmCN,OAAOK,UAA1C,IAAwDL,OAAOM,UADjE;AAGD,CAxBM;AA0BP;;;;;;;;;;AAUO,IAAME,sCAAe,SAAfA,YAAe,CAASjB,KAAT,EAAc;AACxC,QAAIE,SAASH,OAAOC,KAAP,EAAcE,MAA3B;AACA,QAAI,QAAOA,MAAP,yCAAOA,MAAP,OAAkB,QAAlB,IAA8BA,OAAOc,cAAP,CAAsB,KAAtB,CAAlC,EAAgE;AAC9D,eAAOd,OAAO,KAAP,CAAP;AACD;AACD,WAAO,IAAP;AACD,CANM;AAQP;;;;;;;;;;;AAWO,IAAMgB,wCAAgB,SAAhBA,aAAgB,CAASlB,KAAT,EAAc;AACzC,QAAImB,UAAUpB,OAAOC,KAAP,CAAd;AAAA,QACEE,SAASiB,QAAQjB,MADnB;AAGA,WACE,CAAC,CAACiB,QAAQf,SAAV,IACA,CAAC,CAACF,MADF,IAEA,QAAOA,MAAP,yCAAOA,MAAP,OAAkB,QAFlB,IAGAA,OAAOc,cAAP,CAAsB,KAAtB,CAJF;AAMD,CAVM;AAYP;;;;;;;;;;AAUO,IAAMI,4BAAU,SAAVA,OAAU,CAASpB,KAAT,EAAc;AACnC,QAAIE,SAASH,OAAOC,KAAP,EAAcE,MAA3B;AACA,WAAO,QAAOA,MAAP,yCAAOA,MAAP,OAAkB,QAAlB,IAA8BA,OAAO,OAAP,MAAoB,IAAzD;AACD,CAHM","file":"jwt.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { base64Decode } from '../database/core/util/util';\nimport { jsonEval } from './json';\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {{header: *, claims: *, data: *, signature: string}}\n */\nexport const decode = function(token) {\n  var header = {},\n    claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    var parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '');\n    claims = jsonEval(base64Decode(parts[1]) || '');\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header: header,\n    claims: claims,\n    data: data,\n    signature: signature\n  };\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {boolean}\n */\nexport const isValidTimestamp = function(token) {\n  var claims = decode(token).claims,\n    now = Math.floor(new Date().getTime() / 1000),\n    validSince,\n    validUntil;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'];\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'];\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'];\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    now && validSince && validUntil && now >= validSince && now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {?number}\n */\nexport const issuedAtTime = function(token) {\n  var claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'];\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time and non-empty\n * signature.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {boolean}\n */\nexport const isValidFormat = function(token) {\n  var decoded = decode(token),\n    claims = decoded.claims;\n\n  return (\n    !!decoded.signature &&\n    !!claims &&\n    typeof claims === 'object' &&\n    claims.hasOwnProperty('iat')\n  );\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {boolean}\n */\nexport const isAdmin = function(token) {\n  var claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n"]}