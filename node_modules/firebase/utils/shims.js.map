{"version":3,"sources":["../src/utils/shims.ts"],"names":["Array","prototype","findIndex","Object","defineProperty","value","predicate","TypeError","o","len","length","thisArg","arguments","k","kValue","call","find","undefined"],"mappings":";;AAAA;;;;;AAKA,IAAI,CAACA,MAAMC,SAAN,CAAgBC,SAArB,EAAgC;AAC9BC,WAAOC,cAAP,CAAsBJ,MAAMC,SAA5B,EAAuC,WAAvC,EAAoD;AAClDI,eAAO,eAASC,SAAT,EAAkB;AACvB;AACA,gBAAI,QAAQ,IAAZ,EAAkB;AAChB,sBAAM,IAAIC,SAAJ,CAAc,+BAAd,CAAN;AACD;AAED,gBAAIC,IAAIL,OAAO,IAAP,CAAR;AAEA;AACA,gBAAIM,MAAMD,EAAEE,MAAF,KAAa,CAAvB;AAEA;AACA,gBAAI,OAAOJ,SAAP,KAAqB,UAAzB,EAAqC;AACnC,sBAAM,IAAIC,SAAJ,CAAc,8BAAd,CAAN;AACD;AAED;AACA,gBAAII,UAAUC,UAAU,CAAV,CAAd;AAEA;AACA,gBAAIC,IAAI,CAAR;AAEA;AACA,mBAAOA,IAAIJ,GAAX,EAAgB;AACd;AACA;AACA;AACA;AACA,oBAAIK,SAASN,EAAEK,CAAF,CAAb;AACA,oBAAIP,UAAUS,IAAV,CAAeJ,OAAf,EAAwBG,MAAxB,EAAgCD,CAAhC,EAAmCL,CAAnC,CAAJ,EAA2C;AACzC,2BAAOK,CAAP;AACD;AACD;AACAA;AACD;AAED;AACA,mBAAO,CAAC,CAAR;AACD;AAvCiD,KAApD;AAyCD;AAED;;;;;AAKA,IAAI,CAACb,MAAMC,SAAN,CAAgBe,IAArB,EAA2B;AACzBb,WAAOC,cAAP,CAAsBJ,MAAMC,SAA5B,EAAuC,MAAvC,EAA+C;AAC7CI,eAAO,eAASC,SAAT,EAAkB;AACvB;AACA,gBAAI,QAAQ,IAAZ,EAAkB;AAChB,sBAAM,IAAIC,SAAJ,CAAc,+BAAd,CAAN;AACD;AAED,gBAAIC,IAAIL,OAAO,IAAP,CAAR;AAEA;AACA,gBAAIM,MAAMD,EAAEE,MAAF,KAAa,CAAvB;AAEA;AACA,gBAAI,OAAOJ,SAAP,KAAqB,UAAzB,EAAqC;AACnC,sBAAM,IAAIC,SAAJ,CAAc,8BAAd,CAAN;AACD;AAED;AACA,gBAAII,UAAUC,UAAU,CAAV,CAAd;AAEA;AACA,gBAAIC,IAAI,CAAR;AAEA;AACA,mBAAOA,IAAIJ,GAAX,EAAgB;AACd;AACA;AACA;AACA;AACA,oBAAIK,SAASN,EAAEK,CAAF,CAAb;AACA,oBAAIP,UAAUS,IAAV,CAAeJ,OAAf,EAAwBG,MAAxB,EAAgCD,CAAhC,EAAmCL,CAAnC,CAAJ,EAA2C;AACzC,2BAAOM,MAAP;AACD;AACD;AACAD;AACD;AAED;AACA,mBAAOI,SAAP;AACD;AAvC4C,KAA/C;AAyCD","file":"shims.js","sourcesContent":["/**\n * This is the Array.prototype.findIndex polyfill from MDN\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\n * https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\n */\nif (!Array.prototype.findIndex) {\n  Object.defineProperty(Array.prototype, 'findIndex', {\n    value: function(predicate) {\n      // 1. Let O be ? ToObject(this value).\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      }\n\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0;\n\n      // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n      if (typeof predicate !== 'function') {\n        throw new TypeError('predicate must be a function');\n      }\n\n      // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n      var thisArg = arguments[1];\n\n      // 5. Let k be 0.\n      var k = 0;\n\n      // 6. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kValue be ? Get(O, Pk).\n        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n        // d. If testResult is true, return k.\n        var kValue = o[k];\n        if (predicate.call(thisArg, kValue, k, o)) {\n          return k;\n        }\n        // e. Increase k by 1.\n        k++;\n      }\n\n      // 7. Return -1.\n      return -1;\n    }\n  });\n}\n\n/**\n * This is the Array.prototype.find polyfill from MDN\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\n * https://tc39.github.io/ecma262/#sec-array.prototype.find\n */\nif (!Array.prototype.find) {\n  Object.defineProperty(Array.prototype, 'find', {\n    value: function(predicate) {\n      // 1. Let O be ? ToObject(this value).\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      }\n\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0;\n\n      // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n      if (typeof predicate !== 'function') {\n        throw new TypeError('predicate must be a function');\n      }\n\n      // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n      var thisArg = arguments[1];\n\n      // 5. Let k be 0.\n      var k = 0;\n\n      // 6. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kValue be ? Get(O, Pk).\n        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n        // d. If testResult is true, return kValue.\n        var kValue = o[k];\n        if (predicate.call(thisArg, kValue, k, o)) {\n          return kValue;\n        }\n        // e. Increase k by 1.\n        k++;\n      }\n\n      // 7. Return undefined.\n      return undefined;\n    }\n  });\n}\n"]}