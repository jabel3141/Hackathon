{"version":3,"sources":["../src/utils/utf8.ts"],"names":["stringToByteArray","str","out","p","i","length","c","charCodeAt","high","low","stringLength"],"mappings":";;;;;;;AAgBA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIO,IAAMA,gDAAoB,SAApBA,iBAAoB,CAASC,GAAT,EAAY;AAC3C,QAAIC,MAAM,EAAV;AAAA,QACEC,IAAI,CADN;AAEA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,IAAII,MAAxB,EAAgCD,GAAhC,EAAqC;AACnC,YAAIE,IAAIL,IAAIM,UAAJ,CAAeH,CAAf,CAAR;AAEA;AACA,YAAIE,KAAK,MAAL,IAAeA,KAAK,MAAxB,EAAgC;AAC9B,gBAAIE,OAAOF,IAAI,MAAf,CAD8B,CACP;AACvBF;AACA,gCAAOA,IAAIH,IAAII,MAAf,EAAuB,yCAAvB;AACA,gBAAII,MAAMR,IAAIM,UAAJ,CAAeH,CAAf,IAAoB,MAA9B,CAJ8B,CAIQ;AACtCE,gBAAI,WAAWE,QAAQ,EAAnB,IAAyBC,GAA7B;AACD;AAED,YAAIH,IAAI,GAAR,EAAa;AACXJ,gBAAIC,GAAJ,IAAWG,CAAX;AACD,SAFD,MAEO,IAAIA,IAAI,IAAR,EAAc;AACnBJ,gBAAIC,GAAJ,IAAYG,KAAK,CAAN,GAAW,GAAtB;AACAJ,gBAAIC,GAAJ,IAAYG,IAAI,EAAL,GAAW,GAAtB;AACD,SAHM,MAGA,IAAIA,IAAI,KAAR,EAAe;AACpBJ,gBAAIC,GAAJ,IAAYG,KAAK,EAAN,GAAY,GAAvB;AACAJ,gBAAIC,GAAJ,IAAaG,KAAK,CAAN,GAAW,EAAZ,GAAkB,GAA7B;AACAJ,gBAAIC,GAAJ,IAAYG,IAAI,EAAL,GAAW,GAAtB;AACD,SAJM,MAIA;AACLJ,gBAAIC,GAAJ,IAAYG,KAAK,EAAN,GAAY,GAAvB;AACAJ,gBAAIC,GAAJ,IAAaG,KAAK,EAAN,GAAY,EAAb,GAAmB,GAA9B;AACAJ,gBAAIC,GAAJ,IAAaG,KAAK,CAAN,GAAW,EAAZ,GAAkB,GAA7B;AACAJ,gBAAIC,GAAJ,IAAYG,IAAI,EAAL,GAAW,GAAtB;AACD;AACF;AACD,WAAOJ,GAAP;AACD,CAhCM;AAkCP;;;;;AAnEA;;;;;;;;;;;;;;;AAwEO,IAAMQ,sCAAe,SAAfA,YAAe,CAAST,GAAT,EAAY;AACtC,QAAIE,IAAI,CAAR;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,IAAII,MAAxB,EAAgCD,GAAhC,EAAqC;AACnC,YAAIE,IAAIL,IAAIM,UAAJ,CAAeH,CAAf,CAAR;AACA,YAAIE,IAAI,GAAR,EAAa;AACXH;AACD,SAFD,MAEO,IAAIG,IAAI,IAAR,EAAc;AACnBH,iBAAK,CAAL;AACD,SAFM,MAEA,IAAIG,KAAK,MAAL,IAAeA,KAAK,MAAxB,EAAgC;AACrC;AACAH,iBAAK,CAAL;AACAC,gBAHqC,CAGhC;AACN,SAJM,MAIA;AACLD,iBAAK,CAAL;AACD;AACF;AACD,WAAOA,CAAP;AACD,CAjBM","file":"utf8.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function(str) {\n  var out = [],\n    p = 0;\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      var high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function(str) {\n  var p = 0;\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n"]}