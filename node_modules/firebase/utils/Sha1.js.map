{"version":3,"sources":["../src/utils/Sha1.ts","utils/Sha1.js"],"names":["__extends","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","Sha1","_super","_this","call","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","i","reset","compress_","buf","opt_offset","W","charCodeAt","t","a","c","e","f","k","update","bytes","opt_length","undefined","length","lengthMinusBlock","n","inbuf","digest","totalBits","j"],"mappings":"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","file":"Sha1.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { Hash } from './hash';\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @extends {Hash}\n * @final\n * @struct\n */\nexport class Sha1 extends Hash {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @type {!Array<number>}\n   * @private\n   */\n  private chain_: Array<number> = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @type {!Array<number>}\n   * @private\n   */\n  private buf_: Array<number> = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @type {!Array<number>}\n   * @private\n   */\n  private W_: Array<number> = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @type {!Array<number>}\n   * @private\n   */\n  private pad_: Array<number> = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  constructor() {\n    super();\n\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (var i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset() {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param {!Array<number>|!Uint8Array|string} buf Block to compress.\n   * @param {number=} opt_offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf, opt_offset?) {\n    if (!opt_offset) {\n      opt_offset = 0;\n    }\n\n    var W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (var i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(opt_offset) << 24) |\n          (buf.charCodeAt(opt_offset + 1) << 16) |\n          (buf.charCodeAt(opt_offset + 2) << 8) |\n          buf.charCodeAt(opt_offset + 3);\n        opt_offset += 4;\n      }\n    } else {\n      for (var i = 0; i < 16; i++) {\n        W[i] =\n          (buf[opt_offset] << 24) |\n          (buf[opt_offset + 1] << 16) |\n          (buf[opt_offset + 2] << 8) |\n          buf[opt_offset + 3];\n        opt_offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (var i = 16; i < 80; i++) {\n      var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    var a = this.chain_[0];\n    var b = this.chain_[1];\n    var c = this.chain_[2];\n    var d = this.chain_[3];\n    var e = this.chain_[4];\n    var f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (var i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes, opt_length?) {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (opt_length === undefined) {\n      opt_length = bytes.length;\n    }\n\n    var lengthMinusBlock = opt_length - this.blockSize;\n    var n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    var buf = this.buf_;\n    var inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < opt_length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf == 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < opt_length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf == this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < opt_length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf == this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += opt_length;\n  }\n\n  /** @override */\n  digest() {\n    var digest = [];\n    var totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (var i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    var n = 0;\n    for (var i = 0; i < 5; i++) {\n      for (var j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n","/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Hash } from './hash';\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @extends {Hash}\n * @final\n * @struct\n */\nvar Sha1 = (function (_super) {\n    __extends(Sha1, _super);\n    function Sha1() {\n        var _this = _super.call(this) || this;\n        /**\n         * Holds the previous values of accumulated variables a-e in the compress_\n         * function.\n         * @type {!Array<number>}\n         * @private\n         */\n        _this.chain_ = [];\n        /**\n         * A buffer holding the partially computed hash result.\n         * @type {!Array<number>}\n         * @private\n         */\n        _this.buf_ = [];\n        /**\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n         * as the message schedule in the docs.\n         * @type {!Array<number>}\n         * @private\n         */\n        _this.W_ = [];\n        /**\n         * Contains data needed to pad messages less than 64 bytes.\n         * @type {!Array<number>}\n         * @private\n         */\n        _this.pad_ = [];\n        /**\n         * @private {number}\n         */\n        _this.inbuf_ = 0;\n        /**\n         * @private {number}\n         */\n        _this.total_ = 0;\n        _this.blockSize = 512 / 8;\n        _this.pad_[0] = 128;\n        for (var i = 1; i < _this.blockSize; ++i) {\n            _this.pad_[i] = 0;\n        }\n        _this.reset();\n        return _this;\n    }\n    Sha1.prototype.reset = function () {\n        this.chain_[0] = 0x67452301;\n        this.chain_[1] = 0xefcdab89;\n        this.chain_[2] = 0x98badcfe;\n        this.chain_[3] = 0x10325476;\n        this.chain_[4] = 0xc3d2e1f0;\n        this.inbuf_ = 0;\n        this.total_ = 0;\n    };\n    /**\n     * Internal compress helper function.\n     * @param {!Array<number>|!Uint8Array|string} buf Block to compress.\n     * @param {number=} opt_offset Offset of the block in the buffer.\n     * @private\n     */\n    Sha1.prototype.compress_ = function (buf, opt_offset) {\n        if (!opt_offset) {\n            opt_offset = 0;\n        }\n        var W = this.W_;\n        // get 16 big endian words\n        if (typeof buf === 'string') {\n            for (var i = 0; i < 16; i++) {\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n                // have a bug that turns the post-increment ++ operator into pre-increment\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\n                // correctness and which is affected by this bug, so I've removed all uses\n                // of post-increment ++ in which the result value is used.  We can revert\n                // this change once the Safari bug\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n                // most clients have been updated.\n                W[i] =\n                    (buf.charCodeAt(opt_offset) << 24) |\n                        (buf.charCodeAt(opt_offset + 1) << 16) |\n                        (buf.charCodeAt(opt_offset + 2) << 8) |\n                        buf.charCodeAt(opt_offset + 3);\n                opt_offset += 4;\n            }\n        }\n        else {\n            for (var i = 0; i < 16; i++) {\n                W[i] =\n                    (buf[opt_offset] << 24) |\n                        (buf[opt_offset + 1] << 16) |\n                        (buf[opt_offset + 2] << 8) |\n                        buf[opt_offset + 3];\n                opt_offset += 4;\n            }\n        }\n        // expand to 80 words\n        for (var i = 16; i < 80; i++) {\n            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n        }\n        var a = this.chain_[0];\n        var b = this.chain_[1];\n        var c = this.chain_[2];\n        var d = this.chain_[3];\n        var e = this.chain_[4];\n        var f, k;\n        // TODO(user): Try to unroll this loop to speed up the computation.\n        for (var i = 0; i < 80; i++) {\n            if (i < 40) {\n                if (i < 20) {\n                    f = d ^ (b & (c ^ d));\n                    k = 0x5a827999;\n                }\n                else {\n                    f = b ^ c ^ d;\n                    k = 0x6ed9eba1;\n                }\n            }\n            else {\n                if (i < 60) {\n                    f = (b & c) | (d & (b | c));\n                    k = 0x8f1bbcdc;\n                }\n                else {\n                    f = b ^ c ^ d;\n                    k = 0xca62c1d6;\n                }\n            }\n            var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n            e = d;\n            d = c;\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n            b = a;\n            a = t;\n        }\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n    };\n    Sha1.prototype.update = function (bytes, opt_length) {\n        // TODO(johnlenz): tighten the function signature and remove this check\n        if (bytes == null) {\n            return;\n        }\n        if (opt_length === undefined) {\n            opt_length = bytes.length;\n        }\n        var lengthMinusBlock = opt_length - this.blockSize;\n        var n = 0;\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\n        var buf = this.buf_;\n        var inbuf = this.inbuf_;\n        // The outer while loop should execute at most twice.\n        while (n < opt_length) {\n            // When we have no data in the block to top up, we can directly process the\n            // input buffer (assuming it contains sufficient data). This gives ~25%\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n            // the data is provided in large chunks (or in multiples of 64 bytes).\n            if (inbuf == 0) {\n                while (n <= lengthMinusBlock) {\n                    this.compress_(bytes, n);\n                    n += this.blockSize;\n                }\n            }\n            if (typeof bytes === 'string') {\n                while (n < opt_length) {\n                    buf[inbuf] = bytes.charCodeAt(n);\n                    ++inbuf;\n                    ++n;\n                    if (inbuf == this.blockSize) {\n                        this.compress_(buf);\n                        inbuf = 0;\n                        // Jump to the outer loop so we use the full-block optimization.\n                        break;\n                    }\n                }\n            }\n            else {\n                while (n < opt_length) {\n                    buf[inbuf] = bytes[n];\n                    ++inbuf;\n                    ++n;\n                    if (inbuf == this.blockSize) {\n                        this.compress_(buf);\n                        inbuf = 0;\n                        // Jump to the outer loop so we use the full-block optimization.\n                        break;\n                    }\n                }\n            }\n        }\n        this.inbuf_ = inbuf;\n        this.total_ += opt_length;\n    };\n    /** @override */\n    Sha1.prototype.digest = function () {\n        var digest = [];\n        var totalBits = this.total_ * 8;\n        // Add pad 0x80 0x00*.\n        if (this.inbuf_ < 56) {\n            this.update(this.pad_, 56 - this.inbuf_);\n        }\n        else {\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n        }\n        // Add # bits.\n        for (var i = this.blockSize - 1; i >= 56; i--) {\n            this.buf_[i] = totalBits & 255;\n            totalBits /= 256; // Don't use bit-shifting here!\n        }\n        this.compress_(this.buf_);\n        var n = 0;\n        for (var i = 0; i < 5; i++) {\n            for (var j = 24; j >= 0; j -= 8) {\n                digest[n] = (this.chain_[i] >> j) & 255;\n                ++n;\n            }\n        }\n        return digest;\n    };\n    return Sha1;\n}(Hash));\nexport { Sha1 };\n\n\n"]}