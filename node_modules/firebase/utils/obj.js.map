{"version":3,"sources":["../src/utils/obj.ts"],"names":["contains","obj","key","Object","prototype","hasOwnProperty","call","safeGet","forEach","fn","extend","objTo","objFrom","value","clone","isNonNullObject","isEmpty","getCount","rv","map","f","opt_obj","res","findKey","opt_this","undefined","findValue","getAnyKey","getValues","i","every"],"mappings":"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","file":"obj.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n// See http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/\n\nexport const contains = function(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nexport const safeGet = function(obj, key) {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) return obj[key];\n  // else return undefined.\n};\n\n/**\n * Enumerates the keys/values in an object, excluding keys defined on the prototype.\n *\n * @param {?Object.<K,V>} obj Object to enumerate.\n * @param {!function(K, V)} fn Function to call for each key and value.\n * @template K,V\n */\nexport const forEach = function(obj, fn) {\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      fn(key, obj[key]);\n    }\n  }\n};\n\n/**\n * Copies all the (own) properties from one object to another.\n * @param {!Object} objTo\n * @param {!Object} objFrom\n * @return {!Object} objTo\n */\nexport const extend = function(objTo, objFrom) {\n  forEach(objFrom, function(key, value) {\n    objTo[key] = value;\n  });\n  return objTo;\n};\n\n/**\n * Returns a clone of the specified object.\n * @param {!Object} obj\n * @return {!Object} cloned obj.\n */\nexport const clone = function(obj) {\n  return extend({}, obj);\n};\n\n/**\n * Returns true if obj has typeof \"object\" and is not null.  Unlike goog.isObject(), does not return true\n * for functions.\n *\n * @param obj {*} A potential object.\n * @returns {boolean} True if it's an object.\n */\nexport const isNonNullObject = function(obj) {\n  return typeof obj === 'object' && obj !== null;\n};\n\nexport const isEmpty = function(obj) {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nexport const getCount = function(obj) {\n  var rv = 0;\n  for (var key in obj) {\n    rv++;\n  }\n  return rv;\n};\n\nexport const map = function(obj, f, opt_obj?) {\n  var res = {};\n  for (var key in obj) {\n    res[key] = f.call(opt_obj, obj[key], key, obj);\n  }\n  return res;\n};\n\nexport const findKey = function(obj, fn, opt_this?) {\n  for (var key in obj) {\n    if (fn.call(opt_this, obj[key], key, obj)) {\n      return key;\n    }\n  }\n  return undefined;\n};\n\nexport const findValue = function(obj, fn, opt_this?) {\n  var key = findKey(obj, fn, opt_this);\n  return key && obj[key];\n};\n\nexport const getAnyKey = function(obj) {\n  for (var key in obj) {\n    return key;\n  }\n};\n\nexport const getValues = function(obj) {\n  var res = [];\n  var i = 0;\n  for (var key in obj) {\n    res[i++] = obj[key];\n  }\n  return res;\n};\n\n/**\n * Tests whether every key/value pair in an object pass the test implemented\n * by the provided function\n *\n * @param {?Object.<K,V>} obj Object to test.\n * @param {!function(K, V)} fn Function to call for each key and value.\n * @template K,V\n */\nexport const every = function<V>(\n  obj: Object,\n  fn: (k: string, v?: V) => boolean\n): boolean {\n  for (let key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      if (!fn(key, obj[key])) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n"]}