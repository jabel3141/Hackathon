{"version":3,"sources":["../src/utils/validation.ts"],"names":["errorPrefix","validateArgCount","fnName","minCount","maxCount","argCount","argError","error","Error","argumentNumber","optional","argName","validateNamespace","namespace","validateCallback","callback","validateContextObject","context"],"mappings":";;;;;;;;QAqDMA,W,GAAAA,W;AArDN;;;;;;;;;;;;;;;AAgBA;;;;;;;;;AASO,IAAMC,8CAAmB,SAAnBA,gBAAmB,CAASC,MAAT,EAAiBC,QAAjB,EAA2BC,QAA3B,EAAqCC,QAArC,EAA6C;AAC3E,QAAIC,QAAJ;AACA,QAAID,WAAWF,QAAf,EAAyB;AACvBG,mBAAW,cAAcH,QAAzB;AACD,KAFD,MAEO,IAAIE,WAAWD,QAAf,EAAyB;AAC9BE,mBAAWF,aAAa,CAAb,GAAiB,MAAjB,GAA0B,kBAAkBA,QAAvD;AACD;AACD,QAAIE,QAAJ,EAAc;AACZ,YAAIC,QACFL,SACA,2BADA,GAEAG,QAFA,IAGCA,aAAa,CAAb,GAAiB,YAAjB,GAAgC,aAHjC,IAIA,WAJA,GAKAC,QALA,GAMA,GAPF;AAQA,cAAM,IAAIE,KAAJ,CAAUD,KAAV,CAAN;AACD;AACF,CAlBM;AAoBP;;;;;;;;AAQM,SAAAP,WAAA,CAAsBE,MAAtB,EAA8BO,cAA9B,EAA8CC,QAA9C,EAAsD;AAC1D,QAAIC,UAAU,EAAd;AACA,YAAQF,cAAR;AACE,aAAK,CAAL;AACEE,sBAAUD,WAAW,OAAX,GAAqB,OAA/B;AACA;AACF,aAAK,CAAL;AACEC,sBAAUD,WAAW,QAAX,GAAsB,QAAhC;AACA;AACF,aAAK,CAAL;AACEC,sBAAUD,WAAW,OAAX,GAAqB,OAA/B;AACA;AACF,aAAK,CAAL;AACEC,sBAAUD,WAAW,QAAX,GAAsB,QAAhC;AACA;AACF;AACE,kBAAM,IAAIF,KAAJ,CACJ,iEADI,CAAN;AAdJ;AAmBA,QAAID,QAAQL,SAAS,WAArB;AAEAK,aAASI,UAAU,YAAnB;AACA,WAAOJ,KAAP;AACD;AAED;;;;;;AAMO,IAAMK,gDAAoB,SAApBA,iBAAoB,CAC/BV,MAD+B,EAE/BO,cAF+B,EAG/BI,SAH+B,EAI/BH,QAJ+B,EAIvB;AAER,QAAIA,YAAY,CAACG,SAAjB,EAA4B;AAC5B,QAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC;AACA,cAAM,IAAIL,KAAJ,CACJR,YAAYE,MAAZ,EAAoBO,cAApB,EAAoCC,QAApC,IACE,qCAFE,CAAN;AAID;AACF,CAdM;AAgBA,IAAMI,8CAAmB,SAAnBA,gBAAmB,CAC9BZ,MAD8B,EAE9BO,cAF8B,EAG9BM,QAH8B,EAI9BL,QAJ8B,EAItB;AAER,QAAIA,YAAY,CAACK,QAAjB,EAA2B;AAC3B,QAAI,OAAOA,QAAP,KAAoB,UAAxB,EACE,MAAM,IAAIP,KAAJ,CACJR,YAAYE,MAAZ,EAAoBO,cAApB,EAAoCC,QAApC,IACE,2BAFE,CAAN;AAIH,CAZM;AAcA,IAAMM,wDAAwB,SAAxBA,qBAAwB,CACnCd,MADmC,EAEnCO,cAFmC,EAGnCQ,OAHmC,EAInCP,QAJmC,EAI3B;AAER,QAAIA,YAAY,CAACO,OAAjB,EAA0B;AAC1B,QAAI,QAAOA,OAAP,yCAAOA,OAAP,OAAmB,QAAnB,IAA+BA,YAAY,IAA/C,EACE,MAAM,IAAIT,KAAJ,CACJR,YAAYE,MAAZ,EAAoBO,cAApB,EAAoCC,QAApC,IACE,iCAFE,CAAN;AAIH,CAZM","file":"validation.js","sourcesContent":["/**\n* Copyright 2017 Google Inc.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param {!string} fnName The function name\n * @param {!number} minCount The minimum number of arguments to allow for the function call\n * @param {!number} maxCount The maximum number of argument to allow for the function call\n * @param {!number} argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function(fnName, minCount, maxCount, argCount) {\n  var argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    var error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param {!string} fnName The function name\n * @param {!number} argumentNumber The index of the argument\n * @param {boolean} optional Whether or not the argument is optional\n * @return {!string} The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(fnName, argumentNumber, optional) {\n  var argName = '';\n  switch (argumentNumber) {\n    case 1:\n      argName = optional ? 'first' : 'First';\n      break;\n    case 2:\n      argName = optional ? 'second' : 'Second';\n      break;\n    case 3:\n      argName = optional ? 'third' : 'Third';\n      break;\n    case 4:\n      argName = optional ? 'fourth' : 'Fourth';\n      break;\n    default:\n      throw new Error(\n        'errorPrefix called with argumentNumber > 4.  Need to update it?'\n      );\n  }\n\n  var error = fnName + ' failed: ';\n\n  error += argName + ' argument ';\n  return error;\n}\n\n/**\n * @param {!string} fnName\n * @param {!number} argumentNumber\n * @param {!string} namespace\n * @param {boolean} optional\n */\nexport const validateNamespace = function(\n  fnName,\n  argumentNumber,\n  namespace,\n  optional\n) {\n  if (optional && !namespace) return;\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid firebase namespace.'\n    );\n  }\n};\n\nexport const validateCallback = function(\n  fnName,\n  argumentNumber,\n  callback,\n  optional\n) {\n  if (optional && !callback) return;\n  if (typeof callback !== 'function')\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid function.'\n    );\n};\n\nexport const validateContextObject = function(\n  fnName,\n  argumentNumber,\n  context,\n  optional\n) {\n  if (optional && !context) return;\n  if (typeof context !== 'object' || context === null)\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid context object.'\n    );\n};\n"]}